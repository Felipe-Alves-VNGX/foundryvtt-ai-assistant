{"version":3,"file":"index.js","mappings":"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","sources":["webpack://foundryvtt-ai-assistant/./scripts/ai-user-manager.js","webpack://foundryvtt-ai-assistant/./scripts/api-handler.js","webpack://foundryvtt-ai-assistant/./scripts/permissions.js","webpack://foundryvtt-ai-assistant/./scripts/chat-interface.js","webpack://foundryvtt-ai-assistant/./scripts/providers/manus.js","webpack://foundryvtt-ai-assistant/./scripts/providers/openai.js","webpack://foundryvtt-ai-assistant/./scripts/config-interface.js","webpack://foundryvtt-ai-assistant/./scripts/main.js"],"sourcesContent":["/**\n * Gerenciador do usuário IA\n * Responsável por criar, gerenciar e manter o usuário dedicado para IA\n */\n\nexport class AIUserManager {\n  constructor () {\n    this.aiUser = null\n    this.aiUserId = null\n    this.sessionData = new Map()\n    this.lastActivity = null\n    this.sessionTimeout = 30 * 60 * 1000 // 30 minutos\n  }\n\n  async initialize () {\n    console.log('AI Assistant | Inicializando AIUserManager...')\n\n    try {\n      // Verificar se usuário IA já existe\n      this.aiUser = await this.findExistingAIUser()\n\n      if (!this.aiUser) {\n        console.log('AI Assistant | Usuário IA não encontrado, criando...')\n        await this.createAIUser()\n      } else {\n        console.log('AI Assistant | Usuário IA encontrado:', this.aiUser.name)\n        this.aiUserId = this.aiUser.id\n        await this.validateAIUser()\n      }\n\n      // Configurar monitoramento de sessão\n      this.setupSessionMonitoring()\n\n      // Marcar como ativo\n      this.updateActivity()\n    } catch (error) {\n      console.error('AI Assistant | Erro na inicialização do AIUserManager:', error)\n      throw error\n    }\n  }\n\n  async findExistingAIUser () {\n    // Buscar usuário marcado como IA\n    const aiUser = game.users.find(u => u.getFlag('foundryvtt-ai-assistant', 'isAIUser'))\n\n    if (aiUser) {\n      // Verificar se ainda é válido\n      const isValid = await this.validateUserData(aiUser)\n      return isValid ? aiUser : null\n    }\n\n    return null\n  }\n\n  async validateUserData (user) {\n    try {\n      // Verificar se usuário ainda existe e tem dados válidos\n      if (!user || !user.id || !user.name) return false\n\n      // Verificar se tem as flags necessárias\n      const isAIUser = user.getFlag('foundryvtt-ai-assistant', 'isAIUser')\n      if (!isAIUser) return false\n\n      // Verificar se não foi deletado\n      const currentUser = game.users.get(user.id)\n      return currentUser !== undefined\n    } catch (error) {\n      console.warn('AI Assistant | Erro na validação do usuário:', error)\n      return false\n    }\n  }\n\n  async createAIUser (options = {}) {\n    const defaultOptions = {\n      name: 'AI Assistant',\n      avatar: 'icons/svg/robot.svg',\n      color: '#00ff88',\n      role: CONST.USER_ROLES.PLAYER\n    }\n\n    const userData = foundry.utils.mergeObject(defaultOptions, options)\n\n    try {\n      // Verificar se nome já existe\n      const existingUser = game.users.find(u => u.name === userData.name)\n      if (existingUser) {\n        userData.name = `${userData.name} (${Date.now()})`\n      }\n\n      // Criar usuário\n      this.aiUser = await User.create(userData)\n      this.aiUserId = this.aiUser.id\n\n      // Configurar flags específicas\n      await this.aiUser.setFlag('foundryvtt-ai-assistant', 'isAIUser', true)\n      await this.aiUser.setFlag('foundryvtt-ai-assistant', 'createdAt', Date.now())\n      await this.aiUser.setFlag('foundryvtt-ai-assistant', 'version', '1.0.0')\n\n      // Configurar permissões iniciais\n      await this.setupInitialPermissions()\n\n      console.log('AI Assistant | Usuário IA criado com sucesso:', this.aiUser.name)\n\n      // Notificar outros usuários\n      await this.notifyUserCreation()\n\n      return this.aiUser\n    } catch (error) {\n      console.error('AI Assistant | Erro ao criar usuário IA:', error)\n      throw new Error(`Falha ao criar usuário IA: ${error.message}`)\n    }\n  }\n\n  async setupInitialPermissions () {\n    if (!this.aiUser) return\n\n    try {\n      // Configurar permissões básicas do FoundryVTT\n      const permissions = {\n        ACTOR_CREATE: true,\n        DRAWING_CREATE: true,\n        ITEM_CREATE: true,\n        JOURNAL_CREATE: true,\n        MACRO_SCRIPT: true,\n        MESSAGE_WHISPER: true,\n        NOTE_CREATE: true,\n        SETTINGS_MODIFY: false,\n        SHOW_CURSOR: true,\n        SHOW_RULER: true,\n        TEMPLATE_CREATE: true,\n        TOKEN_CREATE: true,\n        TOKEN_CONFIGURE: true,\n        WALL_DOORS: true\n      }\n\n      // Aplicar permissões (simulado - FoundryVTT real requer abordagem diferente)\n      await this.aiUser.setFlag('foundryvtt-ai-assistant', 'permissions', permissions)\n\n      console.log('AI Assistant | Permissões iniciais configuradas')\n    } catch (error) {\n      console.error('AI Assistant | Erro ao configurar permissões:', error)\n    }\n  }\n\n  async validateAIUser () {\n    if (!this.aiUser) return false\n\n    try {\n      // Verificar se usuário ainda existe\n      const currentUser = game.users.get(this.aiUserId)\n      if (!currentUser) {\n        console.warn('AI Assistant | Usuário IA não encontrado, recriando...')\n        await this.createAIUser()\n        return true\n      }\n\n      // Verificar flags\n      const isAIUser = currentUser.getFlag('foundryvtt-ai-assistant', 'isAIUser')\n      if (!isAIUser) {\n        console.warn('AI Assistant | Flag de usuário IA perdida, restaurando...')\n        await currentUser.setFlag('foundryvtt-ai-assistant', 'isAIUser', true)\n      }\n\n      // Atualizar referência local\n      this.aiUser = currentUser\n\n      return true\n    } catch (error) {\n      console.error('AI Assistant | Erro na validação do usuário IA:', error)\n      return false\n    }\n  }\n\n  async updateAIUserPermissions (permissions) {\n    if (!this.aiUser) {\n      throw new Error('Usuário IA não inicializado')\n    }\n\n    try {\n      // Obter permissões atuais\n      const currentPermissions = this.aiUser.getFlag('foundryvtt-ai-assistant', 'permissions') || {}\n      const updatedPermissions = { ...currentPermissions, ...permissions }\n\n      await this.aiUser.setFlag('foundryvtt-ai-assistant', 'permissions', updatedPermissions)\n\n      // Log da mudança\n      console.log('AI Assistant | Permissões atualizadas:', permissions)\n\n      // Salvar histórico de mudanças\n      await this.logPermissionChange(permissions)\n    } catch (error) {\n      console.error('AI Assistant | Erro ao atualizar permissões:', error)\n      throw error\n    }\n  }\n\n  async logPermissionChange (permissions) {\n    const changeLog = this.aiUser.getFlag('foundryvtt-ai-assistant', 'permissionHistory') || []\n\n    changeLog.push({\n      timestamp: Date.now(),\n      changes: permissions,\n      changedBy: game.user.id\n    })\n\n    // Manter apenas os últimos 50 registros\n    if (changeLog.length > 50) {\n      changeLog.splice(0, changeLog.length - 50)\n    }\n\n    await this.aiUser.setFlag('foundryvtt-ai-assistant', 'permissionHistory', changeLog)\n  }\n\n  async deleteAIUser (confirm = false) {\n    if (!confirm) {\n      throw new Error('Confirmação necessária para deletar usuário IA')\n    }\n\n    if (!this.aiUser) {\n      console.warn('AI Assistant | Nenhum usuário IA para deletar')\n      return\n    }\n\n    try {\n      const userName = this.aiUser.name\n      const userId = this.aiUserId\n\n      // Limpar dados associados\n      await this.cleanupUserData()\n\n      // Deletar usuário\n      await this.aiUser.delete()\n\n      // Limpar referências locais\n      this.aiUser = null\n      this.aiUserId = null\n      this.sessionData.clear()\n\n      console.log('AI Assistant | Usuário IA deletado:', userName)\n\n      // Notificar\n      ui.notifications.info(`Usuário IA \"${userName}\" foi removido`)\n    } catch (error) {\n      console.error('AI Assistant | Erro ao deletar usuário IA:', error)\n      throw error\n    }\n  }\n\n  async cleanupUserData () {\n    if (!this.aiUser) return\n\n    try {\n      // Remover mensagens de chat do usuário IA\n      const messages = game.messages.filter(m => m.user?.id === this.aiUserId)\n      for (const message of messages) {\n        await message.delete()\n      }\n\n      // Remover ownership de documentos\n      const collections = [game.actors, game.items, game.scenes, game.journal, game.macros]\n\n      for (const collection of collections) {\n        for (const document of collection.contents) {\n          if (document.ownership?.[this.aiUserId]) {\n            const ownership = { ...document.ownership }\n            delete ownership[this.aiUserId]\n            await document.update({ ownership })\n          }\n        }\n      }\n\n      console.log('AI Assistant | Dados do usuário IA limpos')\n    } catch (error) {\n      console.error('AI Assistant | Erro na limpeza de dados:', error)\n    }\n  }\n\n  setupSessionMonitoring () {\n    // Monitorar atividade a cada 5 minutos\n    setInterval(() => {\n      this.checkSessionTimeout()\n    }, 5 * 60 * 1000)\n  }\n\n  checkSessionTimeout () {\n    if (!this.lastActivity) return\n\n    const now = Date.now()\n    const timeSinceActivity = now - this.lastActivity\n\n    if (timeSinceActivity > this.sessionTimeout) {\n      console.log('AI Assistant | Sessão expirada, renovando...')\n      this.refreshSession()\n    }\n  }\n\n  async refreshSession () {\n    try {\n      await this.validateAIUser()\n      this.updateActivity()\n      console.log('AI Assistant | Sessão renovada')\n    } catch (error) {\n      console.error('AI Assistant | Erro ao renovar sessão:', error)\n    }\n  }\n\n  updateActivity () {\n    this.lastActivity = Date.now()\n  }\n\n  async notifyUserCreation () {\n    const messageData = {\n      content: '🤖 <strong>AI Assistant</strong> foi conectado ao mundo e está pronto para ajudar!',\n      type: CONST.CHAT_MESSAGE_TYPES.OTHER,\n      speaker: {\n        alias: 'Sistema'\n      }\n    }\n\n    await ChatMessage.create(messageData)\n  }\n\n  // Getters\n  getAIUser () {\n    return this.aiUser\n  }\n\n  getAIUserId () {\n    return this.aiUserId\n  }\n\n  isInitialized () {\n    return this.aiUser !== null && this.aiUserId !== null\n  }\n\n  getSessionData (key) {\n    return this.sessionData.get(key)\n  }\n\n  setSessionData (key, value) {\n    this.sessionData.set(key, value)\n    this.updateActivity()\n  }\n\n  clearSessionData () {\n    this.sessionData.clear()\n  }\n\n  async getAIUserStats () {\n    if (!this.aiUser) return null\n\n    try {\n      const stats = {\n        id: this.aiUserId,\n        name: this.aiUser.name,\n        createdAt: this.aiUser.getFlag('foundryvtt-ai-assistant', 'createdAt'),\n        lastActivity: this.lastActivity,\n        sessionActive: this.lastActivity && (Date.now() - this.lastActivity) < this.sessionTimeout,\n        permissionHistory: this.aiUser.getFlag('foundryvtt-ai-assistant', 'permissionHistory') || [],\n        version: this.aiUser.getFlag('foundryvtt-ai-assistant', 'version')\n      }\n\n      return stats\n    } catch (error) {\n      console.error('AI Assistant | Erro ao obter estatísticas:', error)\n      return null\n    }\n  }\n}\n","/**\n * Manipulador de APIs do FoundryVTT\n * Responsável por todas as operações CRUD nos elementos do jogo\n */\n\nexport class APIHandler {\n  constructor (permissionManager, logger) {\n    this.permissionManager = permissionManager\n    this.logger = logger\n    this.initialized = false\n    this.operationQueue = []\n    this.isProcessingQueue = false\n  }\n\n  async initialize () {\n    console.log('AI Assistant | Inicializando APIHandler...')\n\n    try {\n      // Verificar se as APIs do FoundryVTT estão disponíveis\n      this.validateFoundryAPIs()\n\n      // Configurar templates padrão\n      this.setupDefaultTemplates()\n\n      // Inicializar fila de operações\n      this.startQueueProcessor()\n\n      this.initialized = true\n      console.log('AI Assistant | APIHandler inicializado com sucesso')\n    } catch (error) {\n      console.error('AI Assistant | Erro na inicialização do APIHandler:', error)\n      throw error\n    }\n  }\n\n  validateFoundryAPIs () {\n    const requiredAPIs = ['game.actors', 'game.items', 'game.scenes', 'game.journal', 'game.macros', 'game.tables', 'game.playlists']\n\n    for (const api of requiredAPIs) {\n      if (!foundry.utils.getProperty(window, api)) {\n        throw new Error(`API necessária não encontrada: ${api}`)\n      }\n    }\n  }\n\n  setupDefaultTemplates () {\n    this.templates = {\n      actor: {\n        character: {\n          type: 'character',\n          system: {\n            abilities: {\n              str: { value: 10 },\n              dex: { value: 10 },\n              con: { value: 10 },\n              int: { value: 10 },\n              wis: { value: 10 },\n              cha: { value: 10 }\n            },\n            attributes: { hp: { value: 8, max: 8 }, ac: { value: 10 } },\n            details: { level: { value: 1 }, xp: { value: 0 } }\n          }\n        },\n        npc: {\n          type: 'npc',\n          system: {\n            abilities: {\n              str: { value: 10 },\n              dex: { value: 10 },\n              con: { value: 10 },\n              int: { value: 10 },\n              wis: { value: 10 },\n              cha: { value: 10 }\n            },\n            attributes: { hp: { value: 4, max: 4 }, ac: { value: 10 } },\n            details: { cr: 0.125, type: { value: 'humanoid' } }\n          }\n        }\n      },\n      item: {\n        weapon: {\n          type: 'weapon',\n          system: {\n            weaponType: 'simpleM',\n            damage: { parts: [['1d6', 'slashing']] },\n            properties: { finesse: false, light: false }\n          }\n        },\n        spell: {\n          type: 'spell',\n          system: {\n            level: 1,\n            school: 'evocation',\n            components: { verbal: true, somatic: true, material: false }\n          }\n        }\n      }\n    }\n  }\n\n  startQueueProcessor () {\n    setInterval(async () => {\n      if (!this.isProcessingQueue && this.operationQueue.length > 0) {\n        await this.processOperationQueue()\n      }\n    }, 100)\n  }\n\n  async processOperationQueue () {\n    this.isProcessingQueue = true\n\n    try {\n      while (this.operationQueue.length > 0) {\n        const operation = this.operationQueue.shift()\n        await this.executeOperation(operation)\n      }\n    } catch (error) {\n      console.error('AI Assistant | Erro no processamento da fila:', error)\n    } finally {\n      this.isProcessingQueue = false\n    }\n  }\n\n  async executeOperation (operation) {\n    try {\n      const result = await operation.execute()\n      if (operation.callback) {\n        operation.callback(null, result)\n      }\n    } catch (error) {\n      if (operation.callback) {\n        operation.callback(error, null)\n      }\n    }\n  }\n\n  queueOperation (operation) {\n    return new Promise((resolve, reject) => {\n      this.operationQueue.push({\n        ...operation,\n        callback: (error, result) => {\n          if (error) reject(error)\n          else resolve(result)\n        }\n      })\n    })\n  }\n\n  // ========== ATORES ==========\n\n  async createActor (data, options = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        const startTime = Date.now()\n\n        try {\n          // Verificar permissões\n          if (!this.permissionManager.checkPermission('createActor')) {\n            throw new Error('Permissão insuficiente para criar atores')\n          }\n\n          // Validar dados\n          this.validateActorData(data)\n\n          // Aplicar template se necessário\n          if (!data.system && data.type && this.templates.actor[data.type]) {\n            data = foundry.utils.mergeObject(this.templates.actor[data.type], data, { inplace: false })\n          }\n\n          // Verificar duplicatas\n          if (options.checkDuplicates !== false) {\n            const existing = game.actors.find(a => a.name === data.name)\n            if (existing && !options.allowDuplicates) {\n              throw new Error(`Ator com nome \"${data.name}\" já existe`)\n            }\n          }\n\n          // Criar ator\n          const actor = await Actor.create(data)\n\n          // Log da operação\n          const duration = Date.now() - startTime\n          this.logger?.info('Ator criado', {\n            actorId: actor.id,\n            name: actor.name,\n            type: actor.type,\n            duration: `${duration}ms`\n          })\n\n          return {\n            success: true,\n            actor,\n            message: `Ator \"${actor.name}\" criado com sucesso`\n          }\n        } catch (error) {\n          this.logger?.error('Erro ao criar ator', { error: error.message, data })\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao criar ator: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  async updateActor (actorId, updates, options = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('updateActor')) {\n            throw new Error('Permissão insuficiente para atualizar atores')\n          }\n\n          const actor = game.actors.get(actorId)\n          if (!actor) {\n            throw new Error(`Ator com ID \"${actorId}\" não encontrado`)\n          }\n\n          // Validar atualizações\n          this.validateActorData(updates, true)\n\n          await actor.update(updates)\n\n          this.logger?.info('Ator atualizado', {\n            actorId: actor.id,\n            name: actor.name,\n            updatedFields: Object.keys(updates)\n          })\n\n          return {\n            success: true,\n            actor,\n            message: `Ator \"${actor.name}\" atualizado com sucesso`\n          }\n        } catch (error) {\n          this.logger?.error('Erro ao atualizar ator', { actorId, error: error.message })\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao atualizar ator: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  async deleteActor (actorId, options = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('deleteActor')) {\n            throw new Error('Permissão insuficiente para remover atores')\n          }\n\n          const actor = game.actors.get(actorId)\n          if (!actor) {\n            throw new Error(`Ator com ID \"${actorId}\" não encontrado`)\n          }\n\n          // Verificar se é personagem de jogador\n          if (actor.type === 'character' && actor.hasPlayerOwner && !options.force) {\n            throw new Error('Não é possível remover personagem de jogador sem confirmação')\n          }\n\n          const actorName = actor.name\n          await actor.delete()\n\n          this.logger?.info('Ator removido', { actorId, name: actorName })\n\n          return {\n            success: true,\n            message: `Ator \"${actorName}\" removido com sucesso`\n          }\n        } catch (error) {\n          this.logger?.error('Erro ao remover ator', { actorId, error: error.message })\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao remover ator: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  async queryActors (filters = {}, options = {}) {\n    try {\n      if (!this.permissionManager.checkPermission('queryActors')) {\n        throw new Error('Permissão insuficiente para buscar atores')\n      }\n\n      let actors = game.actors.contents\n\n      // Aplicar filtros\n      if (filters.name) {\n        const nameRegex = new RegExp(filters.name, 'i')\n        actors = actors.filter(actor => nameRegex.test(actor.name))\n      }\n\n      if (filters.type) {\n        actors = actors.filter(actor => actor.type === filters.type)\n      }\n\n      if (filters.level) {\n        actors = actors.filter(actor => {\n          const level = actor.system?.details?.level?.value\n          return level === filters.level\n        })\n      }\n\n      // Aplicar limite\n      if (options.limit) {\n        actors = actors.slice(0, options.limit)\n      }\n\n      // Formatar resultados\n      const results = actors.map(actor => ({\n        id: actor.id,\n        name: actor.name,\n        type: actor.type,\n        img: actor.img,\n        level: actor.system?.details?.level?.value,\n        hp: actor.system?.attributes?.hp\n      }))\n\n      return {\n        success: true,\n        actors: results,\n        count: results.length,\n        message: `Encontrados ${results.length} ator(es)`\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        message: `Erro na busca: ${error.message}`\n      }\n    }\n  }\n\n  validateActorData (data, isUpdate = false) {\n    if (!isUpdate && !data.name) {\n      throw new Error('Nome é obrigatório')\n    }\n\n    if (data.name && (data.name.length < 1 || data.name.length > 50)) {\n      throw new Error('Nome deve ter entre 1 e 50 caracteres')\n    }\n\n    if (!isUpdate && !data.type) {\n      throw new Error('Tipo é obrigatório')\n    }\n\n    if (data.type && !['character', 'npc', 'vehicle'].includes(data.type)) {\n      throw new Error('Tipo deve ser character, npc ou vehicle')\n    }\n  }\n\n  // ========== ITENS ==========\n\n  async createItem (data, actorId = null, options = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('createItem')) {\n            throw new Error('Permissão insuficiente para criar itens')\n          }\n\n          this.validateItemData(data)\n\n          // Aplicar template se necessário\n          if (!data.system && data.type && this.templates.item[data.type]) {\n            data = foundry.utils.mergeObject(this.templates.item[data.type], data, { inplace: false })\n          }\n\n          let item\n          if (actorId) {\n            const actor = game.actors.get(actorId)\n            if (!actor) {\n              throw new Error(`Ator com ID \"${actorId}\" não encontrado`)\n            }\n            item = await actor.createEmbeddedDocuments('Item', [data])\n            item = item[0]\n          } else {\n            item = await Item.create(data)\n          }\n\n          this.logger?.info('Item criado', {\n            itemId: item.id,\n            name: item.name,\n            type: item.type,\n            actorId\n          })\n\n          return {\n            success: true,\n            item,\n            message: `Item \"${item.name}\" criado com sucesso`\n          }\n        } catch (error) {\n          this.logger?.error('Erro ao criar item', { error: error.message, data })\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao criar item: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  async updateItem (itemId, updates, actorId = null) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('updateItem')) {\n            throw new Error('Permissão insuficiente para atualizar itens')\n          }\n\n          let item\n          if (actorId) {\n            const actor = game.actors.get(actorId)\n            if (!actor) {\n              throw new Error(`Ator com ID \"${actorId}\" não encontrado`)\n            }\n            item = actor.items.get(itemId)\n          } else {\n            item = game.items.get(itemId)\n          }\n\n          if (!item) {\n            throw new Error(`Item com ID \"${itemId}\" não encontrado`)\n          }\n\n          await item.update(updates)\n\n          return {\n            success: true,\n            item,\n            message: `Item \"${item.name}\" atualizado com sucesso`\n          }\n        } catch (error) {\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao atualizar item: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  validateItemData (data, isUpdate = false) {\n    if (!isUpdate && !data.name) {\n      throw new Error('Nome é obrigatório')\n    }\n\n    if (!isUpdate && !data.type) {\n      throw new Error('Tipo é obrigatório')\n    }\n  }\n\n  // ========== CENAS ==========\n\n  async createScene (data, options = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('createScene')) {\n            throw new Error('Permissão insuficiente para criar cenas')\n          }\n\n          this.validateSceneData(data)\n\n          const scene = await Scene.create(data)\n\n          this.logger?.info('Cena criada', {\n            sceneId: scene.id,\n            name: scene.name\n          })\n\n          return {\n            success: true,\n            scene,\n            message: `Cena \"${scene.name}\" criada com sucesso`\n          }\n        } catch (error) {\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao criar cena: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  async activateScene (sceneId) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('activateScene')) {\n            throw new Error('Permissão insuficiente para ativar cenas')\n          }\n\n          const scene = game.scenes.get(sceneId)\n          if (!scene) {\n            throw new Error(`Cena com ID \"${sceneId}\" não encontrada`)\n          }\n\n          await scene.activate()\n\n          return {\n            success: true,\n            scene,\n            message: `Cena \"${scene.name}\" ativada com sucesso`\n          }\n        } catch (error) {\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao ativar cena: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  validateSceneData (data, isUpdate = false) {\n    if (!isUpdate && !data.name) {\n      throw new Error('Nome é obrigatório')\n    }\n  }\n\n  // ========== JORNAIS ==========\n\n  async createJournalEntry (data, options = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('createJournal')) {\n            throw new Error('Permissão insuficiente para criar entradas de jornal')\n          }\n\n          this.validateJournalData(data)\n\n          const journal = await JournalEntry.create(data)\n\n          this.logger?.info('Entrada de jornal criada', {\n            journalId: journal.id,\n            name: journal.name\n          })\n\n          return {\n            success: true,\n            journal,\n            message: `Entrada de jornal \"${journal.name}\" criada com sucesso`\n          }\n        } catch (error) {\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao criar entrada de jornal: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  validateJournalData (data, isUpdate = false) {\n    if (!isUpdate && !data.name) {\n      throw new Error('Nome é obrigatório')\n    }\n  }\n\n  // ========== MACROS ==========\n\n  async createMacro (data, options = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('createMacro')) {\n            throw new Error('Permissão insuficiente para criar macros')\n          }\n\n          this.validateMacroData(data)\n\n          const macro = await Macro.create(data)\n\n          this.logger?.info('Macro criado', {\n            macroId: macro.id,\n            name: macro.name,\n            type: macro.type\n          })\n\n          return {\n            success: true,\n            macro,\n            message: `Macro \"${macro.name}\" criado com sucesso`\n          }\n        } catch (error) {\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao criar macro: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  async executeMacro (macroId, args = {}) {\n    return this.queueOperation({\n      execute: async () => {\n        try {\n          if (!this.permissionManager.checkPermission('executeMacro')) {\n            throw new Error('Permissão insuficiente para executar macros')\n          }\n\n          const macro = game.macros.get(macroId)\n          if (!macro) {\n            throw new Error(`Macro com ID \"${macroId}\" não encontrado`)\n          }\n\n          const result = await macro.execute(args)\n\n          this.logger?.info('Macro executado', {\n            macroId: macro.id,\n            name: macro.name,\n            args\n          })\n\n          return {\n            success: true,\n            result,\n            message: `Macro \"${macro.name}\" executado com sucesso`\n          }\n        } catch (error) {\n          return {\n            success: false,\n            error: error.message,\n            message: `Erro ao executar macro: ${error.message}`\n          }\n        }\n      }\n    })\n  }\n\n  validateMacroData (data, isUpdate = false) {\n    if (!isUpdate && !data.name) {\n      throw new Error('Nome é obrigatório')\n    }\n\n    if (!isUpdate && !data.command) {\n      throw new Error('Comando é obrigatório')\n    }\n  }\n\n  // ========== UTILITÁRIOS ==========\n\n  async rollDice (formula, options = {}) {\n    try {\n      if (!this.permissionManager.checkPermission('rollDice')) {\n        throw new Error('Permissão insuficiente para rolar dados')\n      }\n\n      const roll = new Roll(formula)\n      await roll.evaluate()\n\n      if (options.toChat) {\n        await roll.toMessage({\n          speaker: { alias: 'AI Assistant' },\n          flavor: options.flavor || `Rolagem: ${formula}`\n        })\n      }\n\n      return {\n        success: true,\n        roll,\n        total: roll.total,\n        formula,\n        message: `Rolagem ${formula} = ${roll.total}`\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        message: `Erro na rolagem: ${error.message}`\n      }\n    }\n  }\n\n  getStats () {\n    return {\n      initialized: this.initialized,\n      queueLength: this.operationQueue.length,\n      isProcessingQueue: this.isProcessingQueue,\n      collections: {\n        actors: game.actors.size,\n        items: game.items.size,\n        scenes: game.scenes.size,\n        journal: game.journal.size,\n        macros: game.macros.size,\n        tables: game.tables.size,\n        playlists: game.playlists.size\n      }\n    }\n  }\n}\n","/**\n * Sistema de permissões para IA\n * Gerencia o que a IA pode e não pode fazer no FoundryVTT\n */\n\nexport class PermissionManager {\n  constructor () {\n    this.permissions = new Map()\n    this.permissionLevels = new Map()\n    this.temporaryPermissions = new Map()\n    this.permissionHistory = []\n    this.initialized = false\n  }\n\n  async initialize () {\n    console.log('AI Assistant | Inicializando PermissionManager...')\n\n    try {\n      // Definir níveis de permissão\n      this.definePermissionLevels()\n\n      // Carregar permissões salvas\n      await this.loadPermissions()\n\n      // Configurar permissões padrão se necessário\n      if (this.permissions.size === 0) {\n        await this.setDefaultPermissions()\n      }\n\n      // Inicializar limpeza de permissões temporárias\n      this.startTemporaryPermissionCleanup()\n\n      this.initialized = true\n      console.log('AI Assistant | PermissionManager inicializado com sucesso')\n    } catch (error) {\n      console.error('AI Assistant | Erro na inicialização do PermissionManager:', error)\n      throw error\n    }\n  }\n\n  definePermissionLevels () {\n    // Definir níveis hierárquicos de permissão\n    this.permissionLevels.set('NONE', {\n      level: 0,\n      name: 'Nenhuma',\n      description: 'Sem permissões',\n      permissions: {}\n    })\n\n    this.permissionLevels.set('BASIC', {\n      level: 1,\n      name: 'Básico',\n      description: 'Permissões básicas de leitura e chat',\n      permissions: {\n        // Chat e comunicação\n        sendMessage: true,\n        sendWhisper: true,\n        rollDice: true,\n\n        // Consultas (somente leitura)\n        queryActors: true,\n        queryItems: true,\n        queryScenes: true,\n        queryJournal: true,\n        queryMacros: true,\n        queryTables: true,\n        queryPlaylists: true,\n        queryCompendium: true,\n\n        // Visualização\n        viewDocuments: true\n      }\n    })\n\n    this.permissionLevels.set('STANDARD', {\n      level: 2,\n      name: 'Padrão',\n      description: 'Permissões para criar e editar conteúdo básico',\n      permissions: {\n        // Herdar do BASIC\n        ...this.permissionLevels.get('BASIC').permissions,\n\n        // Criação e edição básica\n        createItem: true,\n        updateItem: true,\n        deleteItem: true,\n\n        createJournal: true,\n        updateJournal: true,\n        deleteJournal: true,\n\n        createMacro: true,\n        updateMacro: true,\n        executeMacro: true,\n\n        // Manipulação de atores limitada\n        updateActor: true,\n\n        // Importação de compêndios\n        importFromCompendium: true\n      }\n    })\n\n    this.permissionLevels.set('ADVANCED', {\n      level: 3,\n      name: 'Avançado',\n      description: 'Permissões para manipulação completa de conteúdo',\n      permissions: {\n        // Herdar do STANDARD\n        ...this.permissionLevels.get('STANDARD').permissions,\n\n        // Criação e manipulação de atores\n        createActor: true,\n        deleteActor: true,\n\n        // Manipulação de cenas\n        createScene: true,\n        updateScene: true,\n        deleteScene: true,\n        activateScene: true,\n\n        // Tabelas e playlists\n        createRollTable: true,\n        updateRollTable: true,\n        deleteRollTable: true,\n        rollTable: true,\n\n        createPlaylist: true,\n        updatePlaylist: true,\n        deletePlaylist: true,\n        playAudio: true,\n\n        // Tokens e combate\n        createToken: true,\n        updateToken: true,\n        deleteToken: true,\n        manageCombat: true\n      }\n    })\n\n    this.permissionLevels.set('FULL', {\n      level: 4,\n      name: 'Completo',\n      description: 'Todas as permissões (use com cuidado)',\n      permissions: {\n        // Herdar do ADVANCED\n        ...this.permissionLevels.get('ADVANCED').permissions,\n\n        // Permissões administrativas\n        manageUsers: true,\n        modifySettings: true,\n        manageModules: true,\n\n        // Operações perigosas\n        deleteAnyDocument: true,\n        executeArbitraryCode: true,\n        modifyPermissions: true,\n\n        // Sistema\n        accessFileSystem: true,\n        networkAccess: true\n      }\n    })\n  }\n\n  async loadPermissions () {\n    try {\n      // Simular carregamento de configurações (FoundryVTT real usaria game.settings)\n      const savedPermissions = this.getStoredPermissions() || {}\n      const savedLevel = this.getStoredPermissionLevel() || 'BASIC'\n\n      // Aplicar nível de permissão\n      await this.setPermissionLevel(savedLevel)\n\n      // Aplicar permissões customizadas\n      for (const [permission, value] of Object.entries(savedPermissions)) {\n        this.permissions.set(permission, value)\n      }\n\n      console.log('AI Assistant | Permissões carregadas:', savedLevel)\n    } catch (error) {\n      console.warn('AI Assistant | Erro ao carregar permissões, usando padrão:', error)\n      await this.setDefaultPermissions()\n    }\n  }\n\n  getStoredPermissions () {\n    // Simular storage - em FoundryVTT real seria game.settings.get()\n    try {\n      return JSON.parse(localStorage.getItem('ai-assistant-permissions') || '{}')\n    } catch {\n      return {}\n    }\n  }\n\n  getStoredPermissionLevel () {\n    // Simular storage - em FoundryVTT real seria game.settings.get()\n    return localStorage.getItem('ai-assistant-permission-level') || 'BASIC'\n  }\n\n  async savePermissions () {\n    try {\n      const permissionsObj = Object.fromEntries(this.permissions)\n\n      // Simular storage - em FoundryVTT real seria game.settings.set()\n      localStorage.setItem('ai-assistant-permissions', JSON.stringify(permissionsObj))\n\n      // Salvar histórico\n      this.permissionHistory.push({\n        timestamp: Date.now(),\n        permissions: { ...permissionsObj },\n        changedBy: 'system' // Em FoundryVTT real seria game.user.id\n      })\n\n      // Manter apenas os últimos 100 registros\n      if (this.permissionHistory.length > 100) {\n        this.permissionHistory.splice(0, this.permissionHistory.length - 100)\n      }\n\n      localStorage.setItem('ai-assistant-permission-history', JSON.stringify(this.permissionHistory))\n\n      console.log('AI Assistant | Permissões salvas')\n    } catch (error) {\n      console.error('AI Assistant | Erro ao salvar permissões:', error)\n      throw error\n    }\n  }\n\n  async setDefaultPermissions () {\n    console.log('AI Assistant | Configurando permissões padrão (BASIC)')\n    await this.setPermissionLevel('BASIC')\n  }\n\n  async setPermissionLevel (levelName) {\n    const level = this.permissionLevels.get(levelName)\n    if (!level) {\n      throw new Error(`Nível de permissão \"${levelName}\" não encontrado`)\n    }\n\n    // Limpar permissões atuais\n    this.permissions.clear()\n\n    // Aplicar permissões do nível\n    for (const [permission, value] of Object.entries(level.permissions)) {\n      this.permissions.set(permission, value)\n    }\n\n    // Salvar nível atual\n    localStorage.setItem('ai-assistant-permission-level', levelName)\n\n    // Salvar permissões\n    await this.savePermissions()\n\n    console.log(`AI Assistant | Nível de permissão definido para: ${level.name}`)\n\n    // Notificar mudança\n    this.notifyPermissionChange(levelName, level.name)\n  }\n\n  checkPermission (action) {\n    if (!this.initialized) {\n      console.warn('AI Assistant | PermissionManager não inicializado, negando permissão')\n      return false\n    }\n\n    // Verificar permissão temporária primeiro\n    const tempPermission = this.temporaryPermissions.get(action)\n    if (tempPermission && tempPermission.expires > Date.now()) {\n      return tempPermission.granted\n    }\n\n    // Verificar permissão permanente\n    const hasPermission = this.permissions.get(action) || false\n\n    // Log da verificação (apenas para debug)\n    if (!hasPermission) {\n      console.debug(`AI Assistant | Permissão negada para: ${action}`)\n    }\n\n    return hasPermission\n  }\n\n  async grantPermission (action, granted = true, options = {}) {\n    if (!this.checkPermission('modifyPermissions') && !options.force) {\n      throw new Error('Permissão insuficiente para modificar permissões')\n    }\n\n    const oldValue = this.permissions.get(action)\n    this.permissions.set(action, granted)\n\n    // Salvar se não for temporário\n    if (!options.temporary) {\n      await this.savePermissions()\n    }\n\n    console.log(`AI Assistant | Permissão ${granted ? 'concedida' : 'revogada'}: ${action}`)\n\n    // Log da mudança\n    this.logPermissionChange(action, oldValue, granted, options)\n\n    return true\n  }\n\n  async revokePermission (action, options = {}) {\n    return await this.grantPermission(action, false, options)\n  }\n\n  grantTemporaryPermission (action, duration = 300000, granted = true) { // 5 minutos padrão\n    const expires = Date.now() + duration\n\n    this.temporaryPermissions.set(action, {\n      granted,\n      expires,\n      grantedAt: Date.now(),\n      grantedBy: 'system' // Em FoundryVTT real seria game.user.id\n    })\n\n    console.log(`AI Assistant | Permissão temporária ${granted ? 'concedida' : 'revogada'}: ${action} (expira em ${duration / 1000}s)`)\n\n    // Agendar limpeza\n    setTimeout(() => {\n      this.temporaryPermissions.delete(action)\n      console.log(`AI Assistant | Permissão temporária expirada: ${action}`)\n    }, duration)\n\n    return true\n  }\n\n  async requestPermission (action, reason = '', options = {}) {\n    // Se já tem permissão, retornar true\n    if (this.checkPermission(action)) {\n      return { granted: true, message: 'Permissão já concedida' }\n    }\n\n    // Log da solicitação\n    console.log(`AI Assistant | Solicitação de permissão: ${action} - Motivo: ${reason}`)\n\n    // Se for auto-aprovação para permissões básicas\n    if (options.autoApprove && this.isBasicPermission(action)) {\n      this.grantTemporaryPermission(action, options.duration || 300000)\n      return { granted: true, temporary: true, message: 'Permissão temporária auto-aprovada' }\n    }\n\n    return { granted: false, pending: true, message: 'Solicitação enviada aos GMs' }\n  }\n\n  isBasicPermission (action) {\n    const basicPermissions = [\n      'rollDice', 'sendMessage', 'queryActors', 'queryItems',\n      'queryScenes', 'viewDocuments'\n    ]\n    return basicPermissions.includes(action)\n  }\n\n  notifyPermissionChange (levelName, levelDisplayName) {\n    console.log(`AI Assistant | Nível de permissão da IA alterado para: ${levelDisplayName}`)\n  }\n\n  logPermissionChange (action, oldValue, newValue, options) {\n    const logEntry = {\n      timestamp: Date.now(),\n      action,\n      oldValue,\n      newValue,\n      changedBy: 'system', // Em FoundryVTT real seria game.user.id\n      temporary: options.temporary || false,\n      reason: options.reason || ''\n    }\n\n    // Adicionar ao histórico local\n    this.permissionHistory.push(logEntry)\n  }\n\n  startTemporaryPermissionCleanup () {\n    // Limpar permissões temporárias expiradas a cada minuto\n    setInterval(() => {\n      const now = Date.now()\n      const expired = []\n\n      for (const [action, permission] of this.temporaryPermissions.entries()) {\n        if (permission.expires <= now) {\n          expired.push(action)\n        }\n      }\n\n      for (const action of expired) {\n        this.temporaryPermissions.delete(action)\n        console.log(`AI Assistant | Permissão temporária expirada: ${action}`)\n      }\n    }, 60000)\n  }\n\n  // Métodos de conveniência para verificações específicas\n  canCreateActors () {\n    return this.checkPermission('createActor')\n  }\n\n  canDeleteActors () {\n    return this.checkPermission('deleteActor')\n  }\n\n  canModifyScenes () {\n    return this.checkPermission('createScene') || this.checkPermission('updateScene')\n  }\n\n  canExecuteMacros () {\n    return this.checkPermission('executeMacro')\n  }\n\n  canManageUsers () {\n    return this.checkPermission('manageUsers')\n  }\n\n  // Métodos de informação\n  getCurrentPermissionLevel () {\n    return this.getStoredPermissionLevel() || 'BASIC'\n  }\n\n  getAvailablePermissionLevels () {\n    return Array.from(this.permissionLevels.entries()).map(([key, level]) => ({\n      key,\n      name: level.name,\n      description: level.description,\n      level: level.level\n    }))\n  }\n\n  getActivePermissions () {\n    const active = []\n    const now = Date.now()\n\n    // Permissões permanentes\n    for (const [action, granted] of this.permissions.entries()) {\n      if (granted) {\n        active.push({\n          action,\n          type: 'permanent',\n          granted\n        })\n      }\n    }\n\n    // Permissões temporárias\n    for (const [action, permission] of this.temporaryPermissions.entries()) {\n      if (permission.expires > now) {\n        active.push({\n          action,\n          type: 'temporary',\n          granted: permission.granted,\n          expires: permission.expires,\n          remaining: permission.expires - now\n        })\n      }\n    }\n\n    return active\n  }\n\n  getPermissionHistory (limit = 50) {\n    return this.permissionHistory.slice(-limit)\n  }\n\n  getStats () {\n    return {\n      initialized: this.initialized,\n      currentLevel: this.getCurrentPermissionLevel(),\n      totalPermissions: this.permissions.size,\n      activePermissions: this.getActivePermissions().length,\n      temporaryPermissions: this.temporaryPermissions.size,\n      historyEntries: this.permissionHistory.length\n    }\n  }\n\n  // Método para reset completo (apenas para emergências)\n  async resetToDefault () {\n    console.warn('AI Assistant | Resetando permissões para padrão')\n\n    this.permissions.clear()\n    this.temporaryPermissions.clear()\n    this.permissionHistory = []\n\n    await this.setDefaultPermissions()\n\n    console.log('AI Assistant | Permissões da IA foram resetadas para o padrão')\n  }\n\n  // Validação de segurança\n  validatePermissionRequest (action, context = {}) {\n    // Lista de ações que requerem validação extra\n    const dangerousActions = [\n      'deleteAnyDocument', 'executeArbitraryCode', 'modifySettings',\n      'manageUsers', 'accessFileSystem', 'networkAccess'\n    ]\n\n    if (dangerousActions.includes(action)) {\n      console.warn(`AI Assistant | Ação perigosa solicitada: ${action}`)\n      return {\n        valid: false,\n        reason: 'Ação requer aprovação manual de GM',\n        requiresGMApproval: true\n      }\n    }\n\n    return { valid: true }\n  }\n}\n","/**\n * Interface de chat para IA\n * Responsável por processar comandos, gerenciar conversas e integrar com provedores de IA\n */\n\nexport class ChatInterface {\n  constructor (permissionManager, apiHandler, aiUserManager) {\n    this.permissionManager = permissionManager\n    this.apiHandler = apiHandler\n    this.aiUserManager = aiUserManager\n    this.initialized = false\n    this.commandPrefix = '/ai'\n    this.commands = new Map()\n    this.conversationHistory = []\n    this.activeConversations = new Map()\n    this.aiProviders = new Map()\n    this.currentProvider = null\n  }\n\n  async initialize () {\n    console.log('AI Assistant | Inicializando ChatInterface...')\n\n    try {\n      // Registrar comandos disponíveis\n      this.registerCommands()\n\n      // Configurar listeners de chat\n      this.setupChatListeners()\n\n      // Carregar provedores de IA\n      await this.loadAIProviders()\n\n      // Configurar provedor padrão\n      await this.setDefaultProvider()\n\n      this.initialized = true\n      console.log('AI Assistant | ChatInterface inicializado com sucesso')\n    } catch (error) {\n      console.error('AI Assistant | Erro na inicialização do ChatInterface:', error)\n      throw error\n    }\n  }\n\n  registerCommands () {\n    // Comandos básicos\n    this.commands.set('help', {\n      description: 'Mostra comandos disponíveis',\n      usage: '/ai help [comando]',\n      permission: 'sendMessage',\n      handler: this.handleHelpCommand.bind(this)\n    })\n\n    this.commands.set('status', {\n      description: 'Mostra status do sistema',\n      usage: '/ai status',\n      permission: 'sendMessage',\n      handler: this.handleStatusCommand.bind(this)\n    })\n\n    // Comandos de dados\n    this.commands.set('roll', {\n      description: 'Rola dados',\n      usage: '/ai roll <fórmula> [motivo]',\n      permission: 'rollDice',\n      handler: this.handleRollCommand.bind(this)\n    })\n\n    // Comandos de criação\n    this.commands.set('create', {\n      description: 'Cria elementos do jogo',\n      usage: '/ai create <tipo> <dados>',\n      permission: 'createActor',\n      handler: this.handleCreateCommand.bind(this)\n    })\n\n    // Comandos de busca\n    this.commands.set('search', {\n      description: 'Busca elementos do jogo',\n      usage: '/ai search <tipo> [filtros]',\n      permission: 'queryActors',\n      handler: this.handleSearchCommand.bind(this)\n    })\n\n    // Comandos de macro\n    this.commands.set('macro', {\n      description: 'Executa macro',\n      usage: '/ai macro <nome> [argumentos]',\n      permission: 'executeMacro',\n      handler: this.handleMacroCommand.bind(this)\n    })\n\n    // Comandos de cena\n    this.commands.set('scene', {\n      description: 'Gerencia cenas',\n      usage: '/ai scene <ação> [parâmetros]',\n      permission: 'createScene',\n      handler: this.handleSceneCommand.bind(this)\n    })\n\n    // Comandos de configuração\n    this.commands.set('config', {\n      description: 'Configura o assistente',\n      usage: '/ai config <opção> <valor>',\n      permission: 'modifySettings',\n      handler: this.handleConfigCommand.bind(this)\n    })\n\n    // Comando de conversa livre\n    this.commands.set('chat', {\n      description: 'Conversa livre com IA',\n      usage: '/ai chat <mensagem>',\n      permission: 'sendMessage',\n      handler: this.handleChatCommand.bind(this)\n    })\n  }\n\n  setupChatListeners () {\n    // Simular hook do FoundryVTT - em implementação real seria:\n    // Hooks.on('createChatMessage', this.onChatMessage.bind(this));\n\n    // Para demonstração, vamos simular o sistema de hooks\n    this.simulateFoundryHooks()\n  }\n\n  simulateFoundryHooks () {\n    // Simular sistema de mensagens do FoundryVTT\n    console.log('AI Assistant | Hooks de chat configurados (simulação)')\n  }\n\n  async onChatMessage (message, options, userId) {\n    try {\n      const content = message.content\n\n      // Verificar se é comando para IA\n      if (content.startsWith(this.commandPrefix)) {\n        await this.processCommand(content, message)\n        return\n      }\n\n      // Verificar se é menção à IA\n      if (this.isMentionedInMessage(content)) {\n        await this.processAIMention(content, message)\n        return\n      }\n\n      // Adicionar à história de conversação se relevante\n      if (this.isRelevantMessage(message)) {\n        this.addToConversationHistory(message)\n      }\n    } catch (error) {\n      console.error('AI Assistant | Erro ao processar mensagem de chat:', error)\n      await this.sendErrorMessage(error.message)\n    }\n  }\n\n  async processCommand (content, originalMessage) {\n    const parts = content.slice(this.commandPrefix.length).trim().split(' ')\n    const commandName = parts[0]\n    const args = parts.slice(1)\n\n    console.log(`AI Assistant | Processando comando: ${commandName}`, args)\n\n    const command = this.commands.get(commandName)\n    if (!command) {\n      await this.sendMessage(`❌ Comando \"${commandName}\" não reconhecido. Use \\`/ai help\\` para ver comandos disponíveis.`)\n      return\n    }\n\n    // Verificar permissões\n    if (!this.permissionManager.checkPermission(command.permission)) {\n      await this.sendMessage(`🔒 Permissão insuficiente para executar \"${commandName}\". Permissão necessária: ${command.permission}`)\n      return\n    }\n\n    try {\n      await command.handler(args, originalMessage)\n    } catch (error) {\n      console.error(`AI Assistant | Erro no comando ${commandName}:`, error)\n      await this.sendMessage(`❌ Erro ao executar comando: ${error.message}`)\n    }\n  }\n\n  async processAIMention (content, originalMessage) {\n    console.log('AI Assistant | Processando menção à IA:', content)\n\n    // Extrair a mensagem sem a menção\n    const cleanContent = content.replace(/@AI|@ai/gi, '').trim()\n\n    if (cleanContent.length === 0) {\n      await this.sendMessage('👋 Olá! Como posso ajudar? Use `/ai help` para ver os comandos disponíveis.')\n      return\n    }\n\n    // Processar como conversa livre\n    await this.handleFreeConversation(cleanContent, originalMessage)\n  }\n\n  isMentionedInMessage (content) {\n    return /@AI|@ai/i.test(content)\n  }\n\n  isRelevantMessage (message) {\n    // Determinar se a mensagem é relevante para o contexto da IA\n    return message.type === 'ic' || message.type === 'ooc'\n  }\n\n  addToConversationHistory (message) {\n    this.conversationHistory.push({\n      timestamp: Date.now(),\n      user: message.user?.name || 'Unknown',\n      content: message.content,\n      type: message.type\n    })\n\n    // Manter apenas as últimas 100 mensagens\n    if (this.conversationHistory.length > 100) {\n      this.conversationHistory.shift()\n    }\n  }\n\n  // ========== HANDLERS DE COMANDOS ==========\n\n  async handleHelpCommand (args, originalMessage) {\n    if (args.length > 0) {\n      // Ajuda específica para um comando\n      const commandName = args[0]\n      const command = this.commands.get(commandName)\n\n      if (command) {\n        const helpText = `\n                    <div class=\"ai-help-specific\">\n                        <h3>📖 Ajuda: ${commandName}</h3>\n                        <p><strong>Descrição:</strong> ${command.description}</p>\n                        <p><strong>Uso:</strong> <code>${command.usage}</code></p>\n                        <p><strong>Permissão necessária:</strong> ${command.permission}</p>\n                    </div>\n                `\n        await this.sendMessage(helpText)\n      } else {\n        await this.sendMessage(`❌ Comando \"${commandName}\" não encontrado.`)\n      }\n    } else {\n      // Ajuda geral\n      const commandList = Array.from(this.commands.entries())\n        .filter(([name, cmd]) => this.permissionManager.checkPermission(cmd.permission))\n        .map(([name, cmd]) => `<li><strong>${name}</strong> - ${cmd.description}</li>`)\n        .join('')\n\n      const helpText = `\n                <div class=\"ai-help-general\">\n                    <h3>🤖 AI Assistant - Comandos Disponíveis</h3>\n                    <ul>${commandList}</ul>\n                    <p><em>Use <code>/ai help &lt;comando&gt;</code> para ajuda específica.</em></p>\n                    <p><em>Você também pode me mencionar com @AI para conversar livremente!</em></p>\n                </div>\n            `\n\n      await this.sendMessage(helpText)\n    }\n  }\n\n  async handleStatusCommand (args, originalMessage) {\n    const aiUserStats = await this.aiUserManager.getAIUserStats()\n    const permissionStats = this.permissionManager.getStats()\n    const apiStats = this.apiHandler.getStats()\n\n    const statusText = `\n            <div class=\"ai-status\">\n                <h3>🔍 Status do AI Assistant</h3>\n                <div class=\"status-section\">\n                    <h4>👤 Usuário IA</h4>\n                    <p>Nome: ${aiUserStats?.name || 'N/A'}</p>\n                    <p>Status: ${aiUserStats?.sessionActive ? '🟢 Ativo' : '🔴 Inativo'}</p>\n                    <p>Última atividade: ${aiUserStats?.lastActivity ? new Date(aiUserStats.lastActivity).toLocaleString() : 'N/A'}</p>\n                </div>\n                <div class=\"status-section\">\n                    <h4>🔐 Permissões</h4>\n                    <p>Nível atual: ${permissionStats.currentLevel}</p>\n                    <p>Permissões ativas: ${permissionStats.activePermissions}</p>\n                    <p>Permissões temporárias: ${permissionStats.temporaryPermissions}</p>\n                </div>\n                <div class=\"status-section\">\n                    <h4>⚙️ API Handler</h4>\n                    <p>Status: ${apiStats.initialized ? '🟢 Inicializado' : '🔴 Não inicializado'}</p>\n                    <p>Fila de operações: ${apiStats.queueLength}</p>\n                    <p>Processando: ${apiStats.isProcessingQueue ? 'Sim' : 'Não'}</p>\n                </div>\n                <div class=\"status-section\">\n                    <h4>🎲 Coleções do Mundo</h4>\n                    <p>Atores: ${apiStats.collections?.actors || 0}</p>\n                    <p>Itens: ${apiStats.collections?.items || 0}</p>\n                    <p>Cenas: ${apiStats.collections?.scenes || 0}</p>\n                    <p>Jornais: ${apiStats.collections?.journal || 0}</p>\n                </div>\n            </div>\n        `\n\n    await this.sendMessage(statusText)\n  }\n\n  async handleRollCommand (args, originalMessage) {\n    if (args.length === 0) {\n      await this.sendMessage('❌ Uso: `/ai roll <fórmula> [motivo]`\\nExemplo: `/ai roll 1d20+5 Teste de Percepção`')\n      return\n    }\n\n    const formula = args[0]\n    const flavor = args.slice(1).join(' ') || 'Rolagem solicitada pela IA'\n\n    const result = await this.apiHandler.rollDice(formula, {\n      toChat: true,\n      flavor\n    })\n\n    if (result.success) {\n      await this.sendMessage(`🎲 **${formula}** = **${result.total}**${flavor ? ` (${flavor})` : ''}`)\n    } else {\n      await this.sendMessage(`❌ Erro na rolagem: ${result.error}`)\n    }\n  }\n\n  async handleCreateCommand (args, originalMessage) {\n    if (args.length < 2) {\n      await this.sendMessage('❌ Uso: `/ai create <tipo> <dados>`\\nTipos: actor, item, scene, journal, macro')\n      return\n    }\n\n    const type = args[0].toLowerCase()\n    const dataString = args.slice(1).join(' ')\n\n    try {\n      let data\n      try {\n        data = JSON.parse(dataString)\n      } catch {\n        // Se não for JSON, tratar como nome simples\n        data = { name: dataString }\n      }\n\n      let result\n      switch (type) {\n        case 'actor':\n          result = await this.apiHandler.createActor(data)\n          break\n        case 'item':\n          result = await this.apiHandler.createItem(data)\n          break\n        case 'scene':\n          result = await this.apiHandler.createScene(data)\n          break\n        case 'journal':\n          result = await this.apiHandler.createJournalEntry(data)\n          break\n        case 'macro':\n          result = await this.apiHandler.createMacro(data)\n          break\n        default:\n          await this.sendMessage(`❌ Tipo \"${type}\" não suportado. Tipos válidos: actor, item, scene, journal, macro`)\n          return\n      }\n\n      if (result.success) {\n        await this.sendMessage(`✅ ${result.message}`)\n      } else {\n        await this.sendMessage(`❌ ${result.message}`)\n      }\n    } catch (error) {\n      await this.sendMessage(`❌ Erro ao criar ${type}: ${error.message}`)\n    }\n  }\n\n  async handleSearchCommand (args, originalMessage) {\n    if (args.length === 0) {\n      await this.sendMessage('❌ Uso: `/ai search <tipo> [filtros]`\\nTipos: actors, items, scenes, journal')\n      return\n    }\n\n    const type = args[0].toLowerCase()\n    const searchTerm = args.slice(1).join(' ')\n\n    try {\n      let result\n      const filters = searchTerm ? { name: searchTerm } : {}\n\n      switch (type) {\n        case 'actors':\n          result = await this.apiHandler.queryActors(filters, { limit: 10 })\n          break\n        case 'items':\n          // Implementar busca de itens\n          result = { success: false, message: 'Busca de itens não implementada ainda' }\n          break\n        case 'scenes':\n          // Implementar busca de cenas\n          result = { success: false, message: 'Busca de cenas não implementada ainda' }\n          break\n        default:\n          await this.sendMessage(`❌ Tipo \"${type}\" não suportado para busca.`)\n          return\n      }\n\n      if (result.success) {\n        if (result.actors && result.actors.length > 0) {\n          const actorList = result.actors\n            .map(actor => `• **${actor.name}** (${actor.type}) - Nível ${actor.level || 'N/A'}`)\n            .join('\\n')\n\n          await this.sendMessage(`🔍 **Atores encontrados:**\\n${actorList}`)\n        } else {\n          await this.sendMessage('🔍 Nenhum resultado encontrado.')\n        }\n      } else {\n        await this.sendMessage(`❌ ${result.message}`)\n      }\n    } catch (error) {\n      await this.sendMessage(`❌ Erro na busca: ${error.message}`)\n    }\n  }\n\n  async handleMacroCommand (args, originalMessage) {\n    if (args.length === 0) {\n      await this.sendMessage('❌ Uso: `/ai macro <nome> [argumentos]`')\n      return\n    }\n\n    const macroName = args[0]\n    const macroArgs = args.slice(1)\n\n    // Simular busca de macro por nome\n    // Em FoundryVTT real seria: game.macros.find(m => m.name === macroName)\n    const mockMacroId = 'mock-macro-id'\n\n    const result = await this.apiHandler.executeMacro(mockMacroId, macroArgs)\n\n    if (result.success) {\n      await this.sendMessage(`⚙️ Macro \"${macroName}\" executado com sucesso.`)\n    } else {\n      await this.sendMessage(`❌ ${result.message}`)\n    }\n  }\n\n  async handleSceneCommand (args, originalMessage) {\n    if (args.length === 0) {\n      await this.sendMessage('❌ Uso: `/ai scene <ação> [parâmetros]`\\nAções: activate, create, list')\n      return\n    }\n\n    const action = args[0].toLowerCase()\n    const params = args.slice(1)\n\n    try {\n      switch (action) {\n        case 'activate':\n          if (params.length === 0) {\n            await this.sendMessage('❌ Uso: `/ai scene activate <nome_ou_id>`')\n            return\n          }\n          // Simular ativação de cena\n          await this.sendMessage(`🎬 Tentando ativar cena: ${params[0]}`)\n          break\n\n        case 'create':\n          if (params.length === 0) {\n            await this.sendMessage('❌ Uso: `/ai scene create <nome>`')\n            return\n          }\n          const sceneData = { name: params.join(' ') }\n          const result = await this.apiHandler.createScene(sceneData)\n\n          if (result.success) {\n            await this.sendMessage(`✅ ${result.message}`)\n          } else {\n            await this.sendMessage(`❌ ${result.message}`)\n          }\n          break\n\n        case 'list':\n          // Simular listagem de cenas\n          await this.sendMessage('🎬 **Cenas disponíveis:**\\n• Taverna do Javali Dourado\\n• Floresta Sombria\\n• Masmorra Antiga')\n          break\n\n        default:\n          await this.sendMessage(`❌ Ação \"${action}\" não reconhecida. Ações válidas: activate, create, list`)\n      }\n    } catch (error) {\n      await this.sendMessage(`❌ Erro no comando de cena: ${error.message}`)\n    }\n  }\n\n  async handleConfigCommand (args, originalMessage) {\n    if (args.length < 2) {\n      await this.sendMessage('❌ Uso: `/ai config <opção> <valor>`\\nOpções: provider, permission-level')\n      return\n    }\n\n    const option = args[0].toLowerCase()\n    const value = args.slice(1).join(' ')\n\n    try {\n      switch (option) {\n        case 'provider':\n          await this.setAIProvider(value)\n          await this.sendMessage(`⚙️ Provedor de IA alterado para: ${value}`)\n          break\n\n        case 'permission-level':\n          await this.permissionManager.setPermissionLevel(value.toUpperCase())\n          await this.sendMessage(`🔐 Nível de permissão alterado para: ${value}`)\n          break\n\n        default:\n          await this.sendMessage(`❌ Opção \"${option}\" não reconhecida.`)\n      }\n    } catch (error) {\n      await this.sendMessage(`❌ Erro na configuração: ${error.message}`)\n    }\n  }\n\n  async handleChatCommand (args, originalMessage) {\n    const message = args.join(' ')\n\n    if (!message) {\n      await this.sendMessage('❌ Uso: `/ai chat <mensagem>`')\n      return\n    }\n\n    await this.handleFreeConversation(message, originalMessage)\n  }\n\n  async handleFreeConversation (message, originalMessage) {\n    if (!this.currentProvider) {\n      await this.sendMessage('❌ Nenhum provedor de IA configurado. Use `/ai config provider <nome>` para configurar.')\n      return\n    }\n\n    try {\n      // Preparar contexto da conversa\n      const context = this.buildConversationContext(originalMessage)\n\n      // Enviar para provedor de IA\n      const response = await this.currentProvider.processMessage(message, context)\n\n      // Enviar resposta\n      await this.sendMessage(`🤖 ${response}`)\n\n      // Adicionar à história\n      this.addToConversationHistory({\n        user: 'AI Assistant',\n        content: response,\n        type: 'ai-response',\n        timestamp: Date.now()\n      })\n    } catch (error) {\n      console.error('AI Assistant | Erro na conversa livre:', error)\n      await this.sendMessage('❌ Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.')\n    }\n  }\n\n  buildConversationContext (originalMessage) {\n    return {\n      user: originalMessage?.user?.name || 'Unknown',\n      recentHistory: this.conversationHistory.slice(-10),\n      worldContext: this.getWorldContext(),\n      timestamp: Date.now()\n    }\n  }\n\n  getWorldContext () {\n    // Simular contexto do mundo\n    return {\n      activeScene: 'Taverna do Javali Dourado',\n      playerCount: 4,\n      systemName: 'D&D 5e'\n    }\n  }\n\n  // ========== PROVEDORES DE IA ==========\n\n  async loadAIProviders () {\n    // Simular carregamento de provedores\n    console.log('AI Assistant | Carregando provedores de IA...')\n\n    // Em implementação real, carregaria os provedores dos arquivos\n    this.aiProviders.set('mock', {\n      name: 'Mock Provider',\n      processMessage: async (message, context) => {\n        return `Você disse: \"${message}\". Esta é uma resposta simulada.`\n      }\n    })\n  }\n\n  async setDefaultProvider () {\n    // Configurar provedor padrão\n    this.currentProvider = this.aiProviders.get('mock')\n    console.log('AI Assistant | Provedor padrão configurado: Mock Provider')\n  }\n\n  async setAIProvider (providerName) {\n    const provider = this.aiProviders.get(providerName)\n    if (!provider) {\n      throw new Error(`Provedor \"${providerName}\" não encontrado`)\n    }\n\n    this.currentProvider = provider\n    console.log(`AI Assistant | Provedor alterado para: ${provider.name}`)\n  }\n\n  // ========== UTILITÁRIOS ==========\n\n  async sendMessage (content, options = {}) {\n    const messageData = {\n      content,\n      type: options.type || 'other',\n      speaker: {\n        alias: options.alias || 'AI Assistant'\n      },\n      whisper: options.whisper || null\n    }\n\n    // Simular criação de mensagem do FoundryVTT\n    console.log('AI Assistant | Enviando mensagem:', content)\n\n    // Em FoundryVTT real seria: await ChatMessage.create(messageData);\n    return messageData\n  }\n\n  async sendErrorMessage (error) {\n    await this.sendMessage(`❌ **Erro:** ${error}`, { type: 'error' })\n  }\n\n  async sendWhisper (content, targetUserId) {\n    await this.sendMessage(content, { whisper: [targetUserId] })\n  }\n\n  getStats () {\n    return {\n      initialized: this.initialized,\n      commandsRegistered: this.commands.size,\n      conversationHistoryLength: this.conversationHistory.length,\n      activeConversations: this.activeConversations.size,\n      availableProviders: this.aiProviders.size,\n      currentProvider: this.currentProvider?.name || null\n    }\n  }\n\n  // Método para processar mensagem diretamente (para testes)\n  async processDirectMessage (content, options = {}) {\n    const mockMessage = {\n      content,\n      user: { name: options.userName || 'Test User' },\n      type: options.type || 'ic'\n    }\n\n    await this.onChatMessage(mockMessage, {}, 'test-user-id')\n  }\n}\n","/**\n * Provedor Manus para AI Assistant\n * Integração com a API do Manus\n */\n\nexport class ManusProvider {\n  constructor (config = {}) {\n    this.name = 'Manus'\n    this.apiKey = config.apiKey || process.env.MANUS_API_KEY\n    this.baseUrl = config.baseUrl || 'https://api.manus.im'\n    this.model = config.model || 'gpt-4.1-mini'\n    this.maxTokens = config.maxTokens || 2000\n    this.temperature = config.temperature || 0.7\n    this.initialized = false\n    this.rateLimiter = new Map()\n    this.requestHistory = []\n  }\n\n  async initialize () {\n    console.log('Manus Provider | Inicializando...')\n\n    try {\n      // Verificar se a API key está configurada\n      if (!this.apiKey) {\n        throw new Error('API Key do Manus não configurada')\n      }\n\n      // Testar conectividade\n      await this.testConnection()\n\n      this.initialized = true\n      console.log('Manus Provider | Inicializado com sucesso')\n    } catch (error) {\n      console.error('Manus Provider | Erro na inicialização:', error)\n      throw error\n    }\n  }\n\n  async testConnection () {\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Erro na conexão: ${response.status} ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      console.log('Manus Provider | Conexão testada com sucesso')\n      return data\n    } catch (error) {\n      console.error('Manus Provider | Erro no teste de conexão:', error)\n      throw new Error(`Falha na conexão com Manus: ${error.message}`)\n    }\n  }\n\n  async processMessage (message, context = {}) {\n    if (!this.initialized) {\n      throw new Error('Provedor Manus não inicializado')\n    }\n\n    // Verificar rate limiting\n    if (!this.checkRateLimit()) {\n      throw new Error('Rate limit excedido. Tente novamente em alguns segundos.')\n    }\n\n    try {\n      // Construir prompt com contexto\n      const prompt = this.buildPrompt(message, context)\n\n      // Fazer requisição para API\n      const response = await this.makeAPIRequest(prompt)\n\n      // Processar resposta\n      const processedResponse = this.processResponse(response)\n\n      // Adicionar ao histórico\n      this.addToHistory(message, processedResponse, context)\n\n      return processedResponse\n    } catch (error) {\n      console.error('Manus Provider | Erro ao processar mensagem:', error)\n      throw new Error(`Erro do Manus: ${error.message}`)\n    }\n  }\n\n  buildPrompt (message, context) {\n    const systemPrompt = this.getSystemPrompt(context)\n    const conversationHistory = this.formatConversationHistory(context.recentHistory || [])\n    const worldContext = this.formatWorldContext(context.worldContext || {})\n\n    return {\n      model: this.model,\n      messages: [\n        {\n          role: 'system',\n          content: systemPrompt\n        },\n        ...conversationHistory,\n        {\n          role: 'user',\n          content: `${worldContext}\\n\\nUsuário: ${message}`\n        }\n      ],\n      max_tokens: this.maxTokens,\n      temperature: this.temperature,\n      stream: false\n    }\n  }\n\n  getSystemPrompt (context) {\n    return `Você é um AI Assistant integrado ao FoundryVTT, um sistema de RPG virtual. Suas responsabilidades incluem:\n\n1. **Assistência em Jogos de RPG**: Ajudar com regras, criação de personagens, narrativa e mecânicas de jogo.\n\n2. **Gerenciamento de Conteúdo**: Criar e modificar atores, itens, cenas, jornais e outros elementos do jogo quando solicitado.\n\n3. **Rolagem de Dados**: Interpretar e executar rolagens de dados usando a notação padrão (ex: 1d20+5).\n\n4. **Narrativa e Interpretação**: Ajudar com descrições, diálogos de NPCs e desenvolvimento de história.\n\n5. **Consultas de Regras**: Responder perguntas sobre sistemas de RPG, especialmente D&D 5e.\n\n**Diretrizes de Comportamento:**\n- Seja útil, criativo e envolvente\n- Mantenha o tom apropriado para o contexto do jogo\n- Quando criar conteúdo, forneça detalhes suficientes mas concisos\n- Se não tiver certeza sobre uma regra, admita e sugira onde encontrar a informação\n- Respeite o tom e estilo da campanha em andamento\n\n**Contexto Atual:**\n- Sistema: ${context.worldContext?.systemName || 'D&D 5e'}\n- Cena Ativa: ${context.worldContext?.activeScene || 'Não especificada'}\n- Jogadores: ${context.worldContext?.playerCount || 'Não especificado'}\n\nResponda de forma natural e útil, como se fosse um assistente experiente de RPG.`\n  }\n\n  formatConversationHistory (history) {\n    return history.slice(-10).map(msg => ({\n      role: msg.user === 'AI Assistant' ? 'assistant' : 'user',\n      content: `${msg.user}: ${msg.content}`\n    }))\n  }\n\n  formatWorldContext (worldContext) {\n    if (!worldContext || Object.keys(worldContext).length === 0) {\n      return ''\n    }\n\n    return `**Contexto do Mundo:**\n- Cena Ativa: ${worldContext.activeScene || 'N/A'}\n- Sistema: ${worldContext.systemName || 'N/A'}\n- Jogadores Conectados: ${worldContext.playerCount || 'N/A'}`\n  }\n\n  async makeAPIRequest (prompt) {\n    const startTime = Date.now()\n\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(prompt)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}))\n        throw new Error(`API Error ${response.status}: ${errorData.error?.message || response.statusText}`)\n      }\n\n      const data = await response.json()\n      const duration = Date.now() - startTime\n\n      console.log(`Manus Provider | Requisição concluída em ${duration}ms`)\n\n      return data\n    } catch (error) {\n      const duration = Date.now() - startTime\n      console.error(`Manus Provider | Erro na requisição (${duration}ms):`, error)\n      throw error\n    }\n  }\n\n  processResponse (apiResponse) {\n    try {\n      if (!apiResponse.choices || apiResponse.choices.length === 0) {\n        throw new Error('Resposta da API não contém choices')\n      }\n\n      const choice = apiResponse.choices[0]\n      if (!choice.message || !choice.message.content) {\n        throw new Error('Resposta da API não contém conteúdo')\n      }\n\n      let content = choice.message.content.trim()\n\n      // Processar comandos especiais na resposta\n      content = this.processSpecialCommands(content)\n\n      // Limitar tamanho da resposta\n      if (content.length > 2000) {\n        content = content.substring(0, 1997) + '...'\n      }\n\n      return content\n    } catch (error) {\n      console.error('Manus Provider | Erro ao processar resposta:', error)\n      throw new Error(`Erro ao processar resposta: ${error.message}`)\n    }\n  }\n\n  processSpecialCommands (content) {\n    // Processar comandos especiais que a IA pode incluir na resposta\n    // Por exemplo: [ROLL:1d20+5] ou [CREATE_ACTOR:Orc Warrior]\n\n    // Processar rolagens inline\n    content = content.replace(/\\[ROLL:([^\\]]+)\\]/g, (match, formula) => {\n      // Em implementação real, executaria a rolagem\n      return `🎲 ${formula}`\n    })\n\n    // Processar criação de elementos inline\n    content = content.replace(/\\[CREATE_(\\w+):([^\\]]+)\\]/g, (match, type, name) => {\n      // Em implementação real, criaria o elemento\n      return `✨ Criando ${type.toLowerCase()}: ${name}`\n    })\n\n    return content\n  }\n\n  addToHistory (message, response, context) {\n    this.requestHistory.push({\n      timestamp: Date.now(),\n      user: context.user || 'Unknown',\n      message,\n      response,\n      model: this.model,\n      tokens: response.length // Aproximação simples\n    })\n\n    // Manter apenas os últimos 100 registros\n    if (this.requestHistory.length > 100) {\n      this.requestHistory.shift()\n    }\n  }\n\n  checkRateLimit () {\n    const now = Date.now()\n    const windowMs = 60000 // 1 minuto\n    const maxRequests = 30 // 30 requests por minuto\n\n    // Limpar entradas antigas\n    const cutoff = now - windowMs\n    const recentRequests = Array.from(this.rateLimiter.values()).filter(time => time > cutoff)\n\n    // Atualizar rate limiter\n    this.rateLimiter.clear()\n    recentRequests.forEach((time, index) => {\n      this.rateLimiter.set(index, time)\n    })\n\n    // Verificar limite\n    if (recentRequests.length >= maxRequests) {\n      return false\n    }\n\n    // Adicionar requisição atual\n    this.rateLimiter.set(this.rateLimiter.size, now)\n    return true\n  }\n\n  // Métodos específicos para FoundryVTT\n\n  async generateNPC (type, options = {}) {\n    const prompt = `Crie um NPC do tipo \"${type}\" para D&D 5e. ${options.description ? `Descrição adicional: ${options.description}` : ''}\n\nForneça:\n1. Nome\n2. Raça e classe (se aplicável)\n3. Breve descrição física\n4. Personalidade (2-3 traços)\n5. Motivação principal\n6. Estatísticas básicas (se necessário)\n\nFormato: JSON estruturado para fácil importação.`\n\n    return await this.processMessage(prompt, {\n      worldContext: { systemName: 'D&D 5e' },\n      specialRequest: 'npc_generation'\n    })\n  }\n\n  async explainRule (rule, system = 'D&D 5e') {\n    const prompt = `Explique a regra \"${rule}\" do sistema ${system}. Seja claro e conciso, incluindo exemplos práticos se relevante.`\n\n    return await this.processMessage(prompt, {\n      worldContext: { systemName: system },\n      specialRequest: 'rule_explanation'\n    })\n  }\n\n  async generateDescription (type, subject, context = '') {\n    const prompt = `Gere uma descrição ${type} para: ${subject}. ${context ? `Contexto: ${context}` : ''}\n\nA descrição deve ser:\n- Envolvente e imersiva\n- Apropriada para RPG\n- Entre 2-4 frases\n- Rica em detalhes sensoriais`\n\n    return await this.processMessage(prompt, {\n      specialRequest: 'description_generation'\n    })\n  }\n\n  // Métodos de configuração\n\n  updateConfig (newConfig) {\n    if (newConfig.apiKey) this.apiKey = newConfig.apiKey\n    if (newConfig.baseUrl) this.baseUrl = newConfig.baseUrl\n    if (newConfig.model) this.model = newConfig.model\n    if (newConfig.maxTokens) this.maxTokens = newConfig.maxTokens\n    if (newConfig.temperature) this.temperature = newConfig.temperature\n\n    console.log('Manus Provider | Configuração atualizada')\n  }\n\n  getConfig () {\n    return {\n      name: this.name,\n      model: this.model,\n      maxTokens: this.maxTokens,\n      temperature: this.temperature,\n      initialized: this.initialized,\n      hasApiKey: !!this.apiKey\n    }\n  }\n\n  getStats () {\n    const recentRequests = this.requestHistory.filter(req =>\n      Date.now() - req.timestamp < 3600000 // Última hora\n    )\n\n    return {\n      name: this.name,\n      initialized: this.initialized,\n      totalRequests: this.requestHistory.length,\n      recentRequests: recentRequests.length,\n      averageResponseTime: this.calculateAverageResponseTime(),\n      rateLimitStatus: {\n        current: this.rateLimiter.size,\n        max: 30,\n        windowMs: 60000\n      }\n    }\n  }\n\n  calculateAverageResponseTime () {\n    if (this.requestHistory.length === 0) return 0\n\n    const recentRequests = this.requestHistory.slice(-10)\n    const totalTime = recentRequests.reduce((sum, req) => sum + (req.responseTime || 1000), 0)\n    return Math.round(totalTime / recentRequests.length)\n  }\n\n  // Método para cleanup\n  cleanup () {\n    this.rateLimiter.clear()\n    this.requestHistory = []\n    this.initialized = false\n    console.log('Manus Provider | Cleanup realizado')\n  }\n}\n","/**\n * Provedor OpenAI para AI Assistant\n * Integração com a API da OpenAI\n */\n\nexport class OpenAIProvider {\n  constructor (config = {}) {\n    this.name = 'OpenAI'\n    this.apiKey = config.apiKey || process.env.OPENAI_API_KEY\n    this.baseUrl = config.baseUrl || 'https://api.openai.com'\n    this.model = config.model || 'gpt-4'\n    this.maxTokens = config.maxTokens || 2000\n    this.temperature = config.temperature || 0.7\n    this.initialized = false\n    this.rateLimiter = new Map()\n    this.requestHistory = []\n    this.tokenUsage = { total: 0, prompt: 0, completion: 0 }\n  }\n\n  async initialize () {\n    console.log('OpenAI Provider | Inicializando...')\n\n    try {\n      // Verificar se a API key está configurada\n      if (!this.apiKey) {\n        throw new Error('API Key da OpenAI não configurada')\n      }\n\n      // Testar conectividade\n      await this.testConnection()\n\n      this.initialized = true\n      console.log('OpenAI Provider | Inicializado com sucesso')\n    } catch (error) {\n      console.error('OpenAI Provider | Erro na inicialização:', error)\n      throw error\n    }\n  }\n\n  async testConnection () {\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/models`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Erro na conexão: ${response.status} ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      console.log('OpenAI Provider | Conexão testada com sucesso')\n      return data\n    } catch (error) {\n      console.error('OpenAI Provider | Erro no teste de conexão:', error)\n      throw new Error(`Falha na conexão com OpenAI: ${error.message}`)\n    }\n  }\n\n  async processMessage (message, context = {}) {\n    if (!this.initialized) {\n      throw new Error('Provedor OpenAI não inicializado')\n    }\n\n    // Verificar rate limiting\n    if (!this.checkRateLimit()) {\n      throw new Error('Rate limit excedido. Tente novamente em alguns segundos.')\n    }\n\n    try {\n      // Construir prompt com contexto\n      const prompt = this.buildPrompt(message, context)\n\n      // Fazer requisição para API\n      const response = await this.makeAPIRequest(prompt)\n\n      // Processar resposta\n      const processedResponse = this.processResponse(response)\n\n      // Atualizar estatísticas de tokens\n      this.updateTokenUsage(response.usage)\n\n      // Adicionar ao histórico\n      this.addToHistory(message, processedResponse, context, response.usage)\n\n      return processedResponse\n    } catch (error) {\n      console.error('OpenAI Provider | Erro ao processar mensagem:', error)\n      throw new Error(`Erro da OpenAI: ${error.message}`)\n    }\n  }\n\n  buildPrompt (message, context) {\n    const systemPrompt = this.getSystemPrompt(context)\n    const conversationHistory = this.formatConversationHistory(context.recentHistory || [])\n    const worldContext = this.formatWorldContext(context.worldContext || {})\n\n    return {\n      model: this.model,\n      messages: [\n        {\n          role: 'system',\n          content: systemPrompt\n        },\n        ...conversationHistory,\n        {\n          role: 'user',\n          content: `${worldContext}\\n\\nUsuário: ${message}`\n        }\n      ],\n      max_tokens: this.maxTokens,\n      temperature: this.temperature,\n      presence_penalty: 0.1,\n      frequency_penalty: 0.1\n    }\n  }\n\n  getSystemPrompt (context) {\n    return `Você é um AI Assistant especializado em RPG integrado ao FoundryVTT. Suas funções incluem:\n\n**Capacidades Principais:**\n1. **Assistência em RPG**: Ajudar com regras, mecânicas, criação de personagens e narrativa\n2. **Gerenciamento de Jogo**: Criar e modificar elementos do jogo (atores, itens, cenas, etc.)\n3. **Interpretação de Dados**: Executar e interpretar rolagens de dados\n4. **Narrativa Criativa**: Gerar descrições, diálogos de NPCs e elementos de história\n5. **Consulta de Regras**: Responder sobre sistemas de RPG, especialmente D&D 5e\n\n**Diretrizes de Comportamento:**\n- Seja preciso e útil nas respostas sobre regras\n- Mantenha um tom envolvente e apropriado para RPG\n- Quando criar conteúdo, seja criativo mas equilibrado\n- Se incerto sobre uma regra, seja honesto e sugira fontes\n- Adapte-se ao tom e estilo da campanha\n\n**Comandos Especiais:**\n- Use [ROLL:fórmula] para sugerir rolagens\n- Use [CREATE:tipo:nome] para sugerir criação de elementos\n- Use [SEARCH:tipo:termo] para sugerir buscas\n\n**Contexto Atual:**\n- Sistema: ${context.worldContext?.systemName || 'D&D 5e'}\n- Cena: ${context.worldContext?.activeScene || 'Não especificada'}\n- Jogadores: ${context.worldContext?.playerCount || 'Não especificado'}\n\nResponda como um mestre experiente e assistente útil.`\n  }\n\n  formatConversationHistory (history) {\n    return history.slice(-8).map(msg => ({\n      role: msg.user === 'AI Assistant' ? 'assistant' : 'user',\n      content: msg.content.length > 500 ? msg.content.substring(0, 497) + '...' : msg.content\n    }))\n  }\n\n  formatWorldContext (worldContext) {\n    if (!worldContext || Object.keys(worldContext).length === 0) {\n      return ''\n    }\n\n    return `**Contexto do Mundo:**\n- Cena Ativa: ${worldContext.activeScene || 'N/A'}\n- Sistema: ${worldContext.systemName || 'N/A'}\n- Jogadores: ${worldContext.playerCount || 'N/A'}`\n  }\n\n  async makeAPIRequest (prompt) {\n    const startTime = Date.now()\n\n    try {\n      const response = await fetch(`${this.baseUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(prompt)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}))\n\n        // Tratar erros específicos da OpenAI\n        if (response.status === 429) {\n          throw new Error('Rate limit da OpenAI excedido. Tente novamente em alguns segundos.')\n        } else if (response.status === 401) {\n          throw new Error('API Key da OpenAI inválida ou expirada.')\n        } else if (response.status === 400) {\n          throw new Error(`Requisição inválida: ${errorData.error?.message || 'Parâmetros incorretos'}`)\n        }\n\n        throw new Error(`API Error ${response.status}: ${errorData.error?.message || response.statusText}`)\n      }\n\n      const data = await response.json()\n      const duration = Date.now() - startTime\n\n      console.log(`OpenAI Provider | Requisição concluída em ${duration}ms`)\n\n      return data\n    } catch (error) {\n      const duration = Date.now() - startTime\n      console.error(`OpenAI Provider | Erro na requisição (${duration}ms):`, error)\n      throw error\n    }\n  }\n\n  processResponse (apiResponse) {\n    try {\n      if (!apiResponse.choices || apiResponse.choices.length === 0) {\n        throw new Error('Resposta da API não contém choices')\n      }\n\n      const choice = apiResponse.choices[0]\n      if (!choice.message || !choice.message.content) {\n        throw new Error('Resposta da API não contém conteúdo')\n      }\n\n      let content = choice.message.content.trim()\n\n      // Processar comandos especiais na resposta\n      content = this.processSpecialCommands(content)\n\n      // Verificar se a resposta foi truncada\n      if (choice.finish_reason === 'length') {\n        content += '\\n\\n*[Resposta truncada devido ao limite de tokens]*'\n      }\n\n      // Limitar tamanho da resposta para chat\n      if (content.length > 2000) {\n        content = content.substring(0, 1997) + '...'\n      }\n\n      return content\n    } catch (error) {\n      console.error('OpenAI Provider | Erro ao processar resposta:', error)\n      throw new Error(`Erro ao processar resposta: ${error.message}`)\n    }\n  }\n\n  processSpecialCommands (content) {\n    // Processar comandos especiais que a IA pode incluir na resposta\n\n    // Processar rolagens inline\n    content = content.replace(/\\[ROLL:([^\\]]+)\\]/g, (match, formula) => {\n      return `🎲 *Sugestão de rolagem: ${formula}*`\n    })\n\n    // Processar criação de elementos inline\n    content = content.replace(/\\[CREATE:(\\w+):([^\\]]+)\\]/g, (match, type, name) => {\n      return `✨ *Sugestão: Criar ${type.toLowerCase()} \"${name}\"*`\n    })\n\n    // Processar buscas inline\n    content = content.replace(/\\[SEARCH:(\\w+):([^\\]]+)\\]/g, (match, type, term) => {\n      return `🔍 *Sugestão: Buscar ${type} por \"${term}\"*`\n    })\n\n    return content\n  }\n\n  updateTokenUsage (usage) {\n    if (usage) {\n      this.tokenUsage.total += usage.total_tokens || 0\n      this.tokenUsage.prompt += usage.prompt_tokens || 0\n      this.tokenUsage.completion += usage.completion_tokens || 0\n    }\n  }\n\n  addToHistory (message, response, context, usage) {\n    this.requestHistory.push({\n      timestamp: Date.now(),\n      user: context.user || 'Unknown',\n      message,\n      response,\n      model: this.model,\n      usage,\n      responseTime: Date.now() - (context.startTime || Date.now())\n    })\n\n    // Manter apenas os últimos 100 registros\n    if (this.requestHistory.length > 100) {\n      this.requestHistory.shift()\n    }\n  }\n\n  checkRateLimit () {\n    const now = Date.now()\n    const windowMs = 60000 // 1 minuto\n    const maxRequests = 20 // 20 requests por minuto (conservador)\n\n    // Limpar entradas antigas\n    const cutoff = now - windowMs\n    const recentRequests = Array.from(this.rateLimiter.values()).filter(time => time > cutoff)\n\n    // Atualizar rate limiter\n    this.rateLimiter.clear()\n    recentRequests.forEach((time, index) => {\n      this.rateLimiter.set(index, time)\n    })\n\n    // Verificar limite\n    if (recentRequests.length >= maxRequests) {\n      return false\n    }\n\n    // Adicionar requisição atual\n    this.rateLimiter.set(this.rateLimiter.size, now)\n    return true\n  }\n\n  // Métodos específicos para FoundryVTT\n\n  async generateNPC (type, options = {}) {\n    const prompt = `Crie um NPC detalhado do tipo \"${type}\" para D&D 5e.\n\n${options.description ? `Descrição adicional: ${options.description}` : ''}\n${options.level ? `Nível/CR sugerido: ${options.level}` : ''}\n${options.role ? `Papel na história: ${options.role}` : ''}\n\nForneça:\n1. **Nome** e título (se aplicável)\n2. **Raça e classe** (ou tipo de criatura)\n3. **Descrição física** (2-3 frases)\n4. **Personalidade** (3-4 traços distintos)\n5. **Motivação principal** e objetivos\n6. **Background** (breve história)\n7. **Estatísticas básicas** (CA, HP, atributos principais)\n8. **Habilidades especiais** ou equipamentos notáveis\n\nFormato: Estruturado e pronto para uso no jogo.`\n\n    return await this.processMessage(prompt, {\n      worldContext: { systemName: 'D&D 5e' },\n      specialRequest: 'npc_generation'\n    })\n  }\n\n  async explainRule (rule, system = 'D&D 5e') {\n    const prompt = `Explique detalhadamente a regra \"${rule}\" do sistema ${system}.\n\nInclua:\n1. **Definição** clara da regra\n2. **Como funciona** na prática\n3. **Exemplos** de uso em jogo\n4. **Interações** com outras regras (se relevante)\n5. **Dicas** para mestres e jogadores\n\nSeja preciso mas acessível.`\n\n    return await this.processMessage(prompt, {\n      worldContext: { systemName: system },\n      specialRequest: 'rule_explanation'\n    })\n  }\n\n  async generateDescription (type, subject, context = '') {\n    const prompt = `Gere uma descrição ${type} envolvente para: \"${subject}\"\n\n${context ? `Contexto adicional: ${context}` : ''}\n\nA descrição deve ser:\n- **Imersiva** e rica em detalhes sensoriais\n- **Apropriada** para RPG de fantasia\n- **Concisa** mas evocativa (3-5 frases)\n- **Útil** para mestres narrarem\n\nFoque em criar atmosfera e ajudar a visualizar a cena.`\n\n    return await this.processMessage(prompt, {\n      specialRequest: 'description_generation'\n    })\n  }\n\n  async generateEncounter (difficulty, environment, partyLevel = 5) {\n    const prompt = `Crie um encontro de dificuldade \"${difficulty}\" para um grupo de nível ${partyLevel} em ambiente: ${environment}\n\nInclua:\n1. **Descrição da cena** e atmosfera\n2. **Inimigos** (tipos, quantidades, táticas)\n3. **Terreno** e elementos ambientais\n4. **Objetivos** possíveis além de combate\n5. **Recompensas** apropriadas\n6. **Variações** para diferentes abordagens\n\nTorne o encontro memorável e estratégico.`\n\n    return await this.processMessage(prompt, {\n      worldContext: { systemName: 'D&D 5e' },\n      specialRequest: 'encounter_generation'\n    })\n  }\n\n  async generateLoot (challenge, type = 'mixed') {\n    const prompt = `Gere um tesouro apropriado para desafio de nível ${challenge}, tipo \"${type}\".\n\nInclua:\n1. **Moedas** (quantidade apropriada)\n2. **Itens mundanos** valiosos\n3. **Itens mágicos** (se apropriado)\n4. **Itens únicos** ou com história\n5. **Valor total** estimado\n\nEquilibre utilidade e valor, considerando o nível do grupo.`\n\n    return await this.processMessage(prompt, {\n      worldContext: { systemName: 'D&D 5e' },\n      specialRequest: 'loot_generation'\n    })\n  }\n\n  // Métodos de configuração\n\n  updateConfig (newConfig) {\n    if (newConfig.apiKey) this.apiKey = newConfig.apiKey\n    if (newConfig.baseUrl) this.baseUrl = newConfig.baseUrl\n    if (newConfig.model) this.model = newConfig.model\n    if (newConfig.maxTokens) this.maxTokens = newConfig.maxTokens\n    if (newConfig.temperature) this.temperature = newConfig.temperature\n\n    console.log('OpenAI Provider | Configuração atualizada')\n  }\n\n  getConfig () {\n    return {\n      name: this.name,\n      model: this.model,\n      maxTokens: this.maxTokens,\n      temperature: this.temperature,\n      initialized: this.initialized,\n      hasApiKey: !!this.apiKey,\n      tokenUsage: { ...this.tokenUsage }\n    }\n  }\n\n  getStats () {\n    const recentRequests = this.requestHistory.filter(req =>\n      Date.now() - req.timestamp < 3600000 // Última hora\n    )\n\n    const avgResponseTime = this.calculateAverageResponseTime()\n    const avgTokensPerRequest = this.requestHistory.length > 0\n      ? Math.round(this.tokenUsage.total / this.requestHistory.length)\n      : 0\n\n    return {\n      name: this.name,\n      initialized: this.initialized,\n      totalRequests: this.requestHistory.length,\n      recentRequests: recentRequests.length,\n      averageResponseTime: avgResponseTime,\n      tokenUsage: { ...this.tokenUsage },\n      averageTokensPerRequest: avgTokensPerRequest,\n      rateLimitStatus: {\n        current: this.rateLimiter.size,\n        max: 20,\n        windowMs: 60000\n      },\n      estimatedCost: this.calculateEstimatedCost()\n    }\n  }\n\n  calculateAverageResponseTime () {\n    if (this.requestHistory.length === 0) return 0\n\n    const recentRequests = this.requestHistory.slice(-10)\n    const totalTime = recentRequests.reduce((sum, req) => sum + (req.responseTime || 1000), 0)\n    return Math.round(totalTime / recentRequests.length)\n  }\n\n  calculateEstimatedCost () {\n    // Estimativa baseada nos preços da OpenAI (valores aproximados)\n    const costs = {\n      'gpt-4': { prompt: 0.03, completion: 0.06 }, // por 1K tokens\n      'gpt-4-turbo': { prompt: 0.01, completion: 0.03 },\n      'gpt-3.5-turbo': { prompt: 0.001, completion: 0.002 }\n    }\n\n    const modelCost = costs[this.model] || costs['gpt-4']\n    const promptCost = (this.tokenUsage.prompt / 1000) * modelCost.prompt\n    const completionCost = (this.tokenUsage.completion / 1000) * modelCost.completion\n\n    return {\n      total: promptCost + completionCost,\n      prompt: promptCost,\n      completion: completionCost,\n      currency: 'USD'\n    }\n  }\n\n  // Método para cleanup\n  cleanup () {\n    this.rateLimiter.clear()\n    this.requestHistory = []\n    this.tokenUsage = { total: 0, prompt: 0, completion: 0 }\n    this.initialized = false\n    console.log('OpenAI Provider | Cleanup realizado')\n  }\n}\n","/**\n * Interface de configuração para o AI Assistant\n * Fornece uma UI amigável para configurar o módulo\n */\n\nexport class ConfigInterface extends FormApplication {\n  constructor (aiAssistant, options = {}) {\n    super({}, options)\n    this.aiAssistant = aiAssistant\n  }\n\n  static get defaultOptions () {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      id: 'ai-assistant-config',\n      title: 'AI Assistant - Configurações',\n      template: 'modules/foundryvtt-ai-assistant/templates/config-form.hbs',\n      width: 600,\n      height: 'auto',\n      closeOnSubmit: true,\n      submitOnChange: false,\n      submitOnClose: false,\n      resizable: true,\n      classes: ['ai-assistant-config-form']\n    })\n  }\n\n  getData () {\n    const config = this.aiAssistant.config\n\n    return {\n      // Configurações gerais\n      enabled: config.enabled,\n      debugMode: config.debugMode,\n      commandPrefix: config.commandPrefix,\n      autoCreateAIUser: config.autoCreateAIUser,\n      defaultPermissionLevel: config.defaultPermissionLevel,\n      rateLimitEnabled: config.rateLimitEnabled,\n      maxRequestsPerMinute: config.maxRequestsPerMinute,\n      showStatusInChat: config.showStatusInChat,\n      compactMode: config.compactMode,\n      conversationHistoryLimit: config.conversationHistoryLimit,\n\n      // Provedores disponíveis\n      providers: this.getProviderOptions(),\n\n      // Configurações de provedores\n      providerConfigs: this.getProviderConfigs(),\n\n      // Níveis de permissão\n      permissionLevels: this.getPermissionLevels()\n    }\n  }\n\n  getProviderOptions () {\n    const currentProvider = this.aiAssistant.config.defaultProvider\n\n    return [\n      {\n        id: 'manus',\n        name: 'Manus',\n        selected: currentProvider === 'manus'\n      },\n      {\n        id: 'openai',\n        name: 'OpenAI',\n        selected: currentProvider === 'openai'\n      }\n    ]\n  }\n\n  getProviderConfigs () {\n    const configs = {}\n\n    // Configuração Manus\n    configs.manus = {\n      name: 'Manus',\n      enabled: this.aiAssistant.config.providers.manus.enabled,\n      apiKey: this.aiAssistant.config.providers.manus.apiKey,\n      maxTokens: this.aiAssistant.config.providers.manus.maxTokens,\n      temperature: this.aiAssistant.config.providers.manus.temperature,\n      models: [\n        {\n          id: 'gpt-4.1-mini',\n          name: 'GPT-4.1 Mini',\n          selected: this.aiAssistant.config.providers.manus.model === 'gpt-4.1-mini'\n        },\n        {\n          id: 'gpt-4.1-nano',\n          name: 'GPT-4.1 Nano',\n          selected: this.aiAssistant.config.providers.manus.model === 'gpt-4.1-nano'\n        },\n        {\n          id: 'gemini-2.5-flash',\n          name: 'Gemini 2.5 Flash',\n          selected: this.aiAssistant.config.providers.manus.model === 'gemini-2.5-flash'\n        }\n      ]\n    }\n\n    // Configuração OpenAI\n    configs.openai = {\n      name: 'OpenAI',\n      enabled: this.aiAssistant.config.providers.openai.enabled,\n      apiKey: this.aiAssistant.config.providers.openai.apiKey,\n      maxTokens: this.aiAssistant.config.providers.openai.maxTokens,\n      temperature: this.aiAssistant.config.providers.openai.temperature,\n      models: [\n        {\n          id: 'gpt-4',\n          name: 'GPT-4',\n          selected: this.aiAssistant.config.providers.openai.model === 'gpt-4'\n        },\n        {\n          id: 'gpt-4-turbo',\n          name: 'GPT-4 Turbo',\n          selected: this.aiAssistant.config.providers.openai.model === 'gpt-4-turbo'\n        },\n        {\n          id: 'gpt-3.5-turbo',\n          name: 'GPT-3.5 Turbo',\n          selected: this.aiAssistant.config.providers.openai.model === 'gpt-3.5-turbo'\n        }\n      ]\n    }\n\n    return configs\n  }\n\n  getPermissionLevels () {\n    const currentLevel = this.aiAssistant.config.defaultPermissionLevel\n\n    return [\n      {\n        id: 'NONE',\n        name: 'Nenhuma',\n        selected: currentLevel === 'NONE'\n      },\n      {\n        id: 'BASIC',\n        name: 'Básica',\n        selected: currentLevel === 'BASIC'\n      },\n      {\n        id: 'INTERMEDIATE',\n        name: 'Intermediária',\n        selected: currentLevel === 'INTERMEDIATE'\n      },\n      {\n        id: 'ADVANCED',\n        name: 'Avançada',\n        selected: currentLevel === 'ADVANCED'\n      },\n      {\n        id: 'FULL',\n        name: 'Completa',\n        selected: currentLevel === 'FULL'\n      }\n    ]\n  }\n\n  activateListeners (html) {\n    super.activateListeners(html)\n\n    // Botão de teste de conexão para provedores\n    html.find('.test-connection').click(this._onTestConnection.bind(this))\n\n    // Botão de reset para configurações padrão\n    html.find('.reset-config').click(this._onResetConfig.bind(this))\n\n    // Validação em tempo real de API keys\n    html.find('input[name*=\"apiKey\"]').on('input', this._onApiKeyInput.bind(this))\n  }\n\n  async _onTestConnection (event) {\n    event.preventDefault()\n\n    const button = event.currentTarget\n    const provider = button.dataset.provider\n    const originalText = button.textContent\n\n    button.textContent = 'Testando...'\n    button.disabled = true\n\n    try {\n      // Obter configurações atuais do formulário\n      const formData = new FormData(this.form)\n      const apiKey = formData.get(`providers.${provider}.apiKey`)\n      const model = formData.get(`providers.${provider}.model`)\n\n      if (!apiKey) {\n        throw new Error('API Key é obrigatória')\n      }\n\n      // Testar conexão com o provedor\n      const providerInstance = this.aiAssistant.providers.get(provider)\n      if (providerInstance && providerInstance.testConnection) {\n        await providerInstance.testConnection({ apiKey, model })\n        ui.notifications.info(`Conexão com ${provider} testada com sucesso!`)\n      } else {\n        throw new Error('Provedor não suporta teste de conexão')\n      }\n    } catch (error) {\n      ui.notifications.error(`Erro ao testar conexão: ${error.message}`)\n    } finally {\n      button.textContent = originalText\n      button.disabled = false\n    }\n  }\n\n  async _onResetConfig (event) {\n    event.preventDefault()\n\n    const confirmed = await Dialog.confirm({\n      title: 'Resetar Configurações',\n      content: '<p>Tem certeza que deseja resetar todas as configurações para os valores padrão?</p>',\n      yes: () => true,\n      no: () => false\n    })\n\n    if (confirmed) {\n      await this.aiAssistant.resetModule()\n      this.render(true)\n      ui.notifications.info('Configurações resetadas para os valores padrão')\n    }\n  }\n\n  _onApiKeyInput (event) {\n    const input = event.currentTarget\n    const value = input.value.trim()\n\n    // Validação básica de API key\n    if (value.length > 0 && value.length < 10) {\n      input.style.borderColor = '#ff6b6b'\n      input.title = 'API Key parece muito curta'\n    } else if (value.length >= 10) {\n      input.style.borderColor = '#51cf66'\n      input.title = 'API Key válida'\n    } else {\n      input.style.borderColor = ''\n      input.title = ''\n    }\n  }\n\n  async _updateObject (event, formData) {\n    try {\n      // Processar dados do formulário\n      const config = foundry.utils.expandObject(formData)\n\n      // Atualizar configuração do AI Assistant\n      this.aiAssistant.config = foundry.utils.mergeObject(this.aiAssistant.config, config)\n\n      // Salvar configurações\n      await this.aiAssistant.saveConfiguration()\n\n      // Reinicializar provedores se necessário\n      if (config.providers) {\n        await this.aiAssistant.initializeProviders()\n      }\n\n      // Atualizar provedor padrão se mudou\n      if (config.defaultProvider && config.defaultProvider !== this.aiAssistant.config.defaultProvider) {\n        await this.aiAssistant.setProvider(config.defaultProvider)\n      }\n\n      ui.notifications.info('Configurações salvas com sucesso!')\n    } catch (error) {\n      console.error('Erro ao salvar configurações:', error)\n      ui.notifications.error(`Erro ao salvar configurações: ${error.message}`)\n    }\n  }\n\n  // Método estático para abrir a interface\n  static async show (aiAssistant) {\n    const configInterface = new ConfigInterface(aiAssistant)\n    return configInterface.render(true)\n  }\n}\n\n// Registrar comando de chat para abrir configurações\nexport function registerConfigCommand (aiAssistant) {\n  if (typeof Hooks !== 'undefined') {\n    Hooks.on('chatMessage', (chatLog, message, chatData) => {\n      if (message === '/ai-config' && game.user.isGM) {\n        ConfigInterface.show(aiAssistant)\n        return false // Prevenir que a mensagem apareça no chat\n      }\n    })\n  }\n}\n","/**\n * FoundryVTT AI Assistant - Arquivo Principal\n * Integra todos os componentes do módulo\n */\n\nimport { AIUserManager } from './ai-user-manager.js'\nimport { APIHandler } from './api-handler.js'\nimport { PermissionManager } from './permissions.js'\nimport { ChatInterface } from './chat-interface.js'\nimport { ManusProvider } from './providers/manus.js'\nimport { OpenAIProvider } from './providers/openai.js'\nimport { ConfigInterface, registerConfigCommand } from './config-interface.js'\n\nclass AIAssistant {\n  constructor () {\n    this.initialized = false\n    this.components = {}\n    this.providers = new Map()\n    this.currentProvider = null\n    this.config = {}\n    this.startTime = Date.now()\n  }\n\n  async initialize () {\n    console.log('AI Assistant | Iniciando módulo...')\n\n    try {\n      // Carregar configurações\n      await this.loadConfiguration()\n\n      // Inicializar componentes principais\n      await this.initializeComponents()\n\n      // Configurar provedores de IA\n      await this.initializeProviders()\n\n      // Configurar hooks do FoundryVTT\n      this.setupFoundryHooks()\n\n      // Registrar configurações do módulo\n      this.registerModuleSettings()\n\n      // Configurar API pública\n      this.setupPublicAPI()\n\n      // Registrar comando de configuração\n      registerConfigCommand(this)\n\n      this.initialized = true\n      const initTime = Date.now() - this.startTime\n\n      console.log(`AI Assistant | Módulo inicializado com sucesso em ${initTime}ms`)\n\n      // Notificar usuários\n      this.notifyInitialization()\n    } catch (error) {\n      console.error('AI Assistant | Erro na inicialização:', error)\n      ui.notifications.error(`Erro ao inicializar AI Assistant: ${error.message}`)\n      throw error\n    }\n  }\n\n  async loadConfiguration () {\n    console.log('AI Assistant | Carregando configurações...')\n\n    // Configurações padrão\n    this.config = {\n      // Configurações gerais\n      enabled: true,\n      debugMode: false,\n      autoCreateAIUser: true,\n      defaultPermissionLevel: 'BASIC',\n\n      // Configurações de chat\n      commandPrefix: '/ai',\n      respondToMentions: true,\n      conversationHistoryLimit: 100,\n\n      // Configurações de provedores\n      defaultProvider: 'manus',\n      providers: {\n        manus: {\n          enabled: true,\n          apiKey: '',\n          model: 'gpt-4.1-mini',\n          maxTokens: 2000,\n          temperature: 0.7\n        },\n        openai: {\n          enabled: false,\n          apiKey: '',\n          model: 'gpt-4',\n          maxTokens: 2000,\n          temperature: 0.7\n        }\n      },\n\n      // Configurações de segurança\n      rateLimitEnabled: true,\n      maxRequestsPerMinute: 30,\n      requireGMApprovalForDangerous: true,\n\n      // Configurações de UI\n      showStatusInChat: true,\n      showPermissionRequests: true,\n      compactMode: false\n    }\n\n    // Carregar configurações salvas (se existirem)\n    try {\n      // Simular carregamento de configurações (FoundryVTT real usaria game.settings)\n      const savedConfig = this.getStoredConfig() || {}\n      this.config = { ...this.config, ...savedConfig }\n    } catch (error) {\n      console.warn('AI Assistant | Erro ao carregar configurações salvas, usando padrão:', error)\n    }\n  }\n\n  getStoredConfig () {\n    // Usar game.settings para persistência real no FoundryVTT\n    try {\n      if (typeof game !== 'undefined' && game.settings) {\n        return game.settings.get('foundryvtt-ai-assistant', 'config') || {}\n      } else {\n        // Fallback para desenvolvimento/testes\n        return JSON.parse(localStorage.getItem('ai-assistant-config') || '{}')\n      }\n    } catch {\n      return {}\n    }\n  }\n\n  async initializeComponents () {\n    console.log('AI Assistant | Inicializando componentes...')\n\n    // Inicializar gerenciador de permissões\n    this.components.permissionManager = new PermissionManager()\n    await this.components.permissionManager.initialize()\n\n    // Inicializar gerenciador de usuário IA\n    this.components.aiUserManager = new AIUserManager(this.components.permissionManager)\n    await this.components.aiUserManager.initialize()\n\n    // Inicializar handler de API\n    this.components.apiHandler = new APIHandler(\n      this.components.permissionManager,\n      this.components.aiUserManager\n    )\n    await this.components.apiHandler.initialize()\n\n    // Inicializar interface de chat\n    this.components.chatInterface = new ChatInterface(\n      this.components.permissionManager,\n      this.components.apiHandler,\n      this.components.aiUserManager\n    )\n    await this.components.chatInterface.initialize()\n\n    console.log('AI Assistant | Componentes inicializados com sucesso')\n  }\n\n  async initializeProviders () {\n    console.log('AI Assistant | Inicializando provedores de IA...')\n\n    // Inicializar provedor Manus\n    if (this.config.providers.manus.enabled) {\n      try {\n        const manusProvider = new ManusProvider(this.config.providers.manus)\n        await manusProvider.initialize()\n        this.providers.set('manus', manusProvider)\n        console.log('AI Assistant | Provedor Manus inicializado')\n      } catch (error) {\n        console.warn('AI Assistant | Erro ao inicializar provedor Manus:', error)\n      }\n    }\n\n    // Inicializar provedor OpenAI\n    if (this.config.providers.openai.enabled) {\n      try {\n        const openaiProvider = new OpenAIProvider(this.config.providers.openai)\n        await openaiProvider.initialize()\n        this.providers.set('openai', openaiProvider)\n        console.log('AI Assistant | Provedor OpenAI inicializado')\n      } catch (error) {\n        console.warn('AI Assistant | Erro ao inicializar provedor OpenAI:', error)\n      }\n    }\n\n    // Configurar provedor padrão\n    await this.setDefaultProvider()\n  }\n\n  async setDefaultProvider () {\n    const defaultProviderName = this.config.defaultProvider\n    const provider = this.providers.get(defaultProviderName)\n\n    if (provider) {\n      this.currentProvider = provider\n      console.log(`AI Assistant | Provedor padrão configurado: ${provider.name}`)\n    } else {\n      // Usar o primeiro provedor disponível\n      const firstProvider = this.providers.values().next().value\n      if (firstProvider) {\n        this.currentProvider = firstProvider\n        console.log(`AI Assistant | Usando primeiro provedor disponível: ${firstProvider.name}`)\n      } else {\n        console.warn('AI Assistant | Nenhum provedor de IA disponível')\n      }\n    }\n\n    // Configurar provedor na interface de chat\n    if (this.currentProvider && this.components.chatInterface) {\n      await this.components.chatInterface.setAIProvider(this.currentProvider.name.toLowerCase())\n    }\n  }\n\n  setupFoundryHooks () {\n    console.log('AI Assistant | Configurando hooks do FoundryVTT...')\n\n    if (typeof Hooks !== 'undefined') {\n      // Hook para quando o chat é renderizado\n      Hooks.on('renderChatLog', (app, html, data) => {\n        if (this.components.chatInterface) {\n          this.components.chatInterface.onChatLogRender(app, html, data)\n        }\n      })\n\n      // Hook para mensagens de chat\n      Hooks.on('createChatMessage', (message, options, userId) => {\n        if (this.components.chatInterface) {\n          this.components.chatInterface.onChatMessage(message, options, userId)\n        }\n      })\n\n      // Hook para quando um ator é atualizado\n      Hooks.on('updateActor', (actor, data, options, userId) => {\n        if (this.components.apiHandler) {\n          this.components.apiHandler.onActorUpdate(actor, data, options, userId)\n        }\n      })\n\n      // Hook para quando configurações são alteradas\n      Hooks.on('closeSettingsConfig', () => {\n        this.loadConfiguration()\n      })\n\n      console.log('AI Assistant | Hooks do FoundryVTT configurados')\n    } else {\n      // Fallback para desenvolvimento/testes\n      console.log('AI Assistant | Hooks configurados (modo desenvolvimento)')\n    }\n  }\n\n  registerModuleSettings () {\n    console.log('AI Assistant | Registrando configurações do módulo...')\n\n    if (typeof game !== 'undefined' && game.settings) {\n      // Configuração principal do módulo\n      game.settings.register('foundryvtt-ai-assistant', 'config', {\n        name: 'AI Assistant Configuration',\n        hint: 'Configurações internas do módulo AI Assistant',\n        scope: 'world',\n        config: false,\n        type: Object,\n        default: {}\n      })\n\n      // Configurações visíveis para o usuário\n      game.settings.register('foundryvtt-ai-assistant', 'enabled', {\n        name: 'AI Assistant Habilitado',\n        hint: 'Habilita ou desabilita o módulo AI Assistant',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: value => {\n          this.config.enabled = value\n          if (!value && this.components.chatInterface) {\n            this.components.chatInterface.disable()\n          }\n        }\n      })\n\n      game.settings.register('foundryvtt-ai-assistant', 'defaultProvider', {\n        name: 'Provedor de IA Padrão',\n        hint: 'Selecione o provedor de IA padrão',\n        scope: 'world',\n        config: true,\n        type: String,\n        choices: {\n          manus: 'Manus',\n          openai: 'OpenAI'\n        },\n        default: 'manus',\n        onChange: value => {\n          this.setProvider(value)\n        }\n      })\n\n      game.settings.register('foundryvtt-ai-assistant', 'debugMode', {\n        name: 'Modo Debug',\n        hint: 'Habilita logs detalhados para depuração',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: value => {\n          this.config.debugMode = value\n        }\n      })\n\n      console.log('AI Assistant | Configurações do FoundryVTT registradas')\n    } else {\n      // Fallback para desenvolvimento/testes\n      console.log('AI Assistant | Configurações registradas (modo desenvolvimento)')\n    }\n  }\n\n  setupPublicAPI () {\n    console.log('AI Assistant | Configurando API pública...')\n\n    // Expor API pública do módulo\n    const api = {\n      // Métodos principais\n      isInitialized: () => this.initialized,\n      getStats: () => this.getStats(),\n      getConfig: () => ({ ...this.config }),\n\n      // Gerenciamento de provedores\n      getProviders: () => Array.from(this.providers.keys()),\n      getCurrentProvider: () => this.currentProvider?.name || null,\n      setProvider: (name) => this.setProvider(name),\n\n      // Permissões\n      checkPermission: (action) => this.components.permissionManager?.checkPermission(action) || false,\n      grantPermission: (action, granted) => this.components.permissionManager?.grantPermission(action, granted),\n      setPermissionLevel: (level) => this.components.permissionManager?.setPermissionLevel(level),\n\n      // Chat e comandos\n      sendMessage: (content, options) => this.components.chatInterface?.sendMessage(content, options),\n      processCommand: (command) => this.components.chatInterface?.processDirectMessage(command),\n\n      // Usuário IA\n      getAIUser: () => this.components.aiUserManager?.getAIUser(),\n      getAIUserStats: () => this.components.aiUserManager?.getAIUserStats(),\n\n      // Utilitários\n      approvePermission: (action) => this.approvePermission(action),\n      denyPermission: (action) => this.denyPermission(action),\n      resetModule: () => this.resetModule(),\n\n      // Interface de configuração\n      openConfig: () => ConfigInterface.show(this)\n    }\n\n    // Expor API globalmente\n    window.aiAssistantAPI = api\n\n    console.log('AI Assistant | API pública configurada')\n  }\n\n  // ========== MÉTODOS PÚBLICOS ==========\n\n  async setProvider (providerName) {\n    const provider = this.providers.get(providerName)\n    if (!provider) {\n      throw new Error(`Provedor \"${providerName}\" não encontrado`)\n    }\n\n    this.currentProvider = provider\n    this.config.defaultProvider = providerName\n\n    // Atualizar interface de chat\n    if (this.components.chatInterface) {\n      await this.components.chatInterface.setAIProvider(providerName)\n    }\n\n    // Salvar configuração\n    await this.saveConfiguration()\n\n    console.log(`AI Assistant | Provedor alterado para: ${provider.name}`)\n  }\n\n  async approvePermission (action) {\n    if (this.components.permissionManager) {\n      await this.components.permissionManager.grantPermission(action, true, { force: true })\n      console.log(`AI Assistant | Permissão \"${action}\" aprovada para a IA`)\n    }\n  }\n\n  async denyPermission (action) {\n    if (this.components.permissionManager) {\n      await this.components.permissionManager.grantPermission(action, false, { force: true })\n      console.log(`AI Assistant | Permissão \"${action}\" negada para a IA`)\n    }\n  }\n\n  async resetModule () {\n    console.warn('AI Assistant | Resetando módulo...')\n\n    try {\n      // Reset de componentes\n      if (this.components.permissionManager) {\n        await this.components.permissionManager.resetToDefault()\n      }\n\n      // Limpar provedores\n      for (const provider of this.providers.values()) {\n        if (provider.cleanup) {\n          provider.cleanup()\n        }\n      }\n\n      // Recarregar configurações\n      await this.loadConfiguration()\n\n      console.log('AI Assistant | Módulo resetado com sucesso')\n    } catch (error) {\n      console.error('AI Assistant | Erro ao resetar módulo:', error)\n    }\n  }\n\n  async saveConfiguration () {\n    try {\n      if (typeof game !== 'undefined' && game.settings) {\n        await game.settings.set('foundryvtt-ai-assistant', 'config', this.config)\n        console.log('AI Assistant | Configuração salva no FoundryVTT')\n      } else {\n        // Fallback para desenvolvimento/testes\n        localStorage.setItem('ai-assistant-config', JSON.stringify(this.config))\n        console.log('AI Assistant | Configuração salva (modo desenvolvimento)')\n      }\n    } catch (error) {\n      console.error('AI Assistant | Erro ao salvar configuração:', error)\n    }\n  }\n\n  getStats () {\n    const stats = {\n      initialized: this.initialized,\n      enabled: this.config.enabled,\n      uptime: Date.now() - this.startTime,\n      currentProvider: this.currentProvider?.name || null,\n      availableProviders: Array.from(this.providers.keys()),\n      components: {}\n    }\n\n    // Estatísticas dos componentes\n    if (this.components.permissionManager) {\n      stats.components.permissions = this.components.permissionManager.getStats()\n    }\n\n    if (this.components.aiUserManager) {\n      stats.components.aiUser = this.components.aiUserManager.getAIUserStats()\n    }\n\n    if (this.components.apiHandler) {\n      stats.components.apiHandler = this.components.apiHandler.getStats()\n    }\n\n    if (this.components.chatInterface) {\n      stats.components.chatInterface = this.components.chatInterface.getStats()\n    }\n\n    // Estatísticas dos provedores\n    stats.providers = {}\n    for (const [name, provider] of this.providers.entries()) {\n      if (provider.getStats) {\n        stats.providers[name] = provider.getStats()\n      }\n    }\n\n    return stats\n  }\n\n  notifyInitialization () {\n    const providerCount = this.providers.size\n    const message = `AI Assistant inicializado com ${providerCount} provedor(es) de IA`\n\n    console.log(`AI Assistant | ${message}`)\n  }\n\n  // Método para demonstração - processar comando diretamente\n  async processTestCommand (command) {\n    if (this.components.chatInterface) {\n      await this.components.chatInterface.processDirectMessage(command)\n    }\n  }\n\n  // Método para demonstração - obter status completo\n  getFullStatus () {\n    return {\n      module: {\n        initialized: this.initialized,\n        uptime: Date.now() - this.startTime,\n        config: this.config\n      },\n      components: {\n        permissionManager: this.components.permissionManager?.getStats(),\n        aiUserManager: this.components.aiUserManager?.getAIUserStats(),\n        apiHandler: this.components.apiHandler?.getStats(),\n        chatInterface: this.components.chatInterface?.getStats()\n      },\n      providers: Object.fromEntries(\n        Array.from(this.providers.entries()).map(([name, provider]) => [\n          name,\n          provider.getStats ? provider.getStats() : { name: provider.name }\n        ])\n      )\n    }\n  }\n}\n\n// ========== INICIALIZAÇÃO DO MÓDULO ==========\n\n// Instância global do módulo\nlet aiAssistant = null\n\n// Função de inicialização\nasync function initializeAIAssistant () {\n  console.log('AI Assistant | Iniciando inicialização...')\n\n  try {\n    aiAssistant = new AIAssistant()\n    await aiAssistant.initialize()\n\n    // Expor instância globalmente\n    window.aiAssistant = aiAssistant\n\n    return aiAssistant\n  } catch (error) {\n    console.error('AI Assistant | Falha na inicialização:', error)\n    throw error\n  }\n}\n\n// Inicialização usando hooks reais do FoundryVTT\nif (typeof Hooks !== 'undefined') {\n  // Hook de inicialização do FoundryVTT\n  Hooks.once('init', initializeAIAssistant)\n\n  // Hook quando o jogo está pronto\n  Hooks.once('ready', () => {\n    if (aiAssistant && aiAssistant.initialized) {\n      console.log('AI Assistant | Módulo pronto para uso!')\n\n      // Notificar usuários se habilitado\n      if (aiAssistant.config.enabled && game.user.isGM) {\n        ui.notifications.info('AI Assistant carregado com sucesso!')\n      }\n    }\n  })\n} else {\n  // Fallback para desenvolvimento/testes\n  initializeAIAssistant().then(() => {\n    console.log('AI Assistant | Módulo pronto para uso (modo desenvolvimento)!')\n\n    // Demonstrar funcionalidades\n    console.log('AI Assistant | Estatísticas:', aiAssistant.getStats())\n    console.log('AI Assistant | API disponível em window.aiAssistantAPI')\n    console.log('AI Assistant | Instância disponível em window.aiAssistant')\n  }).catch(error => {\n    console.error('AI Assistant | Erro na inicialização:', error)\n  })\n}\n\n// Exportar para uso em outros módulos\nexport { AIAssistant, initializeAIAssistant }\n"],"names":["AIUserManager","constructor","this","aiUser","aiUserId","sessionData","Map","lastActivity","sessionTimeout","initialize","console","log","findExistingAIUser","name","id","validateAIUser","createAIUser","setupSessionMonitoring","updateActivity","error","game","users","find","u","getFlag","validateUserData","user","undefined","get","warn","options","defaultOptions","avatar","color","role","CONST","USER_ROLES","PLAYER","userData","foundry","utils","mergeObject","Date","now","User","create","setFlag","setupInitialPermissions","notifyUserCreation","Error","message","permissions","ACTOR_CREATE","DRAWING_CREATE","ITEM_CREATE","JOURNAL_CREATE","MACRO_SCRIPT","MESSAGE_WHISPER","NOTE_CREATE","SETTINGS_MODIFY","SHOW_CURSOR","SHOW_RULER","TEMPLATE_CREATE","TOKEN_CREATE","TOKEN_CONFIGURE","WALL_DOORS","currentUser","updateAIUserPermissions","updatedPermissions","logPermissionChange","changeLog","push","timestamp","changes","changedBy","length","splice","deleteAIUser","confirm","userName","cleanupUserData","delete","clear","ui","notifications","info","messages","filter","m","collections","actors","items","scenes","journal","macros","collection","document","contents","ownership","update","setInterval","checkSessionTimeout","refreshSession","messageData","content","type","CHAT_MESSAGE_TYPES","OTHER","speaker","alias","ChatMessage","getAIUser","getAIUserId","isInitialized","getSessionData","key","setSessionData","value","set","clearSessionData","getAIUserStats","createdAt","sessionActive","permissionHistory","version","APIHandler","permissionManager","logger","initialized","operationQueue","isProcessingQueue","validateFoundryAPIs","setupDefaultTemplates","startQueueProcessor","requiredAPIs","api","getProperty","window","templates","actor","character","system","abilities","str","dex","con","int","wis","cha","attributes","hp","max","ac","details","level","xp","npc","cr","item","weapon","weaponType","damage","parts","properties","finesse","light","spell","school","components","verbal","somatic","material","async","processOperationQueue","operation","shift","executeOperation","result","execute","callback","queueOperation","Promise","resolve","reject","createActor","data","startTime","checkPermission","validateActorData","inplace","checkDuplicates","a","allowDuplicates","Actor","duration","actorId","success","updateActor","updates","updatedFields","Object","keys","deleteActor","hasPlayerOwner","force","actorName","queryActors","filters","nameRegex","RegExp","test","limit","slice","results","map","img","count","isUpdate","includes","createItem","validateItemData","createEmbeddedDocuments","Item","itemId","updateItem","createScene","validateSceneData","scene","Scene","sceneId","activateScene","activate","createJournalEntry","validateJournalData","JournalEntry","journalId","createMacro","validateMacroData","macro","Macro","macroId","executeMacro","args","command","rollDice","formula","roll","Roll","evaluate","toChat","toMessage","flavor","total","getStats","queueLength","size","tables","playlists","PermissionManager","permissionLevels","temporaryPermissions","definePermissionLevels","loadPermissions","setDefaultPermissions","startTemporaryPermissionCleanup","description","sendMessage","sendWhisper","queryItems","queryScenes","queryJournal","queryMacros","queryTables","queryPlaylists","queryCompendium","viewDocuments","deleteItem","createJournal","updateJournal","deleteJournal","updateMacro","importFromCompendium","updateScene","deleteScene","createRollTable","updateRollTable","deleteRollTable","rollTable","createPlaylist","updatePlaylist","deletePlaylist","playAudio","createToken","updateToken","deleteToken","manageCombat","manageUsers","modifySettings","manageModules","deleteAnyDocument","executeArbitraryCode","modifyPermissions","accessFileSystem","networkAccess","savedPermissions","getStoredPermissions","savedLevel","getStoredPermissionLevel","setPermissionLevel","permission","entries","JSON","parse","localStorage","getItem","savePermissions","permissionsObj","fromEntries","setItem","stringify","levelName","notifyPermissionChange","action","tempPermission","expires","granted","hasPermission","debug","grantPermission","oldValue","temporary","revokePermission","grantTemporaryPermission","grantedAt","grantedBy","setTimeout","requestPermission","reason","autoApprove","isBasicPermission","pending","levelDisplayName","newValue","logEntry","expired","canCreateActors","canDeleteActors","canModifyScenes","canExecuteMacros","canManageUsers","getCurrentPermissionLevel","getAvailablePermissionLevels","Array","from","getActivePermissions","active","remaining","getPermissionHistory","currentLevel","totalPermissions","activePermissions","historyEntries","resetToDefault","validatePermissionRequest","context","valid","requiresGMApproval","ChatInterface","apiHandler","aiUserManager","commandPrefix","commands","conversationHistory","activeConversations","aiProviders","currentProvider","registerCommands","setupChatListeners","loadAIProviders","setDefaultProvider","usage","handler","handleHelpCommand","bind","handleStatusCommand","handleRollCommand","handleCreateCommand","handleSearchCommand","handleMacroCommand","handleSceneCommand","handleConfigCommand","handleChatCommand","simulateFoundryHooks","onChatMessage","userId","startsWith","processCommand","isMentionedInMessage","processAIMention","isRelevantMessage","addToConversationHistory","sendErrorMessage","originalMessage","trim","split","commandName","cleanContent","replace","handleFreeConversation","helpText","cmd","join","aiUserStats","permissionStats","apiStats","statusText","toLocaleString","toLowerCase","dataString","searchTerm","actorList","macroName","macroArgs","params","sceneData","option","setAIProvider","toUpperCase","buildConversationContext","response","processMessage","recentHistory","worldContext","getWorldContext","activeScene","playerCount","systemName","providerName","provider","whisper","targetUserId","commandsRegistered","conversationHistoryLength","availableProviders","processDirectMessage","mockMessage","ManusProvider","config","apiKey","process","env","MANUS_API_KEY","baseUrl","model","maxTokens","temperature","rateLimiter","requestHistory","testConnection","fetch","method","headers","Authorization","ok","status","json","checkRateLimit","prompt","buildPrompt","makeAPIRequest","processedResponse","processResponse","addToHistory","systemPrompt","getSystemPrompt","formatConversationHistory","formatWorldContext","max_tokens","stream","history","msg","body","errorData","catch","apiResponse","choices","choice","processSpecialCommands","substring","match","tokens","cutoff","recentRequests","values","time","forEach","index","generateNPC","specialRequest","explainRule","rule","generateDescription","subject","updateConfig","newConfig","getConfig","hasApiKey","req","totalRequests","averageResponseTime","calculateAverageResponseTime","rateLimitStatus","current","windowMs","totalTime","reduce","sum","responseTime","Math","round","cleanup","OpenAIProvider","OPENAI_API_KEY","tokenUsage","completion","updateTokenUsage","presence_penalty","frequency_penalty","finish_reason","term","total_tokens","prompt_tokens","completion_tokens","generateEncounter","difficulty","environment","partyLevel","generateLoot","challenge","avgResponseTime","avgTokensPerRequest","averageTokensPerRequest","estimatedCost","calculateEstimatedCost","costs","modelCost","promptCost","completionCost","currency","ConfigInterface","FormApplication","aiAssistant","super","title","template","width","height","closeOnSubmit","submitOnChange","submitOnClose","resizable","classes","getData","enabled","debugMode","autoCreateAIUser","defaultPermissionLevel","rateLimitEnabled","maxRequestsPerMinute","showStatusInChat","compactMode","conversationHistoryLimit","providers","getProviderOptions","providerConfigs","getProviderConfigs","getPermissionLevels","defaultProvider","selected","configs","manus","models","openai","activateListeners","html","click","_onTestConnection","_onResetConfig","on","_onApiKeyInput","event","preventDefault","button","currentTarget","dataset","originalText","textContent","disabled","formData","FormData","form","providerInstance","Dialog","yes","no","resetModule","render","input","style","borderColor","_updateObject","expandObject","saveConfiguration","initializeProviders","setProvider","show","AIAssistant","loadConfiguration","initializeComponents","setupFoundryHooks","registerModuleSettings","setupPublicAPI","Hooks","chatLog","chatData","isGM","registerConfigCommand","initTime","notifyInitialization","respondToMentions","requireGMApprovalForDangerous","showPermissionRequests","savedConfig","getStoredConfig","settings","chatInterface","manusProvider","openaiProvider","defaultProviderName","firstProvider","next","app","onChatLogRender","onActorUpdate","register","hint","scope","default","Boolean","onChange","disable","String","getProviders","getCurrentProvider","approvePermission","denyPermission","openConfig","aiAssistantAPI","stats","uptime","processTestCommand","getFullStatus","module","initializeAIAssistant","once","then"],"sourceRoot":""}
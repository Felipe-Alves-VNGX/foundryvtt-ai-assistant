{"version":3,"file":"index.js","mappings":"AAKO,MAAMA,cACTC,WAAAA,GACIC,KAAKC,OAAS,KACdD,KAAKE,SAAW,KAChBF,KAAKG,YAAc,IAAIC,IACvBJ,KAAKK,aAAe,KACpBL,KAAKM,eAAiB,IAC1B,CAEA,gBAAMC,GACFC,QAAQC,IAAI,iDAEZ,IAEIT,KAAKC,aAAeD,KAAKU,qBAEpBV,KAAKC,QAINO,QAAQC,IAAI,wCAAyCT,KAAKC,OAAOU,MACjEX,KAAKE,SAAWF,KAAKC,OAAOW,SACtBZ,KAAKa,mBALXL,QAAQC,IAAI,8DACNT,KAAKc,gBAQfd,KAAKe,yBAGLf,KAAKgB,gBAET,CAAE,MAAOC,GAEL,MADAT,QAAQS,MAAM,yDAA0DA,GAClEA,CACV,CACJ,CAEA,wBAAMP,GAEF,MAAMT,EAASiB,KAAKC,MAAMC,KAAKC,GAAKA,EAAEC,QAAQ,0BAA2B,aAEzE,GAAIrB,EAAQ,CAGR,aADsBD,KAAKuB,iBAAiBtB,GAC3BA,EAAS,IAC9B,CAEA,OAAO,IACX,CAEA,sBAAMsB,CAAiBC,GACnB,IAEI,IAAKA,IAASA,EAAKZ,KAAOY,EAAKb,KAAM,OAAO,EAI5C,IADiBa,EAAKF,QAAQ,0BAA2B,YAC1C,OAAO,EAItB,YAAuBG,IADHP,KAAKC,MAAMO,IAAIF,EAAKZ,GAG5C,CAAE,MAAOK,GAEL,OADAT,QAAQmB,KAAK,+CAAgDV,IACtD,CACX,CACJ,CAEA,kBAAMH,CAAac,EAAU,CAAC,GAC1B,MAAMC,EAAiB,CACnBlB,KAAM,eACNmB,OAAQ,sBACRC,MAAO,UACPC,KAAMC,MAAMC,WAAWC,QAGrBC,EAAWC,QAAQC,MAAMC,YAAYV,EAAgBD,GAE3D,IAwBI,OAtBqBV,KAAKC,MAAMC,KAAKC,GAAKA,EAAEV,OAASyB,EAASzB,QAE1DyB,EAASzB,KAAO,GAAGyB,EAASzB,SAAS6B,KAAKC,UAI9CzC,KAAKC,aAAeyC,KAAKC,OAAOP,GAChCpC,KAAKE,SAAWF,KAAKC,OAAOW,SAGtBZ,KAAKC,OAAO2C,QAAQ,0BAA2B,YAAY,SAC3D5C,KAAKC,OAAO2C,QAAQ,0BAA2B,YAAaJ,KAAKC,aACjEzC,KAAKC,OAAO2C,QAAQ,0BAA2B,UAAW,eAG1D5C,KAAK6C,0BAEXrC,QAAQC,IAAI,gDAAiDT,KAAKC,OAAOU,YAGnEX,KAAK8C,qBAEJ9C,KAAKC,MAEhB,CAAE,MAAOgB,GAEL,MADAT,QAAQS,MAAM,2CAA4CA,GACpD,IAAI8B,MAAM,8BAA8B9B,EAAM+B,UACxD,CACJ,CAEA,6BAAMH,GACF,GAAK7C,KAAKC,OAEV,IAEI,MAAMgD,EAAc,CAChBC,cAAc,EACdC,gBAAgB,EAChBC,aAAa,EACbC,gBAAgB,EAChBC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,iBAAiB,EACjBC,aAAa,EACbC,YAAY,EACZC,iBAAiB,EACjBC,cAAc,EACdC,iBAAiB,EACjBC,YAAY,SAIV/D,KAAKC,OAAO2C,QAAQ,0BAA2B,cAAeK,GAEpEzC,QAAQC,IAAI,kDAEhB,CAAE,MAAOQ,GACLT,QAAQS,MAAM,gDAAiDA,EACnE,CACJ,CAEA,oBAAMJ,GACF,IAAKb,KAAKC,OAAQ,OAAO,EAEzB,IAEI,MAAM+D,EAAc9C,KAAKC,MAAMO,IAAI1B,KAAKE,UACxC,IAAK8D,EAGD,OAFAxD,QAAQmB,KAAK,gEACP3B,KAAKc,gBACJ,EAaX,OATiBkD,EAAY1C,QAAQ,0BAA2B,cAE5Dd,QAAQmB,KAAK,mEACPqC,EAAYpB,QAAQ,0BAA2B,YAAY,IAIrE5C,KAAKC,OAAS+D,GAEP,CAEX,CAAE,MAAO/C,GAEL,OADAT,QAAQS,MAAM,kDAAmDA,IAC1D,CACX,CACJ,CAEA,6BAAMgD,CAAwBhB,GAC1B,IAAKjD,KAAKC,OACN,MAAM,IAAI8C,MAAM,+BAGpB,IAEI,MACMmB,EAAqB,IADAlE,KAAKC,OAAOqB,QAAQ,0BAA2B,gBAAkB,CAAC,KACtC2B,SAEjDjD,KAAKC,OAAO2C,QAAQ,0BAA2B,cAAesB,GAGpE1D,QAAQC,IAAI,yCAA0CwC,SAGhDjD,KAAKmE,oBAAoBlB,EAEnC,CAAE,MAAOhC,GAEL,MADAT,QAAQS,MAAM,+CAAgDA,GACxDA,CACV,CACJ,CAEA,yBAAMkD,CAAoBlB,GACtB,MAAMmB,EAAYpE,KAAKC,OAAOqB,QAAQ,0BAA2B,sBAAwB,GAEzF8C,EAAUC,KAAK,CACXC,UAAW9B,KAAKC,MAChB8B,QAAStB,EACTuB,UAAWtD,KAAKM,KAAKZ,KAIrBwD,EAAUK,OAAS,IACnBL,EAAUM,OAAO,EAAGN,EAAUK,OAAS,UAGrCzE,KAAKC,OAAO2C,QAAQ,0BAA2B,oBAAqBwB,EAC9E,CAEA,kBAAMO,CAAaC,GAAU,GACzB,IAAKA,EACD,MAAM,IAAI7B,MAAM,kDAGpB,GAAK/C,KAAKC,OAKV,IACI,MAAM4E,EAAW7E,KAAKC,OAAOU,KACdX,KAAKE,eAGdF,KAAK8E,wBAGL9E,KAAKC,OAAO8E,SAGlB/E,KAAKC,OAAS,KACdD,KAAKE,SAAW,KAChBF,KAAKG,YAAY6E,QAEjBxE,QAAQC,IAAI,sCAAuCoE,GAGnDI,GAAGC,cAAcC,KAAK,eAAeN,kBAEzC,CAAE,MAAO5D,GAEL,MADAT,QAAQS,MAAM,6CAA8CA,GACtDA,CACV,MA3BIT,QAAQmB,KAAK,gDA4BrB,CAEA,qBAAMmD,GACF,GAAK9E,KAAKC,OAEV,IAEI,MAAMmF,EAAWlE,KAAKkE,SAASC,OAAOC,GAAKA,EAAE9D,MAAMZ,KAAOZ,KAAKE,UAC/D,IAAK,MAAM8C,KAAWoC,QACZpC,EAAQ+B,SAIlB,MAAMQ,EAAc,CAACrE,KAAKsE,OAAQtE,KAAKuE,MAAOvE,KAAKwE,OAAQxE,KAAKyE,QAASzE,KAAK0E,QAE9E,IAAK,MAAMC,KAAcN,EACrB,IAAK,MAAMO,KAAYD,EAAWE,SAC9B,GAAID,EAASE,YAAYhG,KAAKE,UAAW,CACrC,MAAM8F,EAAY,IAAKF,EAASE,kBACzBA,EAAUhG,KAAKE,gBAChB4F,EAASG,OAAO,CAAED,aAC5B,CAIRxF,QAAQC,IAAI,4CAEhB,CAAE,MAAOQ,GACLT,QAAQS,MAAM,2CAA4CA,EAC9D,CACJ,CAEAF,sBAAAA,GAEImF,YAAY,KACRlG,KAAKmG,uBACN,IACP,CAEAA,mBAAAA,GACI,IAAKnG,KAAKK,aAAc,OAEZmC,KAAKC,MACezC,KAAKK,aAEbL,KAAKM,iBACzBE,QAAQC,IAAI,gDACZT,KAAKoG,iBAEb,CAEA,oBAAMA,GACF,UACUpG,KAAKa,iBACXb,KAAKgB,iBACLR,QAAQC,IAAI,iCAChB,CAAE,MAAOQ,GACLT,QAAQS,MAAM,yCAA0CA,EAC5D,CACJ,CAEAD,cAAAA,GACIhB,KAAKK,aAAemC,KAAKC,KAC7B,CAEA,wBAAMK,GACF,MAAMuD,EAAc,CAChBC,QAAS,qFACTC,KAAMtE,MAAMuE,mBAAmBC,MAC/BC,QAAS,CACLC,MAAO,kBAITC,YAAYjE,OAAO0D,EAC7B,CAGAQ,SAAAA,GACI,OAAO7G,KAAKC,MAChB,CAEA6G,WAAAA,GACI,OAAO9G,KAAKE,QAChB,CAEA6G,aAAAA,GACI,OAAuB,OAAhB/G,KAAKC,QAAqC,OAAlBD,KAAKE,QACxC,CAEA8G,cAAAA,CAAeC,GACX,OAAOjH,KAAKG,YAAYuB,IAAIuF,EAChC,CAEAC,cAAAA,CAAeD,EAAKE,GAChBnH,KAAKG,YAAYiH,IAAIH,EAAKE,GAC1BnH,KAAKgB,gBACT,CAEAqG,gBAAAA,GACIrH,KAAKG,YAAY6E,OACrB,CAEA,oBAAMsC,GACF,IAAKtH,KAAKC,OAAQ,OAAO,KAEzB,IAWI,MAVc,CACVW,GAAIZ,KAAKE,SACTS,KAAMX,KAAKC,OAAOU,KAClB4G,UAAWvH,KAAKC,OAAOqB,QAAQ,0BAA2B,aAC1DjB,aAAcL,KAAKK,aACnBmH,cAAexH,KAAKK,cAAiBmC,KAAKC,MAAQzC,KAAKK,aAAgBL,KAAKM,eAC5EmH,kBAAmBzH,KAAKC,OAAOqB,QAAQ,0BAA2B,sBAAwB,GAC1FoG,QAAS1H,KAAKC,OAAOqB,QAAQ,0BAA2B,WAKhE,CAAE,MAAOL,GAEL,OADAT,QAAQS,MAAM,6CAA8CA,GACrD,IACX,CACJ,ECnXG,MAAM0G,WACT5H,WAAAA,CAAY6H,EAAmBC,GAC3B7H,KAAK4H,kBAAoBA,EACzB5H,KAAK6H,OAASA,EACd7H,KAAK8H,aAAc,EACnB9H,KAAK+H,eAAiB,GACtB/H,KAAKgI,mBAAoB,CAC7B,CAEA,gBAAMzH,GACFC,QAAQC,IAAI,8CAEZ,IAEIT,KAAKiI,sBAGLjI,KAAKkI,wBAGLlI,KAAKmI,sBAELnI,KAAK8H,aAAc,EACnBtH,QAAQC,IAAI,qDAEhB,CAAE,MAAOQ,GAEL,MADAT,QAAQS,MAAM,sDAAuDA,GAC/DA,CACV,CACJ,CAEAgH,mBAAAA,GACI,MAAMG,EAAe,CAAC,cAAe,aAAc,cAAe,eAAgB,cAAe,cAAe,kBAEhH,IAAK,MAAMC,KAAOD,EACd,IAAK/F,QAAQC,MAAMgG,YAAYC,OAAQF,GACnC,MAAM,IAAItF,MAAM,kCAAkCsF,IAG9D,CAEAH,qBAAAA,GACIlI,KAAKwI,UAAY,CACbC,MAAO,CACHC,UAAW,CACPnC,KAAM,YACNoC,OAAQ,CACJC,UAAW,CACPC,IAAK,CAAE1B,MAAO,IAAM2B,IAAK,CAAE3B,MAAO,IAAM4B,IAAK,CAAE5B,MAAO,IACtD6B,IAAK,CAAE7B,MAAO,IAAM8B,IAAK,CAAE9B,MAAO,IAAM+B,IAAK,CAAE/B,MAAO,KAE1DgC,WAAY,CAAEC,GAAI,CAAEjC,MAAO,EAAGkC,IAAK,GAAKC,GAAI,CAAEnC,MAAO,KACrDoC,QAAS,CAAEC,MAAO,CAAErC,MAAO,GAAKsC,GAAI,CAAEtC,MAAO,MAGrDuC,IAAK,CACDnD,KAAM,MACNoC,OAAQ,CACJC,UAAW,CACPC,IAAK,CAAE1B,MAAO,IAAM2B,IAAK,CAAE3B,MAAO,IAAM4B,IAAK,CAAE5B,MAAO,IACtD6B,IAAK,CAAE7B,MAAO,IAAM8B,IAAK,CAAE9B,MAAO,IAAM+B,IAAK,CAAE/B,MAAO,KAE1DgC,WAAY,CAAEC,GAAI,CAAEjC,MAAO,EAAGkC,IAAK,GAAKC,GAAI,CAAEnC,MAAO,KACrDoC,QAAS,CAAEI,GAAI,KAAOpD,KAAM,CAAEY,MAAO,gBAIjDyC,KAAM,CACFC,OAAQ,CACJtD,KAAM,SACNoC,OAAQ,CACJmB,WAAY,UACZC,OAAQ,CAAEC,MAAO,CAAC,CAAC,MAAO,cAC1BC,WAAY,CAAEC,SAAS,EAAOC,OAAO,KAG7CC,MAAO,CACH7D,KAAM,QACNoC,OAAQ,CACJa,MAAO,EACPa,OAAQ,YACRC,WAAY,CAAEC,QAAQ,EAAMC,SAAS,EAAMC,UAAU,MAKzE,CAEAtC,mBAAAA,GACIjC,YAAYwE,WACH1K,KAAKgI,mBAAqBhI,KAAK+H,eAAetD,OAAS,SAClDzE,KAAK2K,yBAEhB,IACP,CAEA,2BAAMA,GACF3K,KAAKgI,mBAAoB,EAEzB,IACI,KAAOhI,KAAK+H,eAAetD,OAAS,GAAG,CACnC,MAAMmG,EAAY5K,KAAK+H,eAAe8C,cAChC7K,KAAK8K,iBAAiBF,EAChC,CACJ,CAAE,MAAO3J,GACLT,QAAQS,MAAM,gDAAiDA,EACnE,CAAE,QACEjB,KAAKgI,mBAAoB,CAC7B,CACJ,CAEA,sBAAM8C,CAAiBF,GACnB,IACI,MAAMG,QAAeH,EAAUI,UAC3BJ,EAAUK,UACVL,EAAUK,SAAS,KAAMF,EAEjC,CAAE,MAAO9J,GACD2J,EAAUK,UACVL,EAAUK,SAAShK,EAAO,KAElC,CACJ,CAEAiK,cAAAA,CAAeN,GACX,OAAO,IAAIO,QAAQ,CAACC,EAASC,KACzBrL,KAAK+H,eAAe1D,KAAK,IAClBuG,EACHK,SAAUA,CAAChK,EAAO8J,KACV9J,EAAOoK,EAAOpK,GACbmK,EAAQL,OAI7B,CAIA,iBAAMO,CAAYC,EAAM3J,EAAU,CAAC,GAC/B,OAAO5B,KAAKkL,eAAe,CACvBF,QAASN,UACL,MAAMc,EAAYhJ,KAAKC,MAEvB,IAEI,IAAKzC,KAAK4H,kBAAkB6D,gBAAgB,eACxC,MAAM,IAAI1I,MAAM,4CAYpB,GARA/C,KAAK0L,kBAAkBH,IAGlBA,EAAK5C,QAAU4C,EAAKhF,MAAQvG,KAAKwI,UAAUC,MAAM8C,EAAKhF,QACvDgF,EAAOlJ,QAAQC,MAAMC,YAAYvC,KAAKwI,UAAUC,MAAM8C,EAAKhF,MAAOgF,EAAM,CAAEI,SAAS,MAIvD,IAA5B/J,EAAQgK,gBAA2B,CAEnC,GADiB1K,KAAKsE,OAAOpE,KAAKyK,GAAKA,EAAElL,OAAS4K,EAAK5K,QACtCiB,EAAQkK,gBACrB,MAAM,IAAI/I,MAAM,kBAAkBwI,EAAK5K,kBAE/C,CAGA,MAAM8H,QAAcsD,MAAMpJ,OAAO4I,GAG3BS,EAAWxJ,KAAKC,MAAQ+I,EAQ9B,OAPAxL,KAAK6H,QAAQ1C,KAAK,cAAe,CAC7B8G,QAASxD,EAAM7H,GACfD,KAAM8H,EAAM9H,KACZ4F,KAAMkC,EAAMlC,KACZyF,SAAU,GAAGA,QAGV,CACHE,SAAS,EACTzD,MAAOA,EACPzF,QAAS,SAASyF,EAAM9H,2BAGhC,CAAE,MAAOM,GAEL,OADAjB,KAAK6H,QAAQ5G,MAAM,qBAAsB,CAAEA,MAAOA,EAAM+B,QAASuI,SAC1D,CACHW,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,uBAAuB/B,EAAM+B,UAE9C,IAGZ,CAEA,iBAAMmJ,CAAYF,EAASG,EAASxK,EAAU,CAAC,GAC3C,OAAO5B,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,eACxC,MAAM,IAAI1I,MAAM,gDAGpB,MAAM0F,EAAQvH,KAAKsE,OAAO9D,IAAIuK,GAC9B,IAAKxD,EACD,MAAM,IAAI1F,MAAM,gBAAgBkJ,qBAcpC,OAVAjM,KAAK0L,kBAAkBU,GAAS,SAE1B3D,EAAMxC,OAAOmG,GAEnBpM,KAAK6H,QAAQ1C,KAAK,kBAAmB,CACjC8G,QAASxD,EAAM7H,GACfD,KAAM8H,EAAM9H,KACZ0L,cAAeC,OAAOC,KAAKH,KAGxB,CACHF,SAAS,EACTzD,MAAOA,EACPzF,QAAS,SAASyF,EAAM9H,+BAGhC,CAAE,MAAOM,GAEL,OADAjB,KAAK6H,QAAQ5G,MAAM,yBAA0B,CAAEgL,UAAShL,MAAOA,EAAM+B,UAC9D,CACHkJ,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,2BAA2B/B,EAAM+B,UAElD,IAGZ,CAEA,iBAAMwJ,CAAYP,EAASrK,EAAU,CAAC,GAClC,OAAO5B,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,eACxC,MAAM,IAAI1I,MAAM,8CAGpB,MAAM0F,EAAQvH,KAAKsE,OAAO9D,IAAIuK,GAC9B,IAAKxD,EACD,MAAM,IAAI1F,MAAM,gBAAgBkJ,qBAIpC,GAAmB,cAAfxD,EAAMlC,MAAwBkC,EAAMgE,iBAAmB7K,EAAQ8K,MAC/D,MAAM,IAAI3J,MAAM,gEAGpB,MAAM4J,EAAYlE,EAAM9H,KAKxB,aAJM8H,EAAM1D,SAEZ/E,KAAK6H,QAAQ1C,KAAK,gBAAiB,CAAE8G,UAAStL,KAAMgM,IAE7C,CACHT,SAAS,EACTlJ,QAAS,SAAS2J,0BAG1B,CAAE,MAAO1L,GAEL,OADAjB,KAAK6H,QAAQ5G,MAAM,uBAAwB,CAAEgL,UAAShL,MAAOA,EAAM+B,UAC5D,CACHkJ,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,yBAAyB/B,EAAM+B,UAEhD,IAGZ,CAEA,iBAAM4J,CAAYC,EAAU,CAAC,EAAGjL,EAAU,CAAC,GACvC,IACI,IAAK5B,KAAK4H,kBAAkB6D,gBAAgB,eACxC,MAAM,IAAI1I,MAAM,6CAGpB,IAAIyC,EAAStE,KAAKsE,OAAOO,SAGzB,GAAI8G,EAAQlM,KAAM,CACd,MAAMmM,EAAY,IAAIC,OAAOF,EAAQlM,KAAM,KAC3C6E,EAASA,EAAOH,OAAOoD,GAASqE,EAAUE,KAAKvE,EAAM9H,MACzD,CAEIkM,EAAQtG,OACRf,EAASA,EAAOH,OAAOoD,GAASA,EAAMlC,OAASsG,EAAQtG,OAGvDsG,EAAQrD,QACRhE,EAASA,EAAOH,OAAOoD,IACnB,MAAMe,EAAQf,EAAME,QAAQY,SAASC,OAAOrC,MAC5C,OAAOqC,IAAUqD,EAAQrD,SAK7B5H,EAAQqL,QACRzH,EAASA,EAAO0H,MAAM,EAAGtL,EAAQqL,QAIrC,MAAME,EAAU3H,EAAO4H,IAAI3E,IAAS,CAChC7H,GAAI6H,EAAM7H,GACVD,KAAM8H,EAAM9H,KACZ4F,KAAMkC,EAAMlC,KACZ8G,IAAK5E,EAAM4E,IACX7D,MAAOf,EAAME,QAAQY,SAASC,OAAOrC,MACrCiC,GAAIX,EAAME,QAAQQ,YAAYC,MAGlC,MAAO,CACH8C,SAAS,EACT1G,OAAQ2H,EACRG,MAAOH,EAAQ1I,OACfzB,QAAS,eAAemK,EAAQ1I,kBAGxC,CAAE,MAAOxD,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,kBAAkB/B,EAAM+B,UAEzC,CACJ,CAEA0I,iBAAAA,CAAkBH,EAAMgC,GAAW,GAC/B,IAAKA,IAAahC,EAAK5K,KACnB,MAAM,IAAIoC,MAAM,sBAGpB,GAAIwI,EAAK5K,OAAS4K,EAAK5K,KAAK8D,OAAS,GAAK8G,EAAK5K,KAAK8D,OAAS,IACzD,MAAM,IAAI1B,MAAM,yCAGpB,IAAKwK,IAAahC,EAAKhF,KACnB,MAAM,IAAIxD,MAAM,sBAGpB,GAAIwI,EAAKhF,OAAS,CAAC,YAAa,MAAO,WAAWiH,SAASjC,EAAKhF,MAC5D,MAAM,IAAIxD,MAAM,0CAExB,CAIA,gBAAM0K,CAAWlC,EAAMU,EAAU,KAAMrK,EAAU,CAAC,GAC9C,OAAO5B,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,cACxC,MAAM,IAAI1I,MAAM,2CAUpB,IAAI6G,EACJ,GARA5J,KAAK0N,iBAAiBnC,IAGjBA,EAAK5C,QAAU4C,EAAKhF,MAAQvG,KAAKwI,UAAUoB,KAAK2B,EAAKhF,QACtDgF,EAAOlJ,QAAQC,MAAMC,YAAYvC,KAAKwI,UAAUoB,KAAK2B,EAAKhF,MAAOgF,EAAM,CAAEI,SAAS,KAIlFM,EAAS,CACT,MAAMxD,EAAQvH,KAAKsE,OAAO9D,IAAIuK,GAC9B,IAAKxD,EACD,MAAM,IAAI1F,MAAM,gBAAgBkJ,qBAEpCrC,QAAanB,EAAMkF,wBAAwB,OAAQ,CAACpC,IACpD3B,EAAOA,EAAK,EAChB,MACIA,QAAagE,KAAKjL,OAAO4I,GAU7B,OAPAvL,KAAK6H,QAAQ1C,KAAK,cAAe,CAC7B0I,OAAQjE,EAAKhJ,GACbD,KAAMiJ,EAAKjJ,KACX4F,KAAMqD,EAAKrD,KACX0F,QAASA,IAGN,CACHC,SAAS,EACTtC,KAAMA,EACN5G,QAAS,SAAS4G,EAAKjJ,2BAG/B,CAAE,MAAOM,GAEL,OADAjB,KAAK6H,QAAQ5G,MAAM,qBAAsB,CAAEA,MAAOA,EAAM+B,QAASuI,SAC1D,CACHW,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,uBAAuB/B,EAAM+B,UAE9C,IAGZ,CAEA,gBAAM8K,CAAWD,EAAQzB,EAASH,EAAU,MACxC,OAAOjM,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,cACxC,MAAM,IAAI1I,MAAM,+CAGpB,IAAI6G,EACJ,GAAIqC,EAAS,CACT,MAAMxD,EAAQvH,KAAKsE,OAAO9D,IAAIuK,GAC9B,IAAKxD,EACD,MAAM,IAAI1F,MAAM,gBAAgBkJ,qBAEpCrC,EAAOnB,EAAMhD,MAAM/D,IAAImM,EAC3B,MACIjE,EAAO1I,KAAKuE,MAAM/D,IAAImM,GAG1B,IAAKjE,EACD,MAAM,IAAI7G,MAAM,gBAAgB8K,qBAKpC,aAFMjE,EAAK3D,OAAOmG,GAEX,CACHF,SAAS,EACTtC,KAAMA,EACN5G,QAAS,SAAS4G,EAAKjJ,+BAG/B,CAAE,MAAOM,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,2BAA2B/B,EAAM+B,UAElD,IAGZ,CAEA0K,gBAAAA,CAAiBnC,EAAMgC,GAAW,GAC9B,IAAKA,IAAahC,EAAK5K,KACnB,MAAM,IAAIoC,MAAM,sBAGpB,IAAKwK,IAAahC,EAAKhF,KACnB,MAAM,IAAIxD,MAAM,qBAExB,CAIA,iBAAMgL,CAAYxC,EAAM3J,EAAU,CAAC,GAC/B,OAAO5B,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,eACxC,MAAM,IAAI1I,MAAM,2CAGpB/C,KAAKgO,kBAAkBzC,GAEvB,MAAM0C,QAAcC,MAAMvL,OAAO4I,GAOjC,OALAvL,KAAK6H,QAAQ1C,KAAK,cAAe,CAC7BgJ,QAASF,EAAMrN,GACfD,KAAMsN,EAAMtN,OAGT,CACHuL,SAAS,EACT+B,MAAOA,EACPjL,QAAS,SAASiL,EAAMtN,2BAGhC,CAAE,MAAOM,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,uBAAuB/B,EAAM+B,UAE9C,IAGZ,CAEA,mBAAMoL,CAAcD,GAChB,OAAOnO,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,iBACxC,MAAM,IAAI1I,MAAM,4CAGpB,MAAMkL,EAAQ/M,KAAKwE,OAAOhE,IAAIyM,GAC9B,IAAKF,EACD,MAAM,IAAIlL,MAAM,gBAAgBoL,qBAKpC,aAFMF,EAAMI,WAEL,CACHnC,SAAS,EACT+B,MAAOA,EACPjL,QAAS,SAASiL,EAAMtN,4BAGhC,CAAE,MAAOM,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,wBAAwB/B,EAAM+B,UAE/C,IAGZ,CAEAgL,iBAAAA,CAAkBzC,EAAMgC,GAAW,GAC/B,IAAKA,IAAahC,EAAK5K,KACnB,MAAM,IAAIoC,MAAM,qBAExB,CAIA,wBAAMuL,CAAmB/C,EAAM3J,EAAU,CAAC,GACtC,OAAO5B,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,iBACxC,MAAM,IAAI1I,MAAM,wDAGpB/C,KAAKuO,oBAAoBhD,GAEzB,MAAM5F,QAAgB6I,aAAa7L,OAAO4I,GAO1C,OALAvL,KAAK6H,QAAQ1C,KAAK,2BAA4B,CAC1CsJ,UAAW9I,EAAQ/E,GACnBD,KAAMgF,EAAQhF,OAGX,CACHuL,SAAS,EACTvG,QAASA,EACT3C,QAAS,sBAAsB2C,EAAQhF,2BAG/C,CAAE,MAAOM,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,oCAAoC/B,EAAM+B,UAE3D,IAGZ,CAEAuL,mBAAAA,CAAoBhD,EAAMgC,GAAW,GACjC,IAAKA,IAAahC,EAAK5K,KACnB,MAAM,IAAIoC,MAAM,qBAExB,CAIA,iBAAM2L,CAAYnD,EAAM3J,EAAU,CAAC,GAC/B,OAAO5B,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,eACxC,MAAM,IAAI1I,MAAM,4CAGpB/C,KAAK2O,kBAAkBpD,GAEvB,MAAMqD,QAAcC,MAAMlM,OAAO4I,GAQjC,OANAvL,KAAK6H,QAAQ1C,KAAK,eAAgB,CAC9B2J,QAASF,EAAMhO,GACfD,KAAMiO,EAAMjO,KACZ4F,KAAMqI,EAAMrI,OAGT,CACH2F,SAAS,EACT0C,MAAOA,EACP5L,QAAS,UAAU4L,EAAMjO,2BAGjC,CAAE,MAAOM,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,wBAAwB/B,EAAM+B,UAE/C,IAGZ,CAEA,kBAAM+L,CAAaD,EAASE,EAAO,CAAC,GAChC,OAAOhP,KAAKkL,eAAe,CACvBF,QAASN,UACL,IACI,IAAK1K,KAAK4H,kBAAkB6D,gBAAgB,gBACxC,MAAM,IAAI1I,MAAM,+CAGpB,MAAM6L,EAAQ1N,KAAK0E,OAAOlE,IAAIoN,GAC9B,IAAKF,EACD,MAAM,IAAI7L,MAAM,iBAAiB+L,qBAGrC,MAAM/D,QAAe6D,EAAM5D,QAAQgE,GAQnC,OANAhP,KAAK6H,QAAQ1C,KAAK,kBAAmB,CACjC2J,QAASF,EAAMhO,GACfD,KAAMiO,EAAMjO,KACZqO,KAAMA,IAGH,CACH9C,SAAS,EACTnB,OAAQA,EACR/H,QAAS,UAAU4L,EAAMjO,8BAGjC,CAAE,MAAOM,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,2BAA2B/B,EAAM+B,UAElD,IAGZ,CAEA2L,iBAAAA,CAAkBpD,EAAMgC,GAAW,GAC/B,IAAKA,IAAahC,EAAK5K,KACnB,MAAM,IAAIoC,MAAM,sBAGpB,IAAKwK,IAAahC,EAAK0D,QACnB,MAAM,IAAIlM,MAAM,wBAExB,CAIA,cAAMmM,CAASC,EAASvN,EAAU,CAAC,GAC/B,IACI,IAAK5B,KAAK4H,kBAAkB6D,gBAAgB,YACxC,MAAM,IAAI1I,MAAM,2CAGpB,MAAMqM,EAAO,IAAIC,KAAKF,GAUtB,aATMC,EAAKE,WAEP1N,EAAQ2N,cACFH,EAAKI,UAAU,CACjB9I,QAAS,CAAEC,MAAO,gBAClB8I,OAAQ7N,EAAQ6N,QAAU,YAAYN,MAIvC,CACHjD,SAAS,EACTkD,KAAMA,EACNM,MAAON,EAAKM,MACZP,QAASA,EACTnM,QAAS,WAAWmM,OAAaC,EAAKM,QAG9C,CAAE,MAAOzO,GACL,MAAO,CACHiL,SAAS,EACTjL,MAAOA,EAAM+B,QACbA,QAAS,oBAAoB/B,EAAM+B,UAE3C,CACJ,CAEA2M,QAAAA,GACI,MAAO,CACH7H,YAAa9H,KAAK8H,YAClB8H,YAAa5P,KAAK+H,eAAetD,OACjCuD,kBAAmBhI,KAAKgI,kBACxBzC,YAAa,CACTC,OAAQtE,KAAKsE,OAAOqK,KACpBpK,MAAOvE,KAAKuE,MAAMoK,KAClBnK,OAAQxE,KAAKwE,OAAOmK,KACpBlK,QAASzE,KAAKyE,QAAQkK,KACtBjK,OAAQ1E,KAAK0E,OAAOiK,KACpBC,OAAQ5O,KAAK4O,OAAOD,KACpBE,UAAW7O,KAAK6O,UAAUF,MAGtC,ECpsBG,MAAMG,kBACTjQ,WAAAA,GACIC,KAAKiD,YAAc,IAAI7C,IACvBJ,KAAKiQ,iBAAmB,IAAI7P,IAC5BJ,KAAKkQ,qBAAuB,IAAI9P,IAChCJ,KAAKyH,kBAAoB,GACzBzH,KAAK8H,aAAc,CACvB,CAEA,gBAAMvH,GACFC,QAAQC,IAAI,qDAEZ,IAEIT,KAAKmQ,+BAGCnQ,KAAKoQ,kBAGmB,IAA1BpQ,KAAKiD,YAAY4M,YACX7P,KAAKqQ,wBAIfrQ,KAAKsQ,kCAELtQ,KAAK8H,aAAc,EACnBtH,QAAQC,IAAI,4DAEhB,CAAE,MAAOQ,GAEL,MADAT,QAAQS,MAAM,6DAA8DA,GACtEA,CACV,CACJ,CAEAkP,sBAAAA,GAEInQ,KAAKiQ,iBAAiB7I,IAAI,OAAQ,CAC9BoC,MAAO,EACP7I,KAAM,UACN4P,YAAa,iBACbtN,YAAa,CAAC,IAGlBjD,KAAKiQ,iBAAiB7I,IAAI,QAAS,CAC/BoC,MAAO,EACP7I,KAAM,SACN4P,YAAa,uCACbtN,YAAa,CAETuN,aAAa,EACbC,aAAa,EACbvB,UAAU,EAGVtC,aAAa,EACb8D,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EAGjBC,eAAe,KAIvBjR,KAAKiQ,iBAAiB7I,IAAI,WAAY,CAClCoC,MAAO,EACP7I,KAAM,SACN4P,YAAa,iDACbtN,YAAa,IAENjD,KAAKiQ,iBAAiBvO,IAAI,SAASuB,YAGtCwK,YAAY,EACZK,YAAY,EACZoD,YAAY,EAEZC,eAAe,EACfC,eAAe,EACfC,eAAe,EAEf3C,aAAa,EACb4C,aAAa,EACbvC,cAAc,EAGd5C,aAAa,EAGboF,sBAAsB,KAI9BvR,KAAKiQ,iBAAiB7I,IAAI,WAAY,CAClCoC,MAAO,EACP7I,KAAM,WACN4P,YAAa,mDACbtN,YAAa,IAENjD,KAAKiQ,iBAAiBvO,IAAI,YAAYuB,YAGzCqI,aAAa,EACbkB,aAAa,EAGbuB,aAAa,EACbyD,aAAa,EACbC,aAAa,EACbrD,eAAe,EAGfsD,iBAAiB,EACjBC,iBAAiB,EACjBC,iBAAiB,EACjBC,WAAW,EAEXC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,WAAW,EAGXC,aAAa,EACbC,aAAa,EACbC,aAAa,EACbC,cAAc,KAItBrS,KAAKiQ,iBAAiB7I,IAAI,OAAQ,CAC9BoC,MAAO,EACP7I,KAAM,WACN4P,YAAa,wCACbtN,YAAa,IAENjD,KAAKiQ,iBAAiBvO,IAAI,YAAYuB,YAGzCqP,aAAa,EACbC,gBAAgB,EAChBC,eAAe,EAGfC,mBAAmB,EACnBC,sBAAsB,EACtBC,mBAAmB,EAGnBC,kBAAkB,EAClBC,eAAe,IAG3B,CAEA,qBAAMzC,GACF,IAEI,MAAM0C,EAAmB9S,KAAK+S,wBAA0B,CAAC,EACnDC,EAAahT,KAAKiT,4BAA8B,cAGhDjT,KAAKkT,mBAAmBF,GAG9B,IAAK,MAAOG,EAAYhM,KAAUmF,OAAO8G,QAAQN,GAC7C9S,KAAKiD,YAAYmE,IAAI+L,EAAYhM,GAGrC3G,QAAQC,IAAI,wCAAyCuS,EAEzD,CAAE,MAAO/R,GACLT,QAAQmB,KAAK,6DAA8DV,SACrEjB,KAAKqQ,uBACf,CACJ,CAEA0C,oBAAAA,GAEI,IACI,OAAOM,KAAKC,MAAMC,aAAaC,QAAQ,6BAA+B,KAC1E,CAAE,MACE,MAAO,CAAC,CACZ,CACJ,CAEAP,wBAAAA,GAEI,OAAOM,aAAaC,QAAQ,kCAAoC,OACpE,CAEA,qBAAMC,GACF,IACI,MAAMC,EAAiBpH,OAAOqH,YAAY3T,KAAKiD,aAG/CsQ,aAAaK,QAAQ,2BAA4BP,KAAKQ,UAAUH,IAGhE1T,KAAKyH,kBAAkBpD,KAAK,CACxBC,UAAW9B,KAAKC,MAChBQ,YAAa,IAAKyQ,GAClBlP,UAAW,WAIXxE,KAAKyH,kBAAkBhD,OAAS,KAChCzE,KAAKyH,kBAAkB/C,OAAO,EAAG1E,KAAKyH,kBAAkBhD,OAAS,KAGrE8O,aAAaK,QAAQ,kCAAmCP,KAAKQ,UAAU7T,KAAKyH,oBAE5EjH,QAAQC,IAAI,mCAEhB,CAAE,MAAOQ,GAEL,MADAT,QAAQS,MAAM,4CAA6CA,GACrDA,CACV,CACJ,CAEA,2BAAMoP,GACF7P,QAAQC,IAAI,+DACNT,KAAKkT,mBAAmB,QAClC,CAEA,wBAAMA,CAAmBY,GACrB,MAAMtK,EAAQxJ,KAAKiQ,iBAAiBvO,IAAIoS,GACxC,IAAKtK,EACD,MAAM,IAAIzG,MAAM,uBAAuB+Q,qBAI3C9T,KAAKiD,YAAY+B,QAGjB,IAAK,MAAOmO,EAAYhM,KAAUmF,OAAO8G,QAAQ5J,EAAMvG,aACnDjD,KAAKiD,YAAYmE,IAAI+L,EAAYhM,GAIrCoM,aAAaK,QAAQ,gCAAiCE,SAGhD9T,KAAKyT,kBAEXjT,QAAQC,IAAI,oDAAoD+I,EAAM7I,QAGtEX,KAAK+T,uBAAuBD,EAAWtK,EAAM7I,KACjD,CAEA8K,eAAAA,CAAgBuI,GACZ,IAAKhU,KAAK8H,YAEN,OADAtH,QAAQmB,KAAK,yEACN,EAIX,MAAMsS,EAAiBjU,KAAKkQ,qBAAqBxO,IAAIsS,GACrD,GAAIC,GAAkBA,EAAeC,QAAU1R,KAAKC,MAChD,OAAOwR,EAAeE,QAI1B,MAAMC,EAAgBpU,KAAKiD,YAAYvB,IAAIsS,KAAW,EAOtD,OAJKI,GACD5T,QAAQ6T,MAAM,yCAAyCL,KAGpDI,CACX,CAEA,qBAAME,CAAgBN,EAAQG,GAAU,EAAMvS,EAAU,CAAC,GACrD,IAAK5B,KAAKyL,gBAAgB,uBAAyB7J,EAAQ8K,MACvD,MAAM,IAAI3J,MAAM,oDAGpB,MAAMwR,EAAWvU,KAAKiD,YAAYvB,IAAIsS,GAatC,OAZAhU,KAAKiD,YAAYmE,IAAI4M,EAAQG,GAGxBvS,EAAQ4S,iBACHxU,KAAKyT,kBAGfjT,QAAQC,IAAI,4BAA4B0T,EAAU,YAAc,eAAeH,KAG/EhU,KAAKmE,oBAAoB6P,EAAQO,EAAUJ,EAASvS,IAE7C,CACX,CAEA,sBAAM6S,CAAiBT,EAAQpS,EAAU,CAAC,GACtC,aAAa5B,KAAKsU,gBAAgBN,GAAQ,EAAOpS,EACrD,CAEA8S,wBAAAA,CAAyBV,EAAQhI,EAAW,IAAQmI,GAAU,GAC1D,MAAMD,EAAU1R,KAAKC,MAAQuJ,EAiB7B,OAfAhM,KAAKkQ,qBAAqB9I,IAAI4M,EAAQ,CAClCG,QAASA,EACTD,QAASA,EACTS,UAAWnS,KAAKC,MAChBmS,UAAW,WAGfpU,QAAQC,IAAI,uCAAuC0T,EAAU,YAAc,eAAeH,gBAAqBhI,EAAS,SAGxH6I,WAAW,KACP7U,KAAKkQ,qBAAqBnL,OAAOiP,GACjCxT,QAAQC,IAAI,iDAAiDuT,MAC9DhI,IAEI,CACX,CAEA,uBAAM8I,CAAkBd,EAAQe,EAAS,GAAInT,EAAU,CAAC,GAEpD,OAAI5B,KAAKyL,gBAAgBuI,GACd,CAAEG,SAAS,EAAMnR,QAAS,2BAIrCxC,QAAQC,IAAI,4CAA4CuT,eAAoBe,KAGxEnT,EAAQoT,aAAehV,KAAKiV,kBAAkBjB,IAC9ChU,KAAK0U,yBAAyBV,EAAQpS,EAAQoK,UAAY,KACnD,CAAEmI,SAAS,EAAMK,WAAW,EAAMxR,QAAS,uCAG/C,CAAEmR,SAAS,EAAOe,SAAS,EAAMlS,QAAS,+BACrD,CAEAiS,iBAAAA,CAAkBjB,GAKd,MAJyB,CACrB,WAAY,cAAe,cAAe,aAC1C,cAAe,iBAEKxG,SAASwG,EACrC,CAEAD,sBAAAA,CAAuBD,EAAWqB,GAC9B3U,QAAQC,IAAI,0DAA0D0U,IAC1E,CAEAhR,mBAAAA,CAAoB6P,EAAQO,EAAUa,EAAUxT,GAC5C,MAAMyT,EAAW,CACb/Q,UAAW9B,KAAKC,MAChBuR,OAAQA,EACRO,SAAUA,EACVa,SAAUA,EACV5Q,UAAW,SACXgQ,UAAW5S,EAAQ4S,YAAa,EAChCO,OAAQnT,EAAQmT,QAAU,IAI9B/U,KAAKyH,kBAAkBpD,KAAKgR,EAChC,CAEA/E,+BAAAA,GAEIpK,YAAY,KACR,MAAMzD,EAAMD,KAAKC,MACX6S,EAAU,GAEhB,IAAK,MAAOtB,EAAQb,KAAenT,KAAKkQ,qBAAqBkD,UACrDD,EAAWe,SAAWzR,GACtB6S,EAAQjR,KAAK2P,GAIrB,IAAK,MAAMA,KAAUsB,EACjBtV,KAAKkQ,qBAAqBnL,OAAOiP,GACjCxT,QAAQC,IAAI,iDAAiDuT,MAElE,IACP,CAGAuB,eAAAA,GACI,OAAOvV,KAAKyL,gBAAgB,cAChC,CAEA+J,eAAAA,GACI,OAAOxV,KAAKyL,gBAAgB,cAChC,CAEAgK,eAAAA,GACI,OAAOzV,KAAKyL,gBAAgB,gBAAkBzL,KAAKyL,gBAAgB,cACvE,CAEAiK,gBAAAA,GACI,OAAO1V,KAAKyL,gBAAgB,eAChC,CAEAkK,cAAAA,GACI,OAAO3V,KAAKyL,gBAAgB,cAChC,CAGAmK,yBAAAA,GACI,OAAO5V,KAAKiT,4BAA8B,OAC9C,CAEA4C,4BAAAA,GACI,OAAOC,MAAMC,KAAK/V,KAAKiQ,iBAAiBmD,WAAWhG,IAAI,EAAEnG,EAAKuC,MAAW,CACrEvC,IAAKA,EACLtG,KAAM6I,EAAM7I,KACZ4P,YAAa/G,EAAM+G,YACnB/G,MAAOA,EAAMA,QAErB,CAEAwM,oBAAAA,GACI,MAAMC,EAAS,GACTxT,EAAMD,KAAKC,MAGjB,IAAK,MAAOuR,EAAQG,KAAYnU,KAAKiD,YAAYmQ,UACzCe,GACA8B,EAAO5R,KAAK,CACR2P,OAAQA,EACRzN,KAAM,YACN4N,QAASA,IAMrB,IAAK,MAAOH,EAAQb,KAAenT,KAAKkQ,qBAAqBkD,UACrDD,EAAWe,QAAUzR,GACrBwT,EAAO5R,KAAK,CACR2P,OAAQA,EACRzN,KAAM,YACN4N,QAAShB,EAAWgB,QACpBD,QAASf,EAAWe,QACpBgC,UAAW/C,EAAWe,QAAUzR,IAK5C,OAAOwT,CACX,CAEAE,oBAAAA,CAAqBlJ,EAAQ,IACzB,OAAOjN,KAAKyH,kBAAkByF,OAAOD,EACzC,CAEA0C,QAAAA,GACI,MAAO,CACH7H,YAAa9H,KAAK8H,YAClBsO,aAAcpW,KAAK4V,4BACnBS,iBAAkBrW,KAAKiD,YAAY4M,KACnCyG,kBAAmBtW,KAAKgW,uBAAuBvR,OAC/CyL,qBAAsBlQ,KAAKkQ,qBAAqBL,KAChD0G,eAAgBvW,KAAKyH,kBAAkBhD,OAE/C,CAGA,oBAAM+R,GACFhW,QAAQmB,KAAK,mDAEb3B,KAAKiD,YAAY+B,QACjBhF,KAAKkQ,qBAAqBlL,QAC1BhF,KAAKyH,kBAAoB,SAEnBzH,KAAKqQ,wBAEX7P,QAAQC,IAAI,gEAChB,CAGAgW,yBAAAA,CAA0BzC,EAAQ0C,EAAU,CAAC,GAOzC,MALyB,CACrB,oBAAqB,uBAAwB,iBAC7C,cAAe,mBAAoB,iBAGlBlJ,SAASwG,IAC1BxT,QAAQmB,KAAK,4CAA4CqS,KAClD,CACH2C,OAAO,EACP5B,OAAQ,qCACR6B,oBAAoB,IAIrB,CAAED,OAAO,EACpB,ECtfG,MAAME,cACT9W,WAAAA,CAAY6H,EAAmBkP,EAAYC,GACvC/W,KAAK4H,kBAAoBA,EACzB5H,KAAK8W,WAAaA,EAClB9W,KAAK+W,cAAgBA,EACrB/W,KAAK8H,aAAc,EACnB9H,KAAKgX,cAAgB,MACrBhX,KAAKiX,SAAW,IAAI7W,IACpBJ,KAAKkX,oBAAsB,GAC3BlX,KAAKmX,oBAAsB,IAAI/W,IAC/BJ,KAAKoX,YAAc,IAAIhX,IACvBJ,KAAKqX,gBAAkB,IAC3B,CAEA,gBAAM9W,GACFC,QAAQC,IAAI,iDAEZ,IAEIT,KAAKsX,mBAGLtX,KAAKuX,2BAGCvX,KAAKwX,wBAGLxX,KAAKyX,qBAEXzX,KAAK8H,aAAc,EACnBtH,QAAQC,IAAI,wDAEhB,CAAE,MAAOQ,GAEL,MADAT,QAAQS,MAAM,yDAA0DA,GAClEA,CACV,CACJ,CAEAqW,gBAAAA,GAEItX,KAAKiX,SAAS7P,IAAI,OAAQ,CACtBmJ,YAAa,8BACbmH,MAAO,qBACPvE,WAAY,cACZwE,QAAS3X,KAAK4X,kBAAkBC,KAAK7X,QAGzCA,KAAKiX,SAAS7P,IAAI,SAAU,CACxBmJ,YAAa,2BACbmH,MAAO,aACPvE,WAAY,cACZwE,QAAS3X,KAAK8X,oBAAoBD,KAAK7X,QAI3CA,KAAKiX,SAAS7P,IAAI,OAAQ,CACtBmJ,YAAa,aACbmH,MAAO,8BACPvE,WAAY,WACZwE,QAAS3X,KAAK+X,kBAAkBF,KAAK7X,QAIzCA,KAAKiX,SAAS7P,IAAI,SAAU,CACxBmJ,YAAa,yBACbmH,MAAO,4BACPvE,WAAY,cACZwE,QAAS3X,KAAKgY,oBAAoBH,KAAK7X,QAI3CA,KAAKiX,SAAS7P,IAAI,SAAU,CACxBmJ,YAAa,0BACbmH,MAAO,8BACPvE,WAAY,cACZwE,QAAS3X,KAAKiY,oBAAoBJ,KAAK7X,QAI3CA,KAAKiX,SAAS7P,IAAI,QAAS,CACvBmJ,YAAa,gBACbmH,MAAO,gCACPvE,WAAY,eACZwE,QAAS3X,KAAKkY,mBAAmBL,KAAK7X,QAI1CA,KAAKiX,SAAS7P,IAAI,QAAS,CACvBmJ,YAAa,iBACbmH,MAAO,gCACPvE,WAAY,cACZwE,QAAS3X,KAAKmY,mBAAmBN,KAAK7X,QAI1CA,KAAKiX,SAAS7P,IAAI,SAAU,CACxBmJ,YAAa,yBACbmH,MAAO,6BACPvE,WAAY,iBACZwE,QAAS3X,KAAKoY,oBAAoBP,KAAK7X,QAI3CA,KAAKiX,SAAS7P,IAAI,OAAQ,CACtBmJ,YAAa,wBACbmH,MAAO,sBACPvE,WAAY,cACZwE,QAAS3X,KAAKqY,kBAAkBR,KAAK7X,OAE7C,CAEAuX,kBAAAA,GAKIvX,KAAKsY,sBACT,CAEAA,oBAAAA,GAEI9X,QAAQC,IAAI,wDAChB,CAEA,mBAAM8X,CAAcvV,EAASpB,EAAS4W,GAClC,IACI,MAAMlS,EAAUtD,EAAQsD,QAGxB,GAAIA,EAAQmS,WAAWzY,KAAKgX,eAExB,kBADMhX,KAAK0Y,eAAepS,EAAStD,GAKvC,GAAIhD,KAAK2Y,qBAAqBrS,GAE1B,kBADMtG,KAAK4Y,iBAAiBtS,EAAStD,GAKrChD,KAAK6Y,kBAAkB7V,IACvBhD,KAAK8Y,yBAAyB9V,EAGtC,CAAE,MAAO/B,GACLT,QAAQS,MAAM,qDAAsDA,SAC9DjB,KAAK+Y,iBAAiB9X,EAAM+B,QACtC,CACJ,CAEA,oBAAM0V,CAAepS,EAAS0S,GAC1B,MAAMhP,EAAQ1D,EAAQ4G,MAAMlN,KAAKgX,cAAcvS,QAAQwU,OAAOC,MAAM,KAC9DC,EAAcnP,EAAM,GACpBgF,EAAOhF,EAAMkD,MAAM,GAEzB1M,QAAQC,IAAI,uCAAuC0Y,IAAenK,GAElE,MAAMC,EAAUjP,KAAKiX,SAASvV,IAAIyX,GAClC,GAAKlK,EAML,GAAKjP,KAAK4H,kBAAkB6D,gBAAgBwD,EAAQkE,YAKpD,UACUlE,EAAQ0I,QAAQ3I,EAAMgK,EAChC,CAAE,MAAO/X,GACLT,QAAQS,MAAM,kCAAkCkY,KAAgBlY,SAC1DjB,KAAKwQ,YAAY,+BAA+BvP,EAAM+B,UAChE,YATUhD,KAAKwQ,YAAY,4CAA4C2I,6BAAuClK,EAAQkE,yBAN5GnT,KAAKwQ,YAAY,cAAc2I,sEAgB7C,CAEA,sBAAMP,CAAiBtS,EAAS0S,GAC5BxY,QAAQC,IAAI,0CAA2C6F,GAGvD,MAAM8S,EAAe9S,EAAQ+S,QAAQ,YAAa,IAAIJ,OAE1B,IAAxBG,EAAa3U,aAMXzE,KAAKsZ,uBAAuBF,EAAcJ,SALtChZ,KAAKwQ,YAAY,8EAM/B,CAEAmI,oBAAAA,CAAqBrS,GACjB,MAAO,WAAW0G,KAAK1G,EAC3B,CAEAuS,iBAAAA,CAAkB7V,GAEd,MAAwB,OAAjBA,EAAQuD,MAAkC,QAAjBvD,EAAQuD,IAC5C,CAEAuS,wBAAAA,CAAyB9V,GACrBhD,KAAKkX,oBAAoB7S,KAAK,CAC1BC,UAAW9B,KAAKC,MAChBjB,KAAMwB,EAAQxB,MAAMb,MAAQ,UAC5B2F,QAAStD,EAAQsD,QACjBC,KAAMvD,EAAQuD,OAIdvG,KAAKkX,oBAAoBzS,OAAS,KAClCzE,KAAKkX,oBAAoBrM,OAEjC,CAIA,uBAAM+M,CAAkB5I,EAAMgK,GAC1B,GAAIhK,EAAKvK,OAAS,EAAG,CAEjB,MAAM0U,EAAcnK,EAAK,GACnBC,EAAUjP,KAAKiX,SAASvV,IAAIyX,GAElC,GAAIlK,EAAS,CACT,MAAMsK,EAAW,+FAEOJ,kEACiBlK,EAAQsB,2EACRtB,EAAQyI,uFACGzI,EAAQkE,qEAGtDnT,KAAKwQ,YAAY+I,EAC3B,YACUvZ,KAAKwQ,YAAY,cAAc2I,qBAE7C,KAAO,CAEH,MAKMI,EAAW,iJALGzD,MAAMC,KAAK/V,KAAKiX,SAAS7D,WACxC/N,OAAO,EAAE1E,EAAM6Y,KAASxZ,KAAK4H,kBAAkB6D,gBAAgB+N,EAAIrG,aACnE/F,IAAI,EAAEzM,EAAM6Y,KAAS,eAAe7Y,gBAAmB6Y,EAAIjJ,oBAC3DkJ,KAAK,mQAWJzZ,KAAKwQ,YAAY+I,EAC3B,CACJ,CAEA,yBAAMzB,CAAoB9I,EAAMgK,GAC5B,MAAMU,QAAoB1Z,KAAK+W,cAAczP,iBACvCqS,EAAkB3Z,KAAK4H,kBAAkB+H,WACzCiK,EAAW5Z,KAAK8W,WAAWnH,WAE3BkK,EAAa,qNAKIH,GAAa/Y,MAAQ,6CACnB+Y,GAAalS,cAAgB,WAAa,8DAChCkS,GAAarZ,aAAe,IAAImC,KAAKkX,EAAYrZ,cAAcyZ,iBAAmB,oKAIvFH,EAAgBvD,+DACVuD,EAAgBrD,yEACXqD,EAAgBzJ,+KAIhC0J,EAAS9R,YAAc,kBAAoB,wEAChC8R,EAAShK,wDACfgK,EAAS5R,kBAAoB,MAAQ,sKAI1C4R,EAASrU,aAAaC,QAAU,wCACjCoU,EAASrU,aAAaE,OAAS,wCAC/BmU,EAASrU,aAAaG,QAAU,0CAC9BkU,EAASrU,aAAaI,SAAW,oEAKrD3F,KAAKwQ,YAAYqJ,EAC3B,CAEA,uBAAM9B,CAAkB/I,EAAMgK,GAC1B,GAAoB,IAAhBhK,EAAKvK,OAEL,kBADMzE,KAAKwQ,YAAY,uFAI3B,MAAMrB,EAAUH,EAAK,GACfS,EAAST,EAAK9B,MAAM,GAAGuM,KAAK,MAAQ,6BAEpC1O,QAAe/K,KAAK8W,WAAW5H,SAASC,EAAS,CACnDI,QAAQ,EACRE,OAAQA,IAGR1E,EAAOmB,cACDlM,KAAKwQ,YAAY,QAAQrB,WAAiBpE,EAAO2E,UAAUD,EAAS,KAAKA,KAAY,YAErFzP,KAAKwQ,YAAY,sBAAsBzF,EAAO9J,QAE5D,CAEA,yBAAM+W,CAAoBhJ,EAAMgK,GAC5B,GAAIhK,EAAKvK,OAAS,EAEd,kBADMzE,KAAKwQ,YAAY,iFAI3B,MAAMjK,EAAOyI,EAAK,GAAG+K,cACfC,EAAahL,EAAK9B,MAAM,GAAGuM,KAAK,KAEtC,IACI,IAAIlO,EAQAR,EAPJ,IACIQ,EAAO8H,KAAKC,MAAM0G,EACtB,CAAE,MAEEzO,EAAO,CAAE5K,KAAMqZ,EACnB,CAGA,OAAQzT,GACJ,IAAK,QACDwE,QAAe/K,KAAK8W,WAAWxL,YAAYC,GAC3C,MACJ,IAAK,OACDR,QAAe/K,KAAK8W,WAAWrJ,WAAWlC,GAC1C,MACJ,IAAK,QACDR,QAAe/K,KAAK8W,WAAW/I,YAAYxC,GAC3C,MACJ,IAAK,UACDR,QAAe/K,KAAK8W,WAAWxI,mBAAmB/C,GAClD,MACJ,IAAK,QACDR,QAAe/K,KAAK8W,WAAWpI,YAAYnD,GAC3C,MACJ,QAEI,kBADMvL,KAAKwQ,YAAY,WAAWjK,uEAItCwE,EAAOmB,cACDlM,KAAKwQ,YAAY,KAAKzF,EAAO/H,iBAE7BhD,KAAKwQ,YAAY,KAAKzF,EAAO/H,UAG3C,CAAE,MAAO/B,SACCjB,KAAKwQ,YAAY,mBAAmBjK,MAAStF,EAAM+B,UAC7D,CACJ,CAEA,yBAAMiV,CAAoBjJ,EAAMgK,GAC5B,GAAoB,IAAhBhK,EAAKvK,OAEL,kBADMzE,KAAKwQ,YAAY,+EAI3B,MAAMjK,EAAOyI,EAAK,GAAG+K,cACfE,EAAajL,EAAK9B,MAAM,GAAGuM,KAAK,KAEtC,IACI,IAAI1O,EACJ,MAAM8B,EAAUoN,EAAa,CAAEtZ,KAAMsZ,GAAe,CAAC,EAErD,OAAQ1T,GACJ,IAAK,SACDwE,QAAe/K,KAAK8W,WAAWlK,YAAYC,EAAS,CAAEI,MAAO,KAC7D,MACJ,IAAK,QAEDlC,EAAS,CAAEmB,SAAS,EAAOlJ,QAAS,yCACpC,MACJ,IAAK,SAED+H,EAAS,CAAEmB,SAAS,EAAOlJ,QAAS,yCACpC,MACJ,QAEI,kBADMhD,KAAKwQ,YAAY,WAAWjK,gCAI1C,GAAIwE,EAAOmB,QACP,GAAInB,EAAOvF,QAAUuF,EAAOvF,OAAOf,OAAS,EAAG,CAC3C,MAAMyV,EAAYnP,EAAOvF,OACpB4H,IAAI3E,GAAS,OAAOA,EAAM9H,WAAW8H,EAAMlC,iBAAiBkC,EAAMe,OAAS,SAC3EiQ,KAAK,YAEJzZ,KAAKwQ,YAAY,+BAA+B0J,IAC1D,YACUla,KAAKwQ,YAAY,8CAGrBxQ,KAAKwQ,YAAY,KAAKzF,EAAO/H,UAG3C,CAAE,MAAO/B,SACCjB,KAAKwQ,YAAY,oBAAoBvP,EAAM+B,UACrD,CACJ,CAEA,wBAAMkV,CAAmBlJ,EAAMgK,GAC3B,GAAoB,IAAhBhK,EAAKvK,OAEL,kBADMzE,KAAKwQ,YAAY,0CAI3B,MAAM2J,EAAYnL,EAAK,GACjBoL,EAAYpL,EAAK9B,MAAM,GAMvBnC,QAAe/K,KAAK8W,WAAW/H,aAFjB,gBAE2CqL,GAE3DrP,EAAOmB,cACDlM,KAAKwQ,YAAY,aAAa2J,mCAE9Bna,KAAKwQ,YAAY,KAAKzF,EAAO/H,UAE3C,CAEA,wBAAMmV,CAAmBnJ,EAAMgK,GAC3B,GAAoB,IAAhBhK,EAAKvK,OAEL,kBADMzE,KAAKwQ,YAAY,yEAI3B,MAAMwD,EAAShF,EAAK,GAAG+K,cACjBM,EAASrL,EAAK9B,MAAM,GAE1B,IACI,OAAQ8G,GACJ,IAAK,WACD,GAAsB,IAAlBqG,EAAO5V,OAEP,kBADMzE,KAAKwQ,YAAY,kDAIrBxQ,KAAKwQ,YAAY,4BAA4B6J,EAAO,MAC1D,MAEJ,IAAK,SACD,GAAsB,IAAlBA,EAAO5V,OAEP,kBADMzE,KAAKwQ,YAAY,oCAG3B,MAAM8J,EAAY,CAAE3Z,KAAM0Z,EAAOZ,KAAK,MAChC1O,QAAe/K,KAAK8W,WAAW/I,YAAYuM,GAE7CvP,EAAOmB,cACDlM,KAAKwQ,YAAY,KAAKzF,EAAO/H,iBAE7BhD,KAAKwQ,YAAY,KAAKzF,EAAO/H,WAEvC,MAEJ,IAAK,aAEKhD,KAAKwQ,YAAY,iGACvB,MAEJ,cACUxQ,KAAKwQ,YAAY,WAAWwD,6DAG9C,CAAE,MAAO/S,SACCjB,KAAKwQ,YAAY,8BAA8BvP,EAAM+B,UAC/D,CACJ,CAEA,yBAAMoV,CAAoBpJ,EAAMgK,GAC5B,GAAIhK,EAAKvK,OAAS,EAEd,kBADMzE,KAAKwQ,YAAY,2EAI3B,MAAM+J,EAASvL,EAAK,GAAG+K,cACjB5S,EAAQ6H,EAAK9B,MAAM,GAAGuM,KAAK,KAEjC,IACI,OAAQc,GACJ,IAAK,iBACKva,KAAKwa,cAAcrT,SACnBnH,KAAKwQ,YAAY,oCAAoCrJ,KAC3D,MAEJ,IAAK,yBACKnH,KAAK4H,kBAAkBsL,mBAAmB/L,EAAMsT,qBAChDza,KAAKwQ,YAAY,wCAAwCrJ,KAC/D,MAEJ,cACUnH,KAAKwQ,YAAY,YAAY+J,uBAG/C,CAAE,MAAOtZ,SACCjB,KAAKwQ,YAAY,2BAA2BvP,EAAM+B,UAC5D,CACJ,CAEA,uBAAMqV,CAAkBrJ,EAAMgK,GAC1B,MAAMhW,EAAUgM,EAAKyK,KAAK,KAErBzW,QAKChD,KAAKsZ,uBAAuBtW,EAASgW,SAJjChZ,KAAKwQ,YAAY,+BAK/B,CAEA,4BAAM8I,CAAuBtW,EAASgW,GAClC,GAAKhZ,KAAKqX,gBAKV,IAEI,MAAMX,EAAU1W,KAAK0a,yBAAyB1B,GAGxC2B,QAAiB3a,KAAKqX,gBAAgBuD,eAAe5X,EAAS0T,SAG9D1W,KAAKwQ,YAAY,MAAMmK,KAG7B3a,KAAK8Y,yBAAyB,CAC1BtX,KAAM,eACN8E,QAASqU,EACTpU,KAAM,cACNjC,UAAW9B,KAAKC,OAGxB,CAAE,MAAOxB,GACLT,QAAQS,MAAM,yCAA0CA,SAClDjB,KAAKwQ,YAAY,0EAC3B,YAzBUxQ,KAAKwQ,YAAY,yFA0B/B,CAEAkK,wBAAAA,CAAyB1B,GACrB,MAAO,CACHxX,KAAMwX,GAAiBxX,MAAMb,MAAQ,UACrCka,cAAe7a,KAAKkX,oBAAoBhK,OAAO,IAC/C4N,aAAc9a,KAAK+a,kBACnBzW,UAAW9B,KAAKC,MAExB,CAEAsY,eAAAA,GAEI,MAAO,CACHC,YAAa,4BACbC,YAAa,EACbC,WAAY,SAEpB,CAIA,qBAAM1D,GAEFhX,QAAQC,IAAI,iDAGZT,KAAKoX,YAAYhQ,IAAI,OAAQ,CACzBzG,KAAM,gBACNia,eAAgBlQ,MAAO1H,EAAS0T,IACrB,gBAAgB1T,qCAGnC,CAEA,wBAAMyU,GAEFzX,KAAKqX,gBAAkBrX,KAAKoX,YAAY1V,IAAI,QAC5ClB,QAAQC,IAAI,4DAChB,CAEA,mBAAM+Z,CAAcW,GAChB,MAAMC,EAAWpb,KAAKoX,YAAY1V,IAAIyZ,GACtC,IAAKC,EACD,MAAM,IAAIrY,MAAM,aAAaoY,qBAGjCnb,KAAKqX,gBAAkB+D,EACvB5a,QAAQC,IAAI,0CAA0C2a,EAASza,OACnE,CAIA,iBAAM6P,CAAYlK,EAAS1E,EAAU,CAAC,GAClC,MAAMyE,EAAc,CAChBC,QAASA,EACTC,KAAM3E,EAAQ2E,MAAQ,QACtBG,QAAS,CACLC,MAAO/E,EAAQ+E,OAAS,gBAE5B0U,QAASzZ,EAAQyZ,SAAW,MAOhC,OAHA7a,QAAQC,IAAI,oCAAqC6F,GAG1CD,CACX,CAEA,sBAAM0S,CAAiB9X,SACbjB,KAAKwQ,YAAY,eAAevP,IAAS,CAAEsF,KAAM,SAC3D,CAEA,iBAAMkK,CAAYnK,EAASgV,SACjBtb,KAAKwQ,YAAYlK,EAAS,CAAE+U,QAAS,CAACC,IAChD,CAEA3L,QAAAA,GACI,MAAO,CACH7H,YAAa9H,KAAK8H,YAClByT,mBAAoBvb,KAAKiX,SAASpH,KAClC2L,0BAA2Bxb,KAAKkX,oBAAoBzS,OACpD0S,oBAAqBnX,KAAKmX,oBAAoBtH,KAC9C4L,mBAAoBzb,KAAKoX,YAAYvH,KACrCwH,gBAAiBrX,KAAKqX,iBAAiB1W,MAAQ,KAEvD,CAGA,0BAAM+a,CAAqBpV,EAAS1E,EAAU,CAAC,GAC3C,MAAM+Z,EAAc,CAChBrV,QAASA,EACT9E,KAAM,CAAEb,KAAMiB,EAAQiD,UAAY,aAClC0B,KAAM3E,EAAQ2E,MAAQ,YAGpBvG,KAAKuY,cAAcoD,EAAa,CAAC,EAAG,eAC9C,EChpBG,MAAMC,cACT7b,WAAAA,CAAY8b,EAAS,CAAC,GAClB7b,KAAKW,KAAO,QACZX,KAAK8b,OAASD,EAAOC,QAAUC,QAAQC,IAAIC,cAC3Cjc,KAAKkc,QAAUL,EAAOK,SAAW,uBACjClc,KAAKmc,MAAQN,EAAOM,OAAS,eAC7Bnc,KAAKoc,UAAYP,EAAOO,WAAa,IACrCpc,KAAKqc,YAAcR,EAAOQ,aAAe,GACzCrc,KAAK8H,aAAc,EACnB9H,KAAKsc,YAAc,IAAIlc,IACvBJ,KAAKuc,eAAiB,EAC1B,CAEA,gBAAMhc,GACFC,QAAQC,IAAI,qCAEZ,IAEI,IAAKT,KAAK8b,OACN,MAAM,IAAI/Y,MAAM,0CAId/C,KAAKwc,iBAEXxc,KAAK8H,aAAc,EACnBtH,QAAQC,IAAI,4CAEhB,CAAE,MAAOQ,GAEL,MADAT,QAAQS,MAAM,0CAA2CA,GACnDA,CACV,CACJ,CAEA,oBAAMub,GACF,IACI,MAAM7B,QAAiB8B,MAAM,GAAGzc,KAAKkc,oBAAqB,CACtDQ,OAAQ,MACRC,QAAS,CACL,cAAiB,UAAU3c,KAAK8b,SAChC,eAAgB,sBAIxB,IAAKnB,EAASiC,GACV,MAAM,IAAI7Z,MAAM,oBAAoB4X,EAASkC,UAAUlC,EAASd,cAGpE,MAAMtO,QAAaoP,EAASmC,OAE5B,OADAtc,QAAQC,IAAI,gDACL8K,CAEX,CAAE,MAAOtK,GAEL,MADAT,QAAQS,MAAM,6CAA8CA,GACtD,IAAI8B,MAAM,+BAA+B9B,EAAM+B,UACzD,CACJ,CAEA,oBAAM4X,CAAe5X,EAAS0T,EAAU,CAAC,GACrC,IAAK1W,KAAK8H,YACN,MAAM,IAAI/E,MAAM,mCAIpB,IAAK/C,KAAK+c,iBACN,MAAM,IAAIha,MAAM,4DAGpB,IAEI,MAAMia,EAAShd,KAAKid,YAAYja,EAAS0T,GAGnCiE,QAAiB3a,KAAKkd,eAAeF,GAGrCG,EAAoBnd,KAAKod,gBAAgBzC,GAK/C,OAFA3a,KAAKqd,aAAara,EAASma,EAAmBzG,GAEvCyG,CAEX,CAAE,MAAOlc,GAEL,MADAT,QAAQS,MAAM,+CAAgDA,GACxD,IAAI8B,MAAM,kBAAkB9B,EAAM+B,UAC5C,CACJ,CAEAia,WAAAA,CAAYja,EAAS0T,GACjB,MAAM4G,EAAetd,KAAKud,gBAAgB7G,GACpCQ,EAAsBlX,KAAKwd,0BAA0B9G,EAAQmE,eAAiB,IAC9EC,EAAe9a,KAAKyd,mBAAmB/G,EAAQoE,cAAgB,CAAC,GAEtE,MAAO,CACHqB,MAAOnc,KAAKmc,MACZ/W,SAAU,CACN,CACIpD,KAAM,SACNsE,QAASgX,MAEVpG,EACH,CACIlV,KAAM,OACNsE,QAAS,GAAGwU,iBAA4B9X,MAGhD0a,WAAY1d,KAAKoc,UACjBC,YAAarc,KAAKqc,YAClBsB,QAAQ,EAEhB,CAEAJ,eAAAA,CAAgB7G,GACZ,MAAO,sgCAoBFA,EAAQoE,cAAcI,YAAc,2BACjCxE,EAAQoE,cAAcE,aAAe,oCACtCtE,EAAQoE,cAAcG,aAAe,wGAGhD,CAEAuC,yBAAAA,CAA0BI,GACtB,OAAOA,EAAQ1Q,OAAO,IAAIE,IAAIyQ,IAAO,CACjC7b,KAAmB,iBAAb6b,EAAIrc,KAA0B,YAAc,OAClD8E,QAAS,GAAGuX,EAAIrc,SAASqc,EAAIvX,YAErC,CAEAmX,kBAAAA,CAAmB3C,GACf,OAAKA,GAAqD,IAArCxO,OAAOC,KAAKuO,GAAcrW,OAIxC,yCACCqW,EAAaE,aAAe,qBAC/BF,EAAaI,YAAc,kCACdJ,EAAaG,aAAe,QANnC,EAOf,CAEA,oBAAMiC,CAAeF,GACjB,MAAMxR,EAAYhJ,KAAKC,MAEvB,IACI,MAAMkY,QAAiB8B,MAAM,GAAGzc,KAAKkc,8BAA+B,CAChEQ,OAAQ,OACRC,QAAS,CACL,cAAiB,UAAU3c,KAAK8b,SAChC,eAAgB,oBAEpBgC,KAAMzK,KAAKQ,UAAUmJ,KAGzB,IAAKrC,EAASiC,GAAI,CACd,MAAMmB,QAAkBpD,EAASmC,OAAOkB,MAAM,KAAM,CAAG,IACvD,MAAM,IAAIjb,MAAM,aAAa4X,EAASkC,WAAWkB,EAAU9c,OAAO+B,SAAW2X,EAASd,aAC1F,CAEA,MAAMtO,QAAaoP,EAASmC,OACtB9Q,EAAWxJ,KAAKC,MAAQ+I,EAI9B,OAFAhL,QAAQC,IAAI,4CAA4CuL,OAEjDT,CAEX,CAAE,MAAOtK,GACL,MAAM+K,EAAWxJ,KAAKC,MAAQ+I,EAE9B,MADAhL,QAAQS,MAAM,wCAAwC+K,QAAgB/K,GAChEA,CACV,CACJ,CAEAmc,eAAAA,CAAgBa,GACZ,IACI,IAAKA,EAAYC,SAA0C,IAA/BD,EAAYC,QAAQzZ,OAC5C,MAAM,IAAI1B,MAAM,sCAGpB,MAAMob,EAASF,EAAYC,QAAQ,GACnC,IAAKC,EAAOnb,UAAYmb,EAAOnb,QAAQsD,QACnC,MAAM,IAAIvD,MAAM,uCAGpB,IAAIuD,EAAU6X,EAAOnb,QAAQsD,QAAQ2S,OAUrC,OAPA3S,EAAUtG,KAAKoe,uBAAuB9X,GAGlCA,EAAQ7B,OAAS,MACjB6B,EAAUA,EAAQ+X,UAAU,EAAG,MAAQ,OAGpC/X,CAEX,CAAE,MAAOrF,GAEL,MADAT,QAAQS,MAAM,+CAAgDA,GACxD,IAAI8B,MAAM,+BAA+B9B,EAAM+B,UACzD,CACJ,CAEAob,sBAAAA,CAAuB9X,GAgBnB,OALAA,GANAA,EAAUA,EAAQ+S,QAAQ,qBAAsB,CAACiF,EAAOnP,IAE7C,MAAMA,MAICkK,QAAQ,6BAA8B,CAACiF,EAAO/X,EAAM5F,IAE3D,aAAa4F,EAAKwT,kBAAkBpZ,IAInD,CAEA0c,YAAAA,CAAara,EAAS2X,EAAUjE,GAC5B1W,KAAKuc,eAAelY,KAAK,CACrBC,UAAW9B,KAAKC,MAChBjB,KAAMkV,EAAQlV,MAAQ,UACtBwB,QAASA,EACT2X,SAAUA,EACVwB,MAAOnc,KAAKmc,MACZoC,OAAQ5D,EAASlW,SAIjBzE,KAAKuc,eAAe9X,OAAS,KAC7BzE,KAAKuc,eAAe1R,OAE5B,CAEAkS,cAAAA,GACI,MAAMta,EAAMD,KAAKC,MAKX+b,EAAS/b,EAJE,IAKXgc,EAAiB3I,MAAMC,KAAK/V,KAAKsc,YAAYoC,UAAUrZ,OAAOsZ,GAAQA,EAAOH,GASnF,OANAxe,KAAKsc,YAAYtX,QACjByZ,EAAeG,QAAQ,CAACD,EAAME,KAC1B7e,KAAKsc,YAAYlV,IAAIyX,EAAOF,OAI5BF,EAAeha,QAbC,MAkBpBzE,KAAKsc,YAAYlV,IAAIpH,KAAKsc,YAAYzM,KAAMpN,IACrC,EACX,CAIA,iBAAMqc,CAAYvY,EAAM3E,EAAU,CAAC,GAC/B,MAAMob,EAAS,wBAAwBzW,mBAAsB3E,EAAQ2O,YAAc,wBAAwB3O,EAAQ2O,cAAgB,0OAYnI,aAAavQ,KAAK4a,eAAeoC,EAAQ,CACrClC,aAAc,CAAEI,WAAY,UAC5B6D,eAAgB,kBAExB,CAEA,iBAAMC,CAAYC,EAAMtW,EAAS,UAC7B,MAAMqU,EAAS,qBAAqBiC,iBAAoBtW,qEAExD,aAAa3I,KAAK4a,eAAeoC,EAAQ,CACrClC,aAAc,CAAEI,WAAYvS,GAC5BoW,eAAgB,oBAExB,CAEA,yBAAMG,CAAoB3Y,EAAM4Y,EAASzI,EAAU,IAC/C,MAAMsG,EAAS,sBAAsBzW,WAAc4Y,MAAYzI,EAAU,aAAaA,IAAY,iIAQlG,aAAa1W,KAAK4a,eAAeoC,EAAQ,CACrC+B,eAAgB,0BAExB,CAIAK,YAAAA,CAAaC,GACLA,EAAUvD,SAAQ9b,KAAK8b,OAASuD,EAAUvD,QAC1CuD,EAAUnD,UAASlc,KAAKkc,QAAUmD,EAAUnD,SAC5CmD,EAAUlD,QAAOnc,KAAKmc,MAAQkD,EAAUlD,OACxCkD,EAAUjD,YAAWpc,KAAKoc,UAAYiD,EAAUjD,WAChDiD,EAAUhD,cAAarc,KAAKqc,YAAcgD,EAAUhD,aAExD7b,QAAQC,IAAI,2CAChB,CAEA6e,SAAAA,GACI,MAAO,CACH3e,KAAMX,KAAKW,KACXwb,MAAOnc,KAAKmc,MACZC,UAAWpc,KAAKoc,UAChBC,YAAarc,KAAKqc,YAClBvU,YAAa9H,KAAK8H,YAClByX,YAAavf,KAAK8b,OAE1B,CAEAnM,QAAAA,GACI,MAAM8O,EAAiBze,KAAKuc,eAAelX,OAAOma,GAC9Chd,KAAKC,MAAQ+c,EAAIlb,UAAY,MAGjC,MAAO,CACH3D,KAAMX,KAAKW,KACXmH,YAAa9H,KAAK8H,YAClB2X,cAAezf,KAAKuc,eAAe9X,OACnCga,eAAgBA,EAAeha,OAC/Bib,oBAAqB1f,KAAK2f,+BAC1BC,gBAAiB,CACbC,QAAS7f,KAAKsc,YAAYzM,KAC1BxG,IAAK,GACLyW,SAAU,KAGtB,CAEAH,4BAAAA,GACI,GAAmC,IAA/B3f,KAAKuc,eAAe9X,OAAc,OAAO,EAE7C,MAAMga,EAAiBze,KAAKuc,eAAerP,OAAO,IAC5C6S,EAAYtB,EAAeuB,OAAO,CAACC,EAAKT,IAAQS,GAAOT,EAAIU,cAAgB,KAAO,GACxF,OAAOC,KAAKC,MAAML,EAAYtB,EAAeha,OACjD,CAGA4b,OAAAA,GACIrgB,KAAKsc,YAAYtX,QACjBhF,KAAKuc,eAAiB,GACtBvc,KAAK8H,aAAc,EACnBtH,QAAQC,IAAI,qCAChB,EC5XG,MAAM6f,eACTvgB,WAAAA,CAAY8b,EAAS,CAAC,GAClB7b,KAAKW,KAAO,SACZX,KAAK8b,OAASD,EAAOC,QAAUC,QAAQC,IAAIuE,eAC3CvgB,KAAKkc,QAAUL,EAAOK,SAAW,yBACjClc,KAAKmc,MAAQN,EAAOM,OAAS,QAC7Bnc,KAAKoc,UAAYP,EAAOO,WAAa,IACrCpc,KAAKqc,YAAcR,EAAOQ,aAAe,GACzCrc,KAAK8H,aAAc,EACnB9H,KAAKsc,YAAc,IAAIlc,IACvBJ,KAAKuc,eAAiB,GACtBvc,KAAKwgB,WAAa,CAAE9Q,MAAO,EAAGsN,OAAQ,EAAGyD,WAAY,EACzD,CAEA,gBAAMlgB,GACFC,QAAQC,IAAI,sCAEZ,IAEI,IAAKT,KAAK8b,OACN,MAAM,IAAI/Y,MAAM,2CAId/C,KAAKwc,iBAEXxc,KAAK8H,aAAc,EACnBtH,QAAQC,IAAI,6CAEhB,CAAE,MAAOQ,GAEL,MADAT,QAAQS,MAAM,2CAA4CA,GACpDA,CACV,CACJ,CAEA,oBAAMub,GACF,IACI,MAAM7B,QAAiB8B,MAAM,GAAGzc,KAAKkc,oBAAqB,CACtDQ,OAAQ,MACRC,QAAS,CACL,cAAiB,UAAU3c,KAAK8b,SAChC,eAAgB,sBAIxB,IAAKnB,EAASiC,GACV,MAAM,IAAI7Z,MAAM,oBAAoB4X,EAASkC,UAAUlC,EAASd,cAGpE,MAAMtO,QAAaoP,EAASmC,OAE5B,OADAtc,QAAQC,IAAI,iDACL8K,CAEX,CAAE,MAAOtK,GAEL,MADAT,QAAQS,MAAM,8CAA+CA,GACvD,IAAI8B,MAAM,gCAAgC9B,EAAM+B,UAC1D,CACJ,CAEA,oBAAM4X,CAAe5X,EAAS0T,EAAU,CAAC,GACrC,IAAK1W,KAAK8H,YACN,MAAM,IAAI/E,MAAM,oCAIpB,IAAK/C,KAAK+c,iBACN,MAAM,IAAIha,MAAM,4DAGpB,IAEI,MAAMia,EAAShd,KAAKid,YAAYja,EAAS0T,GAGnCiE,QAAiB3a,KAAKkd,eAAeF,GAGrCG,EAAoBnd,KAAKod,gBAAgBzC,GAQ/C,OALA3a,KAAK0gB,iBAAiB/F,EAASjD,OAG/B1X,KAAKqd,aAAara,EAASma,EAAmBzG,EAASiE,EAASjD,OAEzDyF,CAEX,CAAE,MAAOlc,GAEL,MADAT,QAAQS,MAAM,gDAAiDA,GACzD,IAAI8B,MAAM,mBAAmB9B,EAAM+B,UAC7C,CACJ,CAEAia,WAAAA,CAAYja,EAAS0T,GACjB,MAAM4G,EAAetd,KAAKud,gBAAgB7G,GACpCQ,EAAsBlX,KAAKwd,0BAA0B9G,EAAQmE,eAAiB,IAC9EC,EAAe9a,KAAKyd,mBAAmB/G,EAAQoE,cAAgB,CAAC,GAEtE,MAAO,CACHqB,MAAOnc,KAAKmc,MACZ/W,SAAU,CACN,CACIpD,KAAM,SACNsE,QAASgX,MAEVpG,EACH,CACIlV,KAAM,OACNsE,QAAS,GAAGwU,iBAA4B9X,MAGhD0a,WAAY1d,KAAKoc,UACjBC,YAAarc,KAAKqc,YAClBsE,iBAAkB,GAClBC,kBAAmB,GAE3B,CAEArD,eAAAA,CAAgB7G,GACZ,MAAO,wiCAsBFA,EAAQoE,cAAcI,YAAc,qBACvCxE,EAAQoE,cAAcE,aAAe,oCAChCtE,EAAQoE,cAAcG,aAAe,6EAGhD,CAEAuC,yBAAAA,CAA0BI,GACtB,OAAOA,EAAQ1Q,OAAO,GAAGE,IAAIyQ,IAAO,CAChC7b,KAAmB,iBAAb6b,EAAIrc,KAA0B,YAAc,OAClD8E,QAASuX,EAAIvX,QAAQ7B,OAAS,IAAMoZ,EAAIvX,QAAQ+X,UAAU,EAAG,KAAO,MAAQR,EAAIvX,UAExF,CAEAmX,kBAAAA,CAAmB3C,GACf,OAAKA,GAAqD,IAArCxO,OAAOC,KAAKuO,GAAcrW,OAIxC,yCACCqW,EAAaE,aAAe,qBAC/BF,EAAaI,YAAc,uBACzBJ,EAAaG,aAAe,QANxB,EAOf,CAEA,oBAAMiC,CAAeF,GACjB,MAAMxR,EAAYhJ,KAAKC,MAEvB,IACI,MAAMkY,QAAiB8B,MAAM,GAAGzc,KAAKkc,8BAA+B,CAChEQ,OAAQ,OACRC,QAAS,CACL,cAAiB,UAAU3c,KAAK8b,SAChC,eAAgB,oBAEpBgC,KAAMzK,KAAKQ,UAAUmJ,KAGzB,IAAKrC,EAASiC,GAAI,CACd,MAAMmB,QAAkBpD,EAASmC,OAAOkB,MAAM,KAAM,CAAG,IAGvD,GAAwB,MAApBrD,EAASkC,OACT,MAAM,IAAI9Z,MAAM,sEACb,GAAwB,MAApB4X,EAASkC,OAChB,MAAM,IAAI9Z,MAAM,2CACb,GAAwB,MAApB4X,EAASkC,OAChB,MAAM,IAAI9Z,MAAM,wBAAwBgb,EAAU9c,OAAO+B,SAAW,2BAGxE,MAAM,IAAID,MAAM,aAAa4X,EAASkC,WAAWkB,EAAU9c,OAAO+B,SAAW2X,EAASd,aAC1F,CAEA,MAAMtO,QAAaoP,EAASmC,OACtB9Q,EAAWxJ,KAAKC,MAAQ+I,EAI9B,OAFAhL,QAAQC,IAAI,6CAA6CuL,OAElDT,CAEX,CAAE,MAAOtK,GACL,MAAM+K,EAAWxJ,KAAKC,MAAQ+I,EAE9B,MADAhL,QAAQS,MAAM,yCAAyC+K,QAAgB/K,GACjEA,CACV,CACJ,CAEAmc,eAAAA,CAAgBa,GACZ,IACI,IAAKA,EAAYC,SAA0C,IAA/BD,EAAYC,QAAQzZ,OAC5C,MAAM,IAAI1B,MAAM,sCAGpB,MAAMob,EAASF,EAAYC,QAAQ,GACnC,IAAKC,EAAOnb,UAAYmb,EAAOnb,QAAQsD,QACnC,MAAM,IAAIvD,MAAM,uCAGpB,IAAIuD,EAAU6X,EAAOnb,QAAQsD,QAAQ2S,OAerC,OAZA3S,EAAUtG,KAAKoe,uBAAuB9X,GAGT,WAAzB6X,EAAO0C,gBACPva,GAAW,wDAIXA,EAAQ7B,OAAS,MACjB6B,EAAUA,EAAQ+X,UAAU,EAAG,MAAQ,OAGpC/X,CAEX,CAAE,MAAOrF,GAEL,MADAT,QAAQS,MAAM,gDAAiDA,GACzD,IAAI8B,MAAM,+BAA+B9B,EAAM+B,UACzD,CACJ,CAEAob,sBAAAA,CAAuB9X,GAkBnB,OAJAA,GALAA,GALAA,EAAUA,EAAQ+S,QAAQ,qBAAsB,CAACiF,EAAOnP,IAC7C,4BAA4BA,OAIrBkK,QAAQ,6BAA8B,CAACiF,EAAO/X,EAAM5F,IAC3D,sBAAsB4F,EAAKwT,kBAAkBpZ,QAItC0Y,QAAQ,6BAA8B,CAACiF,EAAO/X,EAAMua,IAC3D,wBAAwBva,UAAaua,MAIpD,CAEAJ,gBAAAA,CAAiBhJ,GACTA,IACA1X,KAAKwgB,WAAW9Q,OAASgI,EAAMqJ,cAAgB,EAC/C/gB,KAAKwgB,WAAWxD,QAAUtF,EAAMsJ,eAAiB,EACjDhhB,KAAKwgB,WAAWC,YAAc/I,EAAMuJ,mBAAqB,EAEjE,CAEA5D,YAAAA,CAAara,EAAS2X,EAAUjE,EAASgB,GACrC1X,KAAKuc,eAAelY,KAAK,CACrBC,UAAW9B,KAAKC,MAChBjB,KAAMkV,EAAQlV,MAAQ,UACtBwB,QAASA,EACT2X,SAAUA,EACVwB,MAAOnc,KAAKmc,MACZzE,MAAOA,EACPwI,aAAc1d,KAAKC,OAASiU,EAAQlL,WAAahJ,KAAKC,SAItDzC,KAAKuc,eAAe9X,OAAS,KAC7BzE,KAAKuc,eAAe1R,OAE5B,CAEAkS,cAAAA,GACI,MAAMta,EAAMD,KAAKC,MAKX+b,EAAS/b,EAJE,IAKXgc,EAAiB3I,MAAMC,KAAK/V,KAAKsc,YAAYoC,UAAUrZ,OAAOsZ,GAAQA,EAAOH,GASnF,OANAxe,KAAKsc,YAAYtX,QACjByZ,EAAeG,QAAQ,CAACD,EAAME,KAC1B7e,KAAKsc,YAAYlV,IAAIyX,EAAOF,OAI5BF,EAAeha,QAbC,MAkBpBzE,KAAKsc,YAAYlV,IAAIpH,KAAKsc,YAAYzM,KAAMpN,IACrC,EACX,CAIA,iBAAMqc,CAAYvY,EAAM3E,EAAU,CAAC,GAC/B,MAAMob,EAAS,kCAAkCzW,sBAEvD3E,EAAQ2O,YAAc,wBAAwB3O,EAAQ2O,cAAgB,OACtE3O,EAAQ4H,MAAQ,sBAAsB5H,EAAQ4H,QAAU,OACxD5H,EAAQI,KAAO,sBAAsBJ,EAAQI,OAAS,uaAchD,aAAahC,KAAK4a,eAAeoC,EAAQ,CACrClC,aAAc,CAAEI,WAAY,UAC5B6D,eAAgB,kBAExB,CAEA,iBAAMC,CAAYC,EAAMtW,EAAS,UAC7B,MAAMqU,EAAS,oCAAoCiC,iBAAoBtW,4OAWvE,aAAa3I,KAAK4a,eAAeoC,EAAQ,CACrClC,aAAc,CAAEI,WAAYvS,GAC5BoW,eAAgB,oBAExB,CAEA,yBAAMG,CAAoB3Y,EAAM4Y,EAASzI,EAAU,IAC/C,MAAMsG,EAAS,sBAAsBzW,uBAA0B4Y,SAErEzI,EAAU,uBAAuBA,IAAY,yPAUvC,aAAa1W,KAAK4a,eAAeoC,EAAQ,CACrC+B,eAAgB,0BAExB,CAEA,uBAAMmC,CAAkBC,EAAYC,EAAaC,EAAa,GAC1D,MAAMrE,EAAS,oCAAoCmE,6BAAsCE,kBAA2BD,iTAYpH,aAAaphB,KAAK4a,eAAeoC,EAAQ,CACrClC,aAAc,CAAEI,WAAY,UAC5B6D,eAAgB,wBAExB,CAEA,kBAAMuC,CAAaC,EAAWhb,EAAO,SACjC,MAAMyW,EAAS,oDAAoDuE,YAAoBhb,+PAWvF,aAAavG,KAAK4a,eAAeoC,EAAQ,CACrClC,aAAc,CAAEI,WAAY,UAC5B6D,eAAgB,mBAExB,CAIAK,YAAAA,CAAaC,GACLA,EAAUvD,SAAQ9b,KAAK8b,OAASuD,EAAUvD,QAC1CuD,EAAUnD,UAASlc,KAAKkc,QAAUmD,EAAUnD,SAC5CmD,EAAUlD,QAAOnc,KAAKmc,MAAQkD,EAAUlD,OACxCkD,EAAUjD,YAAWpc,KAAKoc,UAAYiD,EAAUjD,WAChDiD,EAAUhD,cAAarc,KAAKqc,YAAcgD,EAAUhD,aAExD7b,QAAQC,IAAI,4CAChB,CAEA6e,SAAAA,GACI,MAAO,CACH3e,KAAMX,KAAKW,KACXwb,MAAOnc,KAAKmc,MACZC,UAAWpc,KAAKoc,UAChBC,YAAarc,KAAKqc,YAClBvU,YAAa9H,KAAK8H,YAClByX,YAAavf,KAAK8b,OAClB0E,WAAY,IAAKxgB,KAAKwgB,YAE9B,CAEA7Q,QAAAA,GACI,MAAM8O,EAAiBze,KAAKuc,eAAelX,OAAOma,GAC9Chd,KAAKC,MAAQ+c,EAAIlb,UAAY,MAG3Bkd,EAAkBxhB,KAAK2f,+BACvB8B,EAAsBzhB,KAAKuc,eAAe9X,OAAS,EACnD0b,KAAKC,MAAMpgB,KAAKwgB,WAAW9Q,MAAQ1P,KAAKuc,eAAe9X,QACvD,EAEN,MAAO,CACH9D,KAAMX,KAAKW,KACXmH,YAAa9H,KAAK8H,YAClB2X,cAAezf,KAAKuc,eAAe9X,OACnCga,eAAgBA,EAAeha,OAC/Bib,oBAAqB8B,EACrBhB,WAAY,IAAKxgB,KAAKwgB,YACtBkB,wBAAyBD,EACzB7B,gBAAiB,CACbC,QAAS7f,KAAKsc,YAAYzM,KAC1BxG,IAAK,GACLyW,SAAU,KAEd6B,cAAe3hB,KAAK4hB,yBAE5B,CAEAjC,4BAAAA,GACI,GAAmC,IAA/B3f,KAAKuc,eAAe9X,OAAc,OAAO,EAE7C,MAAMga,EAAiBze,KAAKuc,eAAerP,OAAO,IAC5C6S,EAAYtB,EAAeuB,OAAO,CAACC,EAAKT,IAAQS,GAAOT,EAAIU,cAAgB,KAAO,GACxF,OAAOC,KAAKC,MAAML,EAAYtB,EAAeha,OACjD,CAEAmd,sBAAAA,GAEI,MAAMC,EAAQ,CACV,QAAS,CAAE7E,OAAQ,IAAMyD,WAAY,KACrC,cAAe,CAAEzD,OAAQ,IAAMyD,WAAY,KAC3C,gBAAiB,CAAEzD,OAAQ,KAAOyD,WAAY,OAG5CqB,EAAYD,EAAM7hB,KAAKmc,QAAU0F,EAAM,SACvCE,EAAc/hB,KAAKwgB,WAAWxD,OAAS,IAAQ8E,EAAU9E,OACzDgF,EAAkBhiB,KAAKwgB,WAAWC,WAAa,IAAQqB,EAAUrB,WAEvE,MAAO,CACH/Q,MAAOqS,EAAaC,EACpBhF,OAAQ+E,EACRtB,WAAYuB,EACZC,SAAU,MAElB,CAGA5B,OAAAA,GACIrgB,KAAKsc,YAAYtX,QACjBhF,KAAKuc,eAAiB,GACtBvc,KAAKwgB,WAAa,CAAE9Q,MAAO,EAAGsN,OAAQ,EAAGyD,WAAY,GACrDzgB,KAAK8H,aAAc,EACnBtH,QAAQC,IAAI,sCAChB,ECnfG,MAAMyhB,wBAAwBC,gBACjCpiB,WAAAA,CAAYqiB,EAAaxgB,EAAU,CAAC,GAChCygB,MAAM,CAAC,EAAGzgB,GACV5B,KAAKoiB,YAAcA,CACvB,CAEA,yBAAWvgB,GACP,OAAOQ,QAAQC,MAAMC,YAAY8f,MAAMxgB,eAAgB,CACnDjB,GAAI,sBACJ0hB,MAAO,+BACPC,SAAU,4DACVC,MAAO,IACPC,OAAQ,OACRC,eAAe,EACfC,gBAAgB,EAChBC,eAAe,EACfC,WAAW,EACXC,QAAS,CAAC,6BAElB,CAEAC,OAAAA,GACI,MAAMlH,EAAS7b,KAAKoiB,YAAYvG,OAEhC,MAAO,CAEHmH,QAASnH,EAAOmH,QAChBC,UAAWpH,EAAOoH,UAClBjM,cAAe6E,EAAO7E,cACtBkM,iBAAkBrH,EAAOqH,iBACzBC,uBAAwBtH,EAAOsH,uBAC/BC,iBAAkBvH,EAAOuH,iBACzBC,qBAAsBxH,EAAOwH,qBAC7BC,iBAAkBzH,EAAOyH,iBACzBC,YAAa1H,EAAO0H,YACpBC,yBAA0B3H,EAAO2H,yBAGjCC,UAAWzjB,KAAK0jB,qBAGhBC,gBAAiB3jB,KAAK4jB,qBAGtB3T,iBAAkBjQ,KAAK6jB,sBAE/B,CAEAH,kBAAAA,GACI,MAAMrM,EAAkBrX,KAAKoiB,YAAYvG,OAAOiI,gBAEhD,MAAO,CACH,CACIljB,GAAI,QACJD,KAAM,QACNojB,SAA8B,UAApB1M,GAEd,CACIzW,GAAI,SACJD,KAAM,SACNojB,SAA8B,WAApB1M,GAGtB,CAEAuM,kBAAAA,GACI,MAAMI,EAAU,CAAC,EAsDjB,OAnDAA,EAAQC,MAAQ,CACZtjB,KAAM,QACNqiB,QAAShjB,KAAKoiB,YAAYvG,OAAO4H,UAAUQ,MAAMjB,QACjDlH,OAAQ9b,KAAKoiB,YAAYvG,OAAO4H,UAAUQ,MAAMnI,OAChDM,UAAWpc,KAAKoiB,YAAYvG,OAAO4H,UAAUQ,MAAM7H,UACnDC,YAAarc,KAAKoiB,YAAYvG,OAAO4H,UAAUQ,MAAM5H,YACrD6H,OAAQ,CACJ,CACItjB,GAAI,eACJD,KAAM,eACNojB,SAA4D,iBAAlD/jB,KAAKoiB,YAAYvG,OAAO4H,UAAUQ,MAAM9H,OAEtD,CACIvb,GAAI,eACJD,KAAM,eACNojB,SAA4D,iBAAlD/jB,KAAKoiB,YAAYvG,OAAO4H,UAAUQ,MAAM9H,OAEtD,CACIvb,GAAI,mBACJD,KAAM,mBACNojB,SAA4D,qBAAlD/jB,KAAKoiB,YAAYvG,OAAO4H,UAAUQ,MAAM9H,SAM9D6H,EAAQG,OAAS,CACbxjB,KAAM,SACNqiB,QAAShjB,KAAKoiB,YAAYvG,OAAO4H,UAAUU,OAAOnB,QAClDlH,OAAQ9b,KAAKoiB,YAAYvG,OAAO4H,UAAUU,OAAOrI,OACjDM,UAAWpc,KAAKoiB,YAAYvG,OAAO4H,UAAUU,OAAO/H,UACpDC,YAAarc,KAAKoiB,YAAYvG,OAAO4H,UAAUU,OAAO9H,YACtD6H,OAAQ,CACJ,CACItjB,GAAI,QACJD,KAAM,QACNojB,SAA6D,UAAnD/jB,KAAKoiB,YAAYvG,OAAO4H,UAAUU,OAAOhI,OAEvD,CACIvb,GAAI,cACJD,KAAM,cACNojB,SAA6D,gBAAnD/jB,KAAKoiB,YAAYvG,OAAO4H,UAAUU,OAAOhI,OAEvD,CACIvb,GAAI,gBACJD,KAAM,gBACNojB,SAA6D,kBAAnD/jB,KAAKoiB,YAAYvG,OAAO4H,UAAUU,OAAOhI,SAKxD6H,CACX,CAEAH,mBAAAA,GACI,MAAMzN,EAAepW,KAAKoiB,YAAYvG,OAAOsH,uBAE7C,MAAO,CACH,CACIviB,GAAI,OACJD,KAAM,UACNojB,SAA2B,SAAjB3N,GAEd,CACIxV,GAAI,QACJD,KAAM,SACNojB,SAA2B,UAAjB3N,GAEd,CACIxV,GAAI,eACJD,KAAM,gBACNojB,SAA2B,iBAAjB3N,GAEd,CACIxV,GAAI,WACJD,KAAM,WACNojB,SAA2B,aAAjB3N,GAEd,CACIxV,GAAI,OACJD,KAAM,WACNojB,SAA2B,SAAjB3N,GAGtB,CAEAgO,iBAAAA,CAAkBC,GACdhC,MAAM+B,kBAAkBC,GAGxBA,EAAKjjB,KAAK,oBAAoBkjB,MAAMtkB,KAAKukB,kBAAkB1M,KAAK7X,OAGhEqkB,EAAKjjB,KAAK,iBAAiBkjB,MAAMtkB,KAAKwkB,eAAe3M,KAAK7X,OAG1DqkB,EAAKjjB,KAAK,yBAAyBqjB,GAAG,QAASzkB,KAAK0kB,eAAe7M,KAAK7X,MAC5E,CAEA,uBAAMukB,CAAkBI,GACpBA,EAAMC,iBAEN,MAAMC,EAASF,EAAMG,cACf1J,EAAWyJ,EAAOE,QAAQ3J,SAC1B4J,EAAeH,EAAOI,YAE5BJ,EAAOI,YAAc,cACrBJ,EAAOK,UAAW,EAElB,IAEI,MAAMC,EAAW,IAAIC,SAASplB,KAAKqlB,MAC7BvJ,EAASqJ,EAASzjB,IAAI,aAAa0Z,YACnCe,EAAQgJ,EAASzjB,IAAI,aAAa0Z,WAExC,IAAKU,EACD,MAAM,IAAI/Y,MAAM,yBAIpB,MAAMuiB,EAAmBtlB,KAAKoiB,YAAYqB,UAAU/hB,IAAI0Z,GACxD,IAAIkK,IAAoBA,EAAiB9I,eAIrC,MAAM,IAAIzZ,MAAM,+CAHVuiB,EAAiB9I,eAAe,CAAEV,SAAQK,UAChDlX,GAAGC,cAAcC,KAAK,eAAeiW,yBAK7C,CAAE,MAAOna,GACLgE,GAAGC,cAAcjE,MAAM,2BAA2BA,EAAM+B,UAC5D,CAAE,QACE6hB,EAAOI,YAAcD,EACrBH,EAAOK,UAAW,CACtB,CACJ,CAEA,oBAAMV,CAAeG,GACjBA,EAAMC,uBAEkBW,OAAO3gB,QAAQ,CACnC0d,MAAO,wBACPhc,QAAS,uFACTkf,IAAKA,KAAM,EACXC,GAAIA,KAAM,YAIJzlB,KAAKoiB,YAAYsD,cACvB1lB,KAAK2lB,QAAO,GACZ1gB,GAAGC,cAAcC,KAAK,kDAE9B,CAEAuf,cAAAA,CAAeC,GACX,MAAMiB,EAAQjB,EAAMG,cACd3d,EAAQye,EAAMze,MAAM8R,OAGtB9R,EAAM1C,OAAS,GAAK0C,EAAM1C,OAAS,IACnCmhB,EAAMC,MAAMC,YAAc,UAC1BF,EAAMtD,MAAQ,8BACPnb,EAAM1C,QAAU,IACvBmhB,EAAMC,MAAMC,YAAc,UAC1BF,EAAMtD,MAAQ,mBAEdsD,EAAMC,MAAMC,YAAc,GAC1BF,EAAMtD,MAAQ,GAEtB,CAEA,mBAAMyD,CAAcpB,EAAOQ,GACvB,IAEI,MAAMtJ,EAASxZ,QAAQC,MAAM0jB,aAAab,GAG1CnlB,KAAKoiB,YAAYvG,OAASxZ,QAAQC,MAAMC,YAAYvC,KAAKoiB,YAAYvG,OAAQA,SAGvE7b,KAAKoiB,YAAY6D,oBAGnBpK,EAAO4H,iBACDzjB,KAAKoiB,YAAY8D,sBAIvBrK,EAAOiI,iBAAmBjI,EAAOiI,kBAAoB9jB,KAAKoiB,YAAYvG,OAAOiI,uBACvE9jB,KAAKoiB,YAAY+D,YAAYtK,EAAOiI,iBAG9C7e,GAAGC,cAAcC,KAAK,oCAE1B,CAAE,MAAOlE,GACLT,QAAQS,MAAM,gCAAiCA,GAC/CgE,GAAGC,cAAcjE,MAAM,iCAAiCA,EAAM+B,UAClE,CACJ,CAGA,iBAAaojB,CAAKhE,GAEd,OADwB,IAAIF,gBAAgBE,GACrBuD,QAAO,EAClC,ECxQJ,MAAMU,YACFtmB,WAAAA,GACIC,KAAK8H,aAAc,EACnB9H,KAAKsK,WAAa,CAAC,EACnBtK,KAAKyjB,UAAY,IAAIrjB,IACrBJ,KAAKqX,gBAAkB,KACvBrX,KAAK6b,OAAS,CAAC,EACf7b,KAAKwL,UAAYhJ,KAAKC,KAC1B,CAEA,gBAAMlC,GACFC,QAAQC,IAAI,sCAEZ,UAEUT,KAAKsmB,0BAGLtmB,KAAKumB,6BAGLvmB,KAAKkmB,sBAGXlmB,KAAKwmB,oBAGLxmB,KAAKymB,yBAGLzmB,KAAK0mB,iBD8OV,SAA+BtE,GACb,oBAAVuE,OACPA,MAAMlC,GAAG,cAAe,CAACmC,EAAS5jB,EAAS6jB,KACvC,GAAgB,eAAZ7jB,GAA4B9B,KAAKM,KAAKslB,KAEtC,OADA5E,gBAAgBkE,KAAKhE,IACd,GAIvB,CCpPY2E,CAAsB/mB,MAEtBA,KAAK8H,aAAc,EACnB,MAAMkf,EAAWxkB,KAAKC,MAAQzC,KAAKwL,UAEnChL,QAAQC,IAAI,qDAAqDumB,OAGjEhnB,KAAKinB,sBAET,CAAE,MAAOhmB,GAGL,MAFAT,QAAQS,MAAM,wCAAyCA,GACvDgE,GAAGC,cAAcjE,MAAM,qCAAqCA,EAAM+B,WAC5D/B,CACV,CACJ,CAEA,uBAAMqlB,GACF9lB,QAAQC,IAAI,8CAGZT,KAAK6b,OAAS,CAEVmH,SAAS,EACTC,WAAW,EACXC,kBAAkB,EAClBC,uBAAwB,QAGxBnM,cAAe,MACfkQ,mBAAmB,EACnB1D,yBAA0B,IAG1BM,gBAAiB,QACjBL,UAAW,CACPQ,MAAO,CACHjB,SAAS,EACTlH,OAAQ,GACRK,MAAO,eACPC,UAAW,IACXC,YAAa,IAEjB8H,OAAQ,CACJnB,SAAS,EACTlH,OAAQ,GACRK,MAAO,QACPC,UAAW,IACXC,YAAa,KAKrB+G,kBAAkB,EAClBC,qBAAsB,GACtB8D,+BAA+B,EAG/B7D,kBAAkB,EAClB8D,wBAAwB,EACxB7D,aAAa,GAIjB,IAEI,MAAM8D,EAAcrnB,KAAKsnB,mBAAqB,CAAC,EAC/CtnB,KAAK6b,OAAS,IAAK7b,KAAK6b,UAAWwL,EACvC,CAAE,MAAOpmB,GACLT,QAAQmB,KAAK,uEAAwEV,EACzF,CACJ,CAEAqmB,eAAAA,GAEI,IACI,MAAoB,oBAATpmB,MAAwBA,KAAKqmB,SAC7BrmB,KAAKqmB,SAAS7lB,IAAI,0BAA2B,WAAa,CAAC,EAG3D2R,KAAKC,MAAMC,aAAaC,QAAQ,wBAA0B,KAEzE,CAAE,MACE,MAAO,CAAC,CACZ,CACJ,CAEA,0BAAM+S,GACF/lB,QAAQC,IAAI,+CAGZT,KAAKsK,WAAW1C,kBAAoB,IAAIoI,wBAClChQ,KAAKsK,WAAW1C,kBAAkBrH,aAGxCP,KAAKsK,WAAWyM,cAAgB,IAAIjX,cAAcE,KAAKsK,WAAW1C,yBAC5D5H,KAAKsK,WAAWyM,cAAcxW,aAGpCP,KAAKsK,WAAWwM,WAAa,IAAInP,WAC7B3H,KAAKsK,WAAW1C,kBAChB5H,KAAKsK,WAAWyM,qBAEd/W,KAAKsK,WAAWwM,WAAWvW,aAGjCP,KAAKsK,WAAWkd,cAAgB,IAAI3Q,cAChC7W,KAAKsK,WAAW1C,kBAChB5H,KAAKsK,WAAWwM,WAChB9W,KAAKsK,WAAWyM,qBAEd/W,KAAKsK,WAAWkd,cAAcjnB,aAEpCC,QAAQC,IAAI,uDAChB,CAEA,yBAAMylB,GAIF,GAHA1lB,QAAQC,IAAI,oDAGRT,KAAK6b,OAAO4H,UAAUQ,MAAMjB,QAC5B,IACI,MAAMyE,EAAgB,IAAI7L,cAAc5b,KAAK6b,OAAO4H,UAAUQ,aACxDwD,EAAclnB,aACpBP,KAAKyjB,UAAUrc,IAAI,QAASqgB,GAC5BjnB,QAAQC,IAAI,6CAChB,CAAE,MAAOQ,GACLT,QAAQmB,KAAK,qDAAsDV,EACvE,CAIJ,GAAIjB,KAAK6b,OAAO4H,UAAUU,OAAOnB,QAC7B,IACI,MAAM0E,EAAiB,IAAIpH,eAAetgB,KAAK6b,OAAO4H,UAAUU,cAC1DuD,EAAennB,aACrBP,KAAKyjB,UAAUrc,IAAI,SAAUsgB,GAC7BlnB,QAAQC,IAAI,8CAChB,CAAE,MAAOQ,GACLT,QAAQmB,KAAK,sDAAuDV,EACxE,OAIEjB,KAAKyX,oBACf,CAEA,wBAAMA,GACF,MAAMkQ,EAAsB3nB,KAAK6b,OAAOiI,gBAClC1I,EAAWpb,KAAKyjB,UAAU/hB,IAAIimB,GAEpC,GAAIvM,EACApb,KAAKqX,gBAAkB+D,EACvB5a,QAAQC,IAAI,+CAA+C2a,EAASza,YACjE,CAEH,MAAMinB,EAAgB5nB,KAAKyjB,UAAU/E,SAASmJ,OAAO1gB,MACjDygB,GACA5nB,KAAKqX,gBAAkBuQ,EACvBpnB,QAAQC,IAAI,uDAAuDmnB,EAAcjnB,SAEjFH,QAAQmB,KAAK,kDAErB,CAGI3B,KAAKqX,iBAAmBrX,KAAKsK,WAAWkd,qBAClCxnB,KAAKsK,WAAWkd,cAAchN,cAAcxa,KAAKqX,gBAAgB1W,KAAKoZ,cAEpF,CAEAyM,iBAAAA,GACIhmB,QAAQC,IAAI,sDAES,oBAAVkmB,OAEPA,MAAMlC,GAAG,gBAAiB,CAACqD,EAAKzD,EAAM9Y,KAC9BvL,KAAKsK,WAAWkd,eAChBxnB,KAAKsK,WAAWkd,cAAcO,gBAAgBD,EAAKzD,EAAM9Y,KAKjEob,MAAMlC,GAAG,oBAAqB,CAACzhB,EAASpB,EAAS4W,KACzCxY,KAAKsK,WAAWkd,eAChBxnB,KAAKsK,WAAWkd,cAAcjP,cAAcvV,EAASpB,EAAS4W,KAKtEmO,MAAMlC,GAAG,cAAe,CAAChc,EAAO8C,EAAM3J,EAAS4W,KACvCxY,KAAKsK,WAAWwM,YAChB9W,KAAKsK,WAAWwM,WAAWkR,cAAcvf,EAAO8C,EAAM3J,EAAS4W,KAKvEmO,MAAMlC,GAAG,sBAAuB,KAC5BzkB,KAAKsmB,sBAGT9lB,QAAQC,IAAI,oDAGZD,QAAQC,IAAI,2DAEpB,CAEAgmB,sBAAAA,GACIjmB,QAAQC,IAAI,yDAEQ,oBAATS,MAAwBA,KAAKqmB,UAEpCrmB,KAAKqmB,SAASU,SAAS,0BAA2B,SAAU,CACxDtnB,KAAM,6BACNunB,KAAM,gDACNC,MAAO,QACPtM,QAAQ,EACRtV,KAAM+F,OACN8b,QAAS,CAAC,IAIdlnB,KAAKqmB,SAASU,SAAS,0BAA2B,UAAW,CACzDtnB,KAAM,0BACNunB,KAAM,+CACNC,MAAO,QACPtM,QAAQ,EACRtV,KAAM8hB,QACND,SAAS,EACTE,SAAUnhB,IACNnH,KAAK6b,OAAOmH,QAAU7b,GACjBA,GAASnH,KAAKsK,WAAWkd,eAC1BxnB,KAAKsK,WAAWkd,cAAce,aAK1CrnB,KAAKqmB,SAASU,SAAS,0BAA2B,kBAAmB,CACjEtnB,KAAM,wBACNunB,KAAM,oCACNC,MAAO,QACPtM,QAAQ,EACRtV,KAAMiiB,OACNtK,QAAS,CACL,MAAS,QACT,OAAU,UAEdkK,QAAS,QACTE,SAAUnhB,IACNnH,KAAKmmB,YAAYhf,MAIzBjG,KAAKqmB,SAASU,SAAS,0BAA2B,YAAa,CAC3DtnB,KAAM,aACNunB,KAAM,0CACNC,MAAO,QACPtM,QAAQ,EACRtV,KAAM8hB,QACND,SAAS,EACTE,SAAUnhB,IACNnH,KAAK6b,OAAOoH,UAAY9b,KAIhC3G,QAAQC,IAAI,2DAGZD,QAAQC,IAAI,kEAEpB,CAEAimB,cAAAA,GACIlmB,QAAQC,IAAI,8CAGZ,MAAM4H,EAAM,CAERtB,cAAeA,IAAM/G,KAAK8H,YAC1B6H,SAAUA,IAAM3P,KAAK2P,WACrB2P,UAAWA,KAAA,IAAYtf,KAAK6b,SAG5B4M,aAAcA,IAAM3S,MAAMC,KAAK/V,KAAKyjB,UAAUlX,QAC9Cmc,mBAAoBA,IAAM1oB,KAAKqX,iBAAiB1W,MAAQ,KACxDwlB,YAAcxlB,GAASX,KAAKmmB,YAAYxlB,GAGxC8K,gBAAkBuI,GAAWhU,KAAKsK,WAAW1C,mBAAmB6D,gBAAgBuI,KAAW,EAC3FM,gBAAiBA,CAACN,EAAQG,IAAYnU,KAAKsK,WAAW1C,mBAAmB0M,gBAAgBN,EAAQG,GACjGjB,mBAAqB1J,GAAUxJ,KAAKsK,WAAW1C,mBAAmBsL,mBAAmB1J,GAGrFgH,YAAaA,CAAClK,EAAS1E,IAAY5B,KAAKsK,WAAWkd,eAAehX,YAAYlK,EAAS1E,GACvF8W,eAAiBzJ,GAAYjP,KAAKsK,WAAWkd,eAAe9L,qBAAqBzM,GAGjFpI,UAAWA,IAAM7G,KAAKsK,WAAWyM,eAAelQ,YAChDS,eAAgBA,IAAMtH,KAAKsK,WAAWyM,eAAezP,iBAGrDqhB,kBAAoB3U,GAAWhU,KAAK2oB,kBAAkB3U,GACtD4U,eAAiB5U,GAAWhU,KAAK4oB,eAAe5U,GAChD0R,YAAaA,IAAM1lB,KAAK0lB,cAGxBmD,WAAYA,IAAM3G,gBAAgBkE,KAAKpmB,OAI3CuI,OAAOugB,eAAiBzgB,EAExB7H,QAAQC,IAAI,yCAChB,CAIA,iBAAM0lB,CAAYhL,GACd,MAAMC,EAAWpb,KAAKyjB,UAAU/hB,IAAIyZ,GACpC,IAAKC,EACD,MAAM,IAAIrY,MAAM,aAAaoY,qBAGjCnb,KAAKqX,gBAAkB+D,EACvBpb,KAAK6b,OAAOiI,gBAAkB3I,EAG1Bnb,KAAKsK,WAAWkd,qBACVxnB,KAAKsK,WAAWkd,cAAchN,cAAcW,SAIhDnb,KAAKimB,oBAEXzlB,QAAQC,IAAI,0CAA0C2a,EAASza,OACnE,CAEA,uBAAMgoB,CAAkB3U,GAChBhU,KAAKsK,WAAW1C,0BACV5H,KAAKsK,WAAW1C,kBAAkB0M,gBAAgBN,GAAQ,EAAM,CAAEtH,OAAO,IAC/ElM,QAAQC,IAAI,6BAA6BuT,yBAEjD,CAEA,oBAAM4U,CAAe5U,GACbhU,KAAKsK,WAAW1C,0BACV5H,KAAKsK,WAAW1C,kBAAkB0M,gBAAgBN,GAAQ,EAAO,CAAEtH,OAAO,IAChFlM,QAAQC,IAAI,6BAA6BuT,uBAEjD,CAEA,iBAAM0R,GACFllB,QAAQmB,KAAK,sCAEb,IAEQ3B,KAAKsK,WAAW1C,yBACV5H,KAAKsK,WAAW1C,kBAAkB4O,iBAI5C,IAAK,MAAM4E,KAAYpb,KAAKyjB,UAAU/E,SAC9BtD,EAASiF,SACTjF,EAASiF,gBAKXrgB,KAAKsmB,oBAEX9lB,QAAQC,IAAI,6CAEhB,CAAE,MAAOQ,GACLT,QAAQS,MAAM,yCAA0CA,EAC5D,CACJ,CAEA,uBAAMglB,GACF,IACwB,oBAAT/kB,MAAwBA,KAAKqmB,gBAC9BrmB,KAAKqmB,SAASngB,IAAI,0BAA2B,SAAUpH,KAAK6b,QAClErb,QAAQC,IAAI,qDAGZ8S,aAAaK,QAAQ,sBAAuBP,KAAKQ,UAAU7T,KAAK6b,SAChErb,QAAQC,IAAI,4DAEpB,CAAE,MAAOQ,GACLT,QAAQS,MAAM,8CAA+CA,EACjE,CACJ,CAEA0O,QAAAA,GACI,MAAMoZ,EAAQ,CACVjhB,YAAa9H,KAAK8H,YAClBkb,QAAShjB,KAAK6b,OAAOmH,QACrBgG,OAAQxmB,KAAKC,MAAQzC,KAAKwL,UAC1B6L,gBAAiBrX,KAAKqX,iBAAiB1W,MAAQ,KAC/C8a,mBAAoB3F,MAAMC,KAAK/V,KAAKyjB,UAAUlX,QAC9CjC,WAAY,CAAC,GAIbtK,KAAKsK,WAAW1C,oBAChBmhB,EAAMze,WAAWrH,YAAcjD,KAAKsK,WAAW1C,kBAAkB+H,YAGjE3P,KAAKsK,WAAWyM,gBAChBgS,EAAMze,WAAWrK,OAASD,KAAKsK,WAAWyM,cAAczP,kBAGxDtH,KAAKsK,WAAWwM,aAChBiS,EAAMze,WAAWwM,WAAa9W,KAAKsK,WAAWwM,WAAWnH,YAGzD3P,KAAKsK,WAAWkd,gBAChBuB,EAAMze,WAAWkd,cAAgBxnB,KAAKsK,WAAWkd,cAAc7X,YAInEoZ,EAAMtF,UAAY,CAAC,EACnB,IAAK,MAAO9iB,EAAMya,KAAapb,KAAKyjB,UAAUrQ,UACtCgI,EAASzL,WACToZ,EAAMtF,UAAU9iB,GAAQya,EAASzL,YAIzC,OAAOoZ,CACX,CAEA9B,oBAAAA,GACI,MACMjkB,EAAU,iCADMhD,KAAKyjB,UAAU5T,0BAGrCrP,QAAQC,IAAI,kBAAkBuC,IAClC,CAGA,wBAAMimB,CAAmBha,GACjBjP,KAAKsK,WAAWkd,qBACVxnB,KAAKsK,WAAWkd,cAAc9L,qBAAqBzM,EAEjE,CAGAia,aAAAA,GACI,MAAO,CACHC,OAAQ,CACJrhB,YAAa9H,KAAK8H,YAClBkhB,OAAQxmB,KAAKC,MAAQzC,KAAKwL,UAC1BqQ,OAAQ7b,KAAK6b,QAEjBvR,WAAY,CACR1C,kBAAmB5H,KAAKsK,WAAW1C,mBAAmB+H,WACtDoH,cAAe/W,KAAKsK,WAAWyM,eAAezP,iBAC9CwP,WAAY9W,KAAKsK,WAAWwM,YAAYnH,WACxC6X,cAAexnB,KAAKsK,WAAWkd,eAAe7X,YAElD8T,UAAWnX,OAAOqH,YACdmC,MAAMC,KAAK/V,KAAKyjB,UAAUrQ,WAAWhG,IAAI,EAAEzM,EAAMya,KAAc,CAC3Dza,EACAya,EAASzL,SAAWyL,EAASzL,WAAa,CAAEhP,KAAMya,EAASza,SAI3E,EAMJ,IAAIyhB,EAAc,KAGlB1X,eAAe0e,wBACX5oB,QAAQC,IAAI,6CAEZ,IAOI,OANA2hB,EAAc,IAAIiE,kBACZjE,EAAY7hB,aAGlBgI,OAAO6Z,YAAcA,EAEdA,CAEX,CAAE,MAAOnhB,GAEL,MADAT,QAAQS,MAAM,yCAA0CA,GAClDA,CACV,CACJ,CAGqB,oBAAV0lB,OAEPA,MAAM0C,KAAK,OAAQD,uBAGnBzC,MAAM0C,KAAK,QAAS,KACZjH,GAAeA,EAAYta,cAC3BtH,QAAQC,IAAI,0CAGR2hB,EAAYvG,OAAOmH,SAAW9hB,KAAKM,KAAKslB,MACxC7hB,GAAGC,cAAcC,KAAK,2CAMlCikB,wBAAwBE,KAAK,KACzB9oB,QAAQC,IAAI,iEAGZD,QAAQC,IAAI,+BAAgC2hB,EAAYzS,YACxDnP,QAAQC,IAAI,0DACZD,QAAQC,IAAI,+DAEbud,MAAM/c,IACLT,QAAQS,MAAM,wCAAyCA,Y","sources":["webpack://foundryvtt-ai-assistant/./scripts/ai-user-manager.js","webpack://foundryvtt-ai-assistant/./scripts/api-handler.js","webpack://foundryvtt-ai-assistant/./scripts/permissions.js","webpack://foundryvtt-ai-assistant/./scripts/chat-interface.js","webpack://foundryvtt-ai-assistant/./scripts/providers/manus.js","webpack://foundryvtt-ai-assistant/./scripts/providers/openai.js","webpack://foundryvtt-ai-assistant/./scripts/config-interface.js","webpack://foundryvtt-ai-assistant/./scripts/main.js"],"sourcesContent":["/**\n * Gerenciador do usuário IA\n * Responsável por criar, gerenciar e manter o usuário dedicado para IA\n */\n\nexport class AIUserManager {\n    constructor() {\n        this.aiUser = null;\n        this.aiUserId = null;\n        this.sessionData = new Map();\n        this.lastActivity = null;\n        this.sessionTimeout = 30 * 60 * 1000; // 30 minutos\n    }\n\n    async initialize() {\n        console.log('AI Assistant | Inicializando AIUserManager...');\n        \n        try {\n            // Verificar se usuário IA já existe\n            this.aiUser = await this.findExistingAIUser();\n            \n            if (!this.aiUser) {\n                console.log('AI Assistant | Usuário IA não encontrado, criando...');\n                await this.createAIUser();\n            } else {\n                console.log('AI Assistant | Usuário IA encontrado:', this.aiUser.name);\n                this.aiUserId = this.aiUser.id;\n                await this.validateAIUser();\n            }\n\n            // Configurar monitoramento de sessão\n            this.setupSessionMonitoring();\n            \n            // Marcar como ativo\n            this.updateActivity();\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro na inicialização do AIUserManager:', error);\n            throw error;\n        }\n    }\n\n    async findExistingAIUser() {\n        // Buscar usuário marcado como IA\n        const aiUser = game.users.find(u => u.getFlag('foundryvtt-ai-assistant', 'isAIUser'));\n        \n        if (aiUser) {\n            // Verificar se ainda é válido\n            const isValid = await this.validateUserData(aiUser);\n            return isValid ? aiUser : null;\n        }\n        \n        return null;\n    }\n\n    async validateUserData(user) {\n        try {\n            // Verificar se usuário ainda existe e tem dados válidos\n            if (!user || !user.id || !user.name) return false;\n            \n            // Verificar se tem as flags necessárias\n            const isAIUser = user.getFlag('foundryvtt-ai-assistant', 'isAIUser');\n            if (!isAIUser) return false;\n            \n            // Verificar se não foi deletado\n            const currentUser = game.users.get(user.id);\n            return currentUser !== undefined;\n            \n        } catch (error) {\n            console.warn('AI Assistant | Erro na validação do usuário:', error);\n            return false;\n        }\n    }\n\n    async createAIUser(options = {}) {\n        const defaultOptions = {\n            name: 'AI Assistant',\n            avatar: 'icons/svg/robot.svg',\n            color: '#00ff88',\n            role: CONST.USER_ROLES.PLAYER\n        };\n\n        const userData = foundry.utils.mergeObject(defaultOptions, options);\n\n        try {\n            // Verificar se nome já existe\n            const existingUser = game.users.find(u => u.name === userData.name);\n            if (existingUser) {\n                userData.name = `${userData.name} (${Date.now()})`;\n            }\n\n            // Criar usuário\n            this.aiUser = await User.create(userData);\n            this.aiUserId = this.aiUser.id;\n\n            // Configurar flags específicas\n            await this.aiUser.setFlag('foundryvtt-ai-assistant', 'isAIUser', true);\n            await this.aiUser.setFlag('foundryvtt-ai-assistant', 'createdAt', Date.now());\n            await this.aiUser.setFlag('foundryvtt-ai-assistant', 'version', '1.0.0');\n            \n            // Configurar permissões iniciais\n            await this.setupInitialPermissions();\n            \n            console.log('AI Assistant | Usuário IA criado com sucesso:', this.aiUser.name);\n            \n            // Notificar outros usuários\n            await this.notifyUserCreation();\n            \n            return this.aiUser;\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao criar usuário IA:', error);\n            throw new Error(`Falha ao criar usuário IA: ${error.message}`);\n        }\n    }\n\n    async setupInitialPermissions() {\n        if (!this.aiUser) return;\n\n        try {\n            // Configurar permissões básicas do FoundryVTT\n            const permissions = {\n                ACTOR_CREATE: true,\n                DRAWING_CREATE: true,\n                ITEM_CREATE: true,\n                JOURNAL_CREATE: true,\n                MACRO_SCRIPT: true,\n                MESSAGE_WHISPER: true,\n                NOTE_CREATE: true,\n                SETTINGS_MODIFY: false,\n                SHOW_CURSOR: true,\n                SHOW_RULER: true,\n                TEMPLATE_CREATE: true,\n                TOKEN_CREATE: true,\n                TOKEN_CONFIGURE: true,\n                WALL_DOORS: true\n            };\n\n            // Aplicar permissões (simulado - FoundryVTT real requer abordagem diferente)\n            await this.aiUser.setFlag('foundryvtt-ai-assistant', 'permissions', permissions);\n\n            console.log('AI Assistant | Permissões iniciais configuradas');\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao configurar permissões:', error);\n        }\n    }\n\n    async validateAIUser() {\n        if (!this.aiUser) return false;\n\n        try {\n            // Verificar se usuário ainda existe\n            const currentUser = game.users.get(this.aiUserId);\n            if (!currentUser) {\n                console.warn('AI Assistant | Usuário IA não encontrado, recriando...');\n                await this.createAIUser();\n                return true;\n            }\n\n            // Verificar flags\n            const isAIUser = currentUser.getFlag('foundryvtt-ai-assistant', 'isAIUser');\n            if (!isAIUser) {\n                console.warn('AI Assistant | Flag de usuário IA perdida, restaurando...');\n                await currentUser.setFlag('foundryvtt-ai-assistant', 'isAIUser', true);\n            }\n\n            // Atualizar referência local\n            this.aiUser = currentUser;\n            \n            return true;\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro na validação do usuário IA:', error);\n            return false;\n        }\n    }\n\n    async updateAIUserPermissions(permissions) {\n        if (!this.aiUser) {\n            throw new Error('Usuário IA não inicializado');\n        }\n\n        try {\n            // Obter permissões atuais\n            const currentPermissions = this.aiUser.getFlag('foundryvtt-ai-assistant', 'permissions') || {};\n            const updatedPermissions = { ...currentPermissions, ...permissions };\n\n            await this.aiUser.setFlag('foundryvtt-ai-assistant', 'permissions', updatedPermissions);\n            \n            // Log da mudança\n            console.log('AI Assistant | Permissões atualizadas:', permissions);\n            \n            // Salvar histórico de mudanças\n            await this.logPermissionChange(permissions);\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao atualizar permissões:', error);\n            throw error;\n        }\n    }\n\n    async logPermissionChange(permissions) {\n        const changeLog = this.aiUser.getFlag('foundryvtt-ai-assistant', 'permissionHistory') || [];\n        \n        changeLog.push({\n            timestamp: Date.now(),\n            changes: permissions,\n            changedBy: game.user.id\n        });\n\n        // Manter apenas os últimos 50 registros\n        if (changeLog.length > 50) {\n            changeLog.splice(0, changeLog.length - 50);\n        }\n\n        await this.aiUser.setFlag('foundryvtt-ai-assistant', 'permissionHistory', changeLog);\n    }\n\n    async deleteAIUser(confirm = false) {\n        if (!confirm) {\n            throw new Error('Confirmação necessária para deletar usuário IA');\n        }\n\n        if (!this.aiUser) {\n            console.warn('AI Assistant | Nenhum usuário IA para deletar');\n            return;\n        }\n\n        try {\n            const userName = this.aiUser.name;\n            const userId = this.aiUserId;\n\n            // Limpar dados associados\n            await this.cleanupUserData();\n\n            // Deletar usuário\n            await this.aiUser.delete();\n\n            // Limpar referências locais\n            this.aiUser = null;\n            this.aiUserId = null;\n            this.sessionData.clear();\n\n            console.log('AI Assistant | Usuário IA deletado:', userName);\n            \n            // Notificar\n            ui.notifications.info(`Usuário IA \"${userName}\" foi removido`);\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao deletar usuário IA:', error);\n            throw error;\n        }\n    }\n\n    async cleanupUserData() {\n        if (!this.aiUser) return;\n\n        try {\n            // Remover mensagens de chat do usuário IA\n            const messages = game.messages.filter(m => m.user?.id === this.aiUserId);\n            for (const message of messages) {\n                await message.delete();\n            }\n\n            // Remover ownership de documentos\n            const collections = [game.actors, game.items, game.scenes, game.journal, game.macros];\n            \n            for (const collection of collections) {\n                for (const document of collection.contents) {\n                    if (document.ownership?.[this.aiUserId]) {\n                        const ownership = { ...document.ownership };\n                        delete ownership[this.aiUserId];\n                        await document.update({ ownership });\n                    }\n                }\n            }\n\n            console.log('AI Assistant | Dados do usuário IA limpos');\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro na limpeza de dados:', error);\n        }\n    }\n\n    setupSessionMonitoring() {\n        // Monitorar atividade a cada 5 minutos\n        setInterval(() => {\n            this.checkSessionTimeout();\n        }, 5 * 60 * 1000);\n    }\n\n    checkSessionTimeout() {\n        if (!this.lastActivity) return;\n\n        const now = Date.now();\n        const timeSinceActivity = now - this.lastActivity;\n\n        if (timeSinceActivity > this.sessionTimeout) {\n            console.log('AI Assistant | Sessão expirada, renovando...');\n            this.refreshSession();\n        }\n    }\n\n    async refreshSession() {\n        try {\n            await this.validateAIUser();\n            this.updateActivity();\n            console.log('AI Assistant | Sessão renovada');\n        } catch (error) {\n            console.error('AI Assistant | Erro ao renovar sessão:', error);\n        }\n    }\n\n    updateActivity() {\n        this.lastActivity = Date.now();\n    }\n\n    async notifyUserCreation() {\n        const messageData = {\n            content: `🤖 <strong>AI Assistant</strong> foi conectado ao mundo e está pronto para ajudar!`,\n            type: CONST.CHAT_MESSAGE_TYPES.OTHER,\n            speaker: {\n                alias: 'Sistema'\n            }\n        };\n\n        await ChatMessage.create(messageData);\n    }\n\n    // Getters\n    getAIUser() {\n        return this.aiUser;\n    }\n\n    getAIUserId() {\n        return this.aiUserId;\n    }\n\n    isInitialized() {\n        return this.aiUser !== null && this.aiUserId !== null;\n    }\n\n    getSessionData(key) {\n        return this.sessionData.get(key);\n    }\n\n    setSessionData(key, value) {\n        this.sessionData.set(key, value);\n        this.updateActivity();\n    }\n\n    clearSessionData() {\n        this.sessionData.clear();\n    }\n\n    async getAIUserStats() {\n        if (!this.aiUser) return null;\n\n        try {\n            const stats = {\n                id: this.aiUserId,\n                name: this.aiUser.name,\n                createdAt: this.aiUser.getFlag('foundryvtt-ai-assistant', 'createdAt'),\n                lastActivity: this.lastActivity,\n                sessionActive: this.lastActivity && (Date.now() - this.lastActivity) < this.sessionTimeout,\n                permissionHistory: this.aiUser.getFlag('foundryvtt-ai-assistant', 'permissionHistory') || [],\n                version: this.aiUser.getFlag('foundryvtt-ai-assistant', 'version')\n            };\n\n            return stats;\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao obter estatísticas:', error);\n            return null;\n        }\n    }\n}\n","/**\n * Manipulador de APIs do FoundryVTT\n * Responsável por todas as operações CRUD nos elementos do jogo\n */\n\nexport class APIHandler {\n    constructor(permissionManager, logger) {\n        this.permissionManager = permissionManager;\n        this.logger = logger;\n        this.initialized = false;\n        this.operationQueue = [];\n        this.isProcessingQueue = false;\n    }\n\n    async initialize() {\n        console.log('AI Assistant | Inicializando APIHandler...');\n        \n        try {\n            // Verificar se as APIs do FoundryVTT estão disponíveis\n            this.validateFoundryAPIs();\n            \n            // Configurar templates padrão\n            this.setupDefaultTemplates();\n            \n            // Inicializar fila de operações\n            this.startQueueProcessor();\n            \n            this.initialized = true;\n            console.log('AI Assistant | APIHandler inicializado com sucesso');\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro na inicialização do APIHandler:', error);\n            throw error;\n        }\n    }\n\n    validateFoundryAPIs() {\n        const requiredAPIs = ['game.actors', 'game.items', 'game.scenes', 'game.journal', 'game.macros', 'game.tables', 'game.playlists'];\n        \n        for (const api of requiredAPIs) {\n            if (!foundry.utils.getProperty(window, api)) {\n                throw new Error(`API necessária não encontrada: ${api}`);\n            }\n        }\n    }\n\n    setupDefaultTemplates() {\n        this.templates = {\n            actor: {\n                character: {\n                    type: 'character',\n                    system: {\n                        abilities: {\n                            str: { value: 10 }, dex: { value: 10 }, con: { value: 10 },\n                            int: { value: 10 }, wis: { value: 10 }, cha: { value: 10 }\n                        },\n                        attributes: { hp: { value: 8, max: 8 }, ac: { value: 10 } },\n                        details: { level: { value: 1 }, xp: { value: 0 } }\n                    }\n                },\n                npc: {\n                    type: 'npc',\n                    system: {\n                        abilities: {\n                            str: { value: 10 }, dex: { value: 10 }, con: { value: 10 },\n                            int: { value: 10 }, wis: { value: 10 }, cha: { value: 10 }\n                        },\n                        attributes: { hp: { value: 4, max: 4 }, ac: { value: 10 } },\n                        details: { cr: 0.125, type: { value: 'humanoid' } }\n                    }\n                }\n            },\n            item: {\n                weapon: {\n                    type: 'weapon',\n                    system: {\n                        weaponType: 'simpleM',\n                        damage: { parts: [['1d6', 'slashing']] },\n                        properties: { finesse: false, light: false }\n                    }\n                },\n                spell: {\n                    type: 'spell',\n                    system: {\n                        level: 1,\n                        school: 'evocation',\n                        components: { verbal: true, somatic: true, material: false }\n                    }\n                }\n            }\n        };\n    }\n\n    startQueueProcessor() {\n        setInterval(async () => {\n            if (!this.isProcessingQueue && this.operationQueue.length > 0) {\n                await this.processOperationQueue();\n            }\n        }, 100);\n    }\n\n    async processOperationQueue() {\n        this.isProcessingQueue = true;\n        \n        try {\n            while (this.operationQueue.length > 0) {\n                const operation = this.operationQueue.shift();\n                await this.executeOperation(operation);\n            }\n        } catch (error) {\n            console.error('AI Assistant | Erro no processamento da fila:', error);\n        } finally {\n            this.isProcessingQueue = false;\n        }\n    }\n\n    async executeOperation(operation) {\n        try {\n            const result = await operation.execute();\n            if (operation.callback) {\n                operation.callback(null, result);\n            }\n        } catch (error) {\n            if (operation.callback) {\n                operation.callback(error, null);\n            }\n        }\n    }\n\n    queueOperation(operation) {\n        return new Promise((resolve, reject) => {\n            this.operationQueue.push({\n                ...operation,\n                callback: (error, result) => {\n                    if (error) reject(error);\n                    else resolve(result);\n                }\n            });\n        });\n    }\n\n    // ========== ATORES ==========\n    \n    async createActor(data, options = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                const startTime = Date.now();\n                \n                try {\n                    // Verificar permissões\n                    if (!this.permissionManager.checkPermission('createActor')) {\n                        throw new Error('Permissão insuficiente para criar atores');\n                    }\n\n                    // Validar dados\n                    this.validateActorData(data);\n\n                    // Aplicar template se necessário\n                    if (!data.system && data.type && this.templates.actor[data.type]) {\n                        data = foundry.utils.mergeObject(this.templates.actor[data.type], data, { inplace: false });\n                    }\n\n                    // Verificar duplicatas\n                    if (options.checkDuplicates !== false) {\n                        const existing = game.actors.find(a => a.name === data.name);\n                        if (existing && !options.allowDuplicates) {\n                            throw new Error(`Ator com nome \"${data.name}\" já existe`);\n                        }\n                    }\n\n                    // Criar ator\n                    const actor = await Actor.create(data);\n\n                    // Log da operação\n                    const duration = Date.now() - startTime;\n                    this.logger?.info('Ator criado', {\n                        actorId: actor.id,\n                        name: actor.name,\n                        type: actor.type,\n                        duration: `${duration}ms`\n                    });\n\n                    return {\n                        success: true,\n                        actor: actor,\n                        message: `Ator \"${actor.name}\" criado com sucesso`\n                    };\n\n                } catch (error) {\n                    this.logger?.error('Erro ao criar ator', { error: error.message, data });\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao criar ator: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    async updateActor(actorId, updates, options = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('updateActor')) {\n                        throw new Error('Permissão insuficiente para atualizar atores');\n                    }\n\n                    const actor = game.actors.get(actorId);\n                    if (!actor) {\n                        throw new Error(`Ator com ID \"${actorId}\" não encontrado`);\n                    }\n\n                    // Validar atualizações\n                    this.validateActorData(updates, true);\n\n                    await actor.update(updates);\n\n                    this.logger?.info('Ator atualizado', {\n                        actorId: actor.id,\n                        name: actor.name,\n                        updatedFields: Object.keys(updates)\n                    });\n\n                    return {\n                        success: true,\n                        actor: actor,\n                        message: `Ator \"${actor.name}\" atualizado com sucesso`\n                    };\n\n                } catch (error) {\n                    this.logger?.error('Erro ao atualizar ator', { actorId, error: error.message });\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao atualizar ator: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    async deleteActor(actorId, options = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('deleteActor')) {\n                        throw new Error('Permissão insuficiente para remover atores');\n                    }\n\n                    const actor = game.actors.get(actorId);\n                    if (!actor) {\n                        throw new Error(`Ator com ID \"${actorId}\" não encontrado`);\n                    }\n\n                    // Verificar se é personagem de jogador\n                    if (actor.type === 'character' && actor.hasPlayerOwner && !options.force) {\n                        throw new Error('Não é possível remover personagem de jogador sem confirmação');\n                    }\n\n                    const actorName = actor.name;\n                    await actor.delete();\n\n                    this.logger?.info('Ator removido', { actorId, name: actorName });\n\n                    return {\n                        success: true,\n                        message: `Ator \"${actorName}\" removido com sucesso`\n                    };\n\n                } catch (error) {\n                    this.logger?.error('Erro ao remover ator', { actorId, error: error.message });\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao remover ator: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    async queryActors(filters = {}, options = {}) {\n        try {\n            if (!this.permissionManager.checkPermission('queryActors')) {\n                throw new Error('Permissão insuficiente para buscar atores');\n            }\n\n            let actors = game.actors.contents;\n\n            // Aplicar filtros\n            if (filters.name) {\n                const nameRegex = new RegExp(filters.name, 'i');\n                actors = actors.filter(actor => nameRegex.test(actor.name));\n            }\n\n            if (filters.type) {\n                actors = actors.filter(actor => actor.type === filters.type);\n            }\n\n            if (filters.level) {\n                actors = actors.filter(actor => {\n                    const level = actor.system?.details?.level?.value;\n                    return level === filters.level;\n                });\n            }\n\n            // Aplicar limite\n            if (options.limit) {\n                actors = actors.slice(0, options.limit);\n            }\n\n            // Formatar resultados\n            const results = actors.map(actor => ({\n                id: actor.id,\n                name: actor.name,\n                type: actor.type,\n                img: actor.img,\n                level: actor.system?.details?.level?.value,\n                hp: actor.system?.attributes?.hp\n            }));\n\n            return {\n                success: true,\n                actors: results,\n                count: results.length,\n                message: `Encontrados ${results.length} ator(es)`\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                message: `Erro na busca: ${error.message}`\n            };\n        }\n    }\n\n    validateActorData(data, isUpdate = false) {\n        if (!isUpdate && !data.name) {\n            throw new Error('Nome é obrigatório');\n        }\n\n        if (data.name && (data.name.length < 1 || data.name.length > 50)) {\n            throw new Error('Nome deve ter entre 1 e 50 caracteres');\n        }\n\n        if (!isUpdate && !data.type) {\n            throw new Error('Tipo é obrigatório');\n        }\n\n        if (data.type && !['character', 'npc', 'vehicle'].includes(data.type)) {\n            throw new Error('Tipo deve ser character, npc ou vehicle');\n        }\n    }\n\n    // ========== ITENS ==========\n    \n    async createItem(data, actorId = null, options = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('createItem')) {\n                        throw new Error('Permissão insuficiente para criar itens');\n                    }\n\n                    this.validateItemData(data);\n\n                    // Aplicar template se necessário\n                    if (!data.system && data.type && this.templates.item[data.type]) {\n                        data = foundry.utils.mergeObject(this.templates.item[data.type], data, { inplace: false });\n                    }\n\n                    let item;\n                    if (actorId) {\n                        const actor = game.actors.get(actorId);\n                        if (!actor) {\n                            throw new Error(`Ator com ID \"${actorId}\" não encontrado`);\n                        }\n                        item = await actor.createEmbeddedDocuments('Item', [data]);\n                        item = item[0];\n                    } else {\n                        item = await Item.create(data);\n                    }\n\n                    this.logger?.info('Item criado', {\n                        itemId: item.id,\n                        name: item.name,\n                        type: item.type,\n                        actorId: actorId\n                    });\n\n                    return {\n                        success: true,\n                        item: item,\n                        message: `Item \"${item.name}\" criado com sucesso`\n                    };\n\n                } catch (error) {\n                    this.logger?.error('Erro ao criar item', { error: error.message, data });\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao criar item: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    async updateItem(itemId, updates, actorId = null) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('updateItem')) {\n                        throw new Error('Permissão insuficiente para atualizar itens');\n                    }\n\n                    let item;\n                    if (actorId) {\n                        const actor = game.actors.get(actorId);\n                        if (!actor) {\n                            throw new Error(`Ator com ID \"${actorId}\" não encontrado`);\n                        }\n                        item = actor.items.get(itemId);\n                    } else {\n                        item = game.items.get(itemId);\n                    }\n\n                    if (!item) {\n                        throw new Error(`Item com ID \"${itemId}\" não encontrado`);\n                    }\n\n                    await item.update(updates);\n\n                    return {\n                        success: true,\n                        item: item,\n                        message: `Item \"${item.name}\" atualizado com sucesso`\n                    };\n\n                } catch (error) {\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao atualizar item: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    validateItemData(data, isUpdate = false) {\n        if (!isUpdate && !data.name) {\n            throw new Error('Nome é obrigatório');\n        }\n\n        if (!isUpdate && !data.type) {\n            throw new Error('Tipo é obrigatório');\n        }\n    }\n\n    // ========== CENAS ==========\n    \n    async createScene(data, options = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('createScene')) {\n                        throw new Error('Permissão insuficiente para criar cenas');\n                    }\n\n                    this.validateSceneData(data);\n\n                    const scene = await Scene.create(data);\n\n                    this.logger?.info('Cena criada', {\n                        sceneId: scene.id,\n                        name: scene.name\n                    });\n\n                    return {\n                        success: true,\n                        scene: scene,\n                        message: `Cena \"${scene.name}\" criada com sucesso`\n                    };\n\n                } catch (error) {\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao criar cena: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    async activateScene(sceneId) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('activateScene')) {\n                        throw new Error('Permissão insuficiente para ativar cenas');\n                    }\n\n                    const scene = game.scenes.get(sceneId);\n                    if (!scene) {\n                        throw new Error(`Cena com ID \"${sceneId}\" não encontrada`);\n                    }\n\n                    await scene.activate();\n\n                    return {\n                        success: true,\n                        scene: scene,\n                        message: `Cena \"${scene.name}\" ativada com sucesso`\n                    };\n\n                } catch (error) {\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao ativar cena: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    validateSceneData(data, isUpdate = false) {\n        if (!isUpdate && !data.name) {\n            throw new Error('Nome é obrigatório');\n        }\n    }\n\n    // ========== JORNAIS ==========\n    \n    async createJournalEntry(data, options = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('createJournal')) {\n                        throw new Error('Permissão insuficiente para criar entradas de jornal');\n                    }\n\n                    this.validateJournalData(data);\n\n                    const journal = await JournalEntry.create(data);\n\n                    this.logger?.info('Entrada de jornal criada', {\n                        journalId: journal.id,\n                        name: journal.name\n                    });\n\n                    return {\n                        success: true,\n                        journal: journal,\n                        message: `Entrada de jornal \"${journal.name}\" criada com sucesso`\n                    };\n\n                } catch (error) {\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao criar entrada de jornal: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    validateJournalData(data, isUpdate = false) {\n        if (!isUpdate && !data.name) {\n            throw new Error('Nome é obrigatório');\n        }\n    }\n\n    // ========== MACROS ==========\n    \n    async createMacro(data, options = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('createMacro')) {\n                        throw new Error('Permissão insuficiente para criar macros');\n                    }\n\n                    this.validateMacroData(data);\n\n                    const macro = await Macro.create(data);\n\n                    this.logger?.info('Macro criado', {\n                        macroId: macro.id,\n                        name: macro.name,\n                        type: macro.type\n                    });\n\n                    return {\n                        success: true,\n                        macro: macro,\n                        message: `Macro \"${macro.name}\" criado com sucesso`\n                    };\n\n                } catch (error) {\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao criar macro: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    async executeMacro(macroId, args = {}) {\n        return this.queueOperation({\n            execute: async () => {\n                try {\n                    if (!this.permissionManager.checkPermission('executeMacro')) {\n                        throw new Error('Permissão insuficiente para executar macros');\n                    }\n\n                    const macro = game.macros.get(macroId);\n                    if (!macro) {\n                        throw new Error(`Macro com ID \"${macroId}\" não encontrado`);\n                    }\n\n                    const result = await macro.execute(args);\n\n                    this.logger?.info('Macro executado', {\n                        macroId: macro.id,\n                        name: macro.name,\n                        args: args\n                    });\n\n                    return {\n                        success: true,\n                        result: result,\n                        message: `Macro \"${macro.name}\" executado com sucesso`\n                    };\n\n                } catch (error) {\n                    return {\n                        success: false,\n                        error: error.message,\n                        message: `Erro ao executar macro: ${error.message}`\n                    };\n                }\n            }\n        });\n    }\n\n    validateMacroData(data, isUpdate = false) {\n        if (!isUpdate && !data.name) {\n            throw new Error('Nome é obrigatório');\n        }\n\n        if (!isUpdate && !data.command) {\n            throw new Error('Comando é obrigatório');\n        }\n    }\n\n    // ========== UTILITÁRIOS ==========\n    \n    async rollDice(formula, options = {}) {\n        try {\n            if (!this.permissionManager.checkPermission('rollDice')) {\n                throw new Error('Permissão insuficiente para rolar dados');\n            }\n\n            const roll = new Roll(formula);\n            await roll.evaluate();\n\n            if (options.toChat) {\n                await roll.toMessage({\n                    speaker: { alias: 'AI Assistant' },\n                    flavor: options.flavor || `Rolagem: ${formula}`\n                });\n            }\n\n            return {\n                success: true,\n                roll: roll,\n                total: roll.total,\n                formula: formula,\n                message: `Rolagem ${formula} = ${roll.total}`\n            };\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                message: `Erro na rolagem: ${error.message}`\n            };\n        }\n    }\n\n    getStats() {\n        return {\n            initialized: this.initialized,\n            queueLength: this.operationQueue.length,\n            isProcessingQueue: this.isProcessingQueue,\n            collections: {\n                actors: game.actors.size,\n                items: game.items.size,\n                scenes: game.scenes.size,\n                journal: game.journal.size,\n                macros: game.macros.size,\n                tables: game.tables.size,\n                playlists: game.playlists.size\n            }\n        };\n    }\n}\n","/**\n * Sistema de permissões para IA\n * Gerencia o que a IA pode e não pode fazer no FoundryVTT\n */\n\nexport class PermissionManager {\n    constructor() {\n        this.permissions = new Map();\n        this.permissionLevels = new Map();\n        this.temporaryPermissions = new Map();\n        this.permissionHistory = [];\n        this.initialized = false;\n    }\n\n    async initialize() {\n        console.log('AI Assistant | Inicializando PermissionManager...');\n        \n        try {\n            // Definir níveis de permissão\n            this.definePermissionLevels();\n            \n            // Carregar permissões salvas\n            await this.loadPermissions();\n            \n            // Configurar permissões padrão se necessário\n            if (this.permissions.size === 0) {\n                await this.setDefaultPermissions();\n            }\n            \n            // Inicializar limpeza de permissões temporárias\n            this.startTemporaryPermissionCleanup();\n            \n            this.initialized = true;\n            console.log('AI Assistant | PermissionManager inicializado com sucesso');\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro na inicialização do PermissionManager:', error);\n            throw error;\n        }\n    }\n\n    definePermissionLevels() {\n        // Definir níveis hierárquicos de permissão\n        this.permissionLevels.set('NONE', {\n            level: 0,\n            name: 'Nenhuma',\n            description: 'Sem permissões',\n            permissions: {}\n        });\n\n        this.permissionLevels.set('BASIC', {\n            level: 1,\n            name: 'Básico',\n            description: 'Permissões básicas de leitura e chat',\n            permissions: {\n                // Chat e comunicação\n                sendMessage: true,\n                sendWhisper: true,\n                rollDice: true,\n                \n                // Consultas (somente leitura)\n                queryActors: true,\n                queryItems: true,\n                queryScenes: true,\n                queryJournal: true,\n                queryMacros: true,\n                queryTables: true,\n                queryPlaylists: true,\n                queryCompendium: true,\n                \n                // Visualização\n                viewDocuments: true\n            }\n        });\n\n        this.permissionLevels.set('STANDARD', {\n            level: 2,\n            name: 'Padrão',\n            description: 'Permissões para criar e editar conteúdo básico',\n            permissions: {\n                // Herdar do BASIC\n                ...this.permissionLevels.get('BASIC').permissions,\n                \n                // Criação e edição básica\n                createItem: true,\n                updateItem: true,\n                deleteItem: true,\n                \n                createJournal: true,\n                updateJournal: true,\n                deleteJournal: true,\n                \n                createMacro: true,\n                updateMacro: true,\n                executeMacro: true,\n                \n                // Manipulação de atores limitada\n                updateActor: true,\n                \n                // Importação de compêndios\n                importFromCompendium: true\n            }\n        });\n\n        this.permissionLevels.set('ADVANCED', {\n            level: 3,\n            name: 'Avançado',\n            description: 'Permissões para manipulação completa de conteúdo',\n            permissions: {\n                // Herdar do STANDARD\n                ...this.permissionLevels.get('STANDARD').permissions,\n                \n                // Criação e manipulação de atores\n                createActor: true,\n                deleteActor: true,\n                \n                // Manipulação de cenas\n                createScene: true,\n                updateScene: true,\n                deleteScene: true,\n                activateScene: true,\n                \n                // Tabelas e playlists\n                createRollTable: true,\n                updateRollTable: true,\n                deleteRollTable: true,\n                rollTable: true,\n                \n                createPlaylist: true,\n                updatePlaylist: true,\n                deletePlaylist: true,\n                playAudio: true,\n                \n                // Tokens e combate\n                createToken: true,\n                updateToken: true,\n                deleteToken: true,\n                manageCombat: true\n            }\n        });\n\n        this.permissionLevels.set('FULL', {\n            level: 4,\n            name: 'Completo',\n            description: 'Todas as permissões (use com cuidado)',\n            permissions: {\n                // Herdar do ADVANCED\n                ...this.permissionLevels.get('ADVANCED').permissions,\n                \n                // Permissões administrativas\n                manageUsers: true,\n                modifySettings: true,\n                manageModules: true,\n                \n                // Operações perigosas\n                deleteAnyDocument: true,\n                executeArbitraryCode: true,\n                modifyPermissions: true,\n                \n                // Sistema\n                accessFileSystem: true,\n                networkAccess: true\n            }\n        });\n    }\n\n    async loadPermissions() {\n        try {\n            // Simular carregamento de configurações (FoundryVTT real usaria game.settings)\n            const savedPermissions = this.getStoredPermissions() || {};\n            const savedLevel = this.getStoredPermissionLevel() || 'BASIC';\n            \n            // Aplicar nível de permissão\n            await this.setPermissionLevel(savedLevel);\n            \n            // Aplicar permissões customizadas\n            for (const [permission, value] of Object.entries(savedPermissions)) {\n                this.permissions.set(permission, value);\n            }\n            \n            console.log('AI Assistant | Permissões carregadas:', savedLevel);\n            \n        } catch (error) {\n            console.warn('AI Assistant | Erro ao carregar permissões, usando padrão:', error);\n            await this.setDefaultPermissions();\n        }\n    }\n\n    getStoredPermissions() {\n        // Simular storage - em FoundryVTT real seria game.settings.get()\n        try {\n            return JSON.parse(localStorage.getItem('ai-assistant-permissions') || '{}');\n        } catch {\n            return {};\n        }\n    }\n\n    getStoredPermissionLevel() {\n        // Simular storage - em FoundryVTT real seria game.settings.get()\n        return localStorage.getItem('ai-assistant-permission-level') || 'BASIC';\n    }\n\n    async savePermissions() {\n        try {\n            const permissionsObj = Object.fromEntries(this.permissions);\n            \n            // Simular storage - em FoundryVTT real seria game.settings.set()\n            localStorage.setItem('ai-assistant-permissions', JSON.stringify(permissionsObj));\n            \n            // Salvar histórico\n            this.permissionHistory.push({\n                timestamp: Date.now(),\n                permissions: { ...permissionsObj },\n                changedBy: 'system' // Em FoundryVTT real seria game.user.id\n            });\n            \n            // Manter apenas os últimos 100 registros\n            if (this.permissionHistory.length > 100) {\n                this.permissionHistory.splice(0, this.permissionHistory.length - 100);\n            }\n            \n            localStorage.setItem('ai-assistant-permission-history', JSON.stringify(this.permissionHistory));\n            \n            console.log('AI Assistant | Permissões salvas');\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao salvar permissões:', error);\n            throw error;\n        }\n    }\n\n    async setDefaultPermissions() {\n        console.log('AI Assistant | Configurando permissões padrão (BASIC)');\n        await this.setPermissionLevel('BASIC');\n    }\n\n    async setPermissionLevel(levelName) {\n        const level = this.permissionLevels.get(levelName);\n        if (!level) {\n            throw new Error(`Nível de permissão \"${levelName}\" não encontrado`);\n        }\n\n        // Limpar permissões atuais\n        this.permissions.clear();\n        \n        // Aplicar permissões do nível\n        for (const [permission, value] of Object.entries(level.permissions)) {\n            this.permissions.set(permission, value);\n        }\n\n        // Salvar nível atual\n        localStorage.setItem('ai-assistant-permission-level', levelName);\n        \n        // Salvar permissões\n        await this.savePermissions();\n        \n        console.log(`AI Assistant | Nível de permissão definido para: ${level.name}`);\n        \n        // Notificar mudança\n        this.notifyPermissionChange(levelName, level.name);\n    }\n\n    checkPermission(action) {\n        if (!this.initialized) {\n            console.warn('AI Assistant | PermissionManager não inicializado, negando permissão');\n            return false;\n        }\n\n        // Verificar permissão temporária primeiro\n        const tempPermission = this.temporaryPermissions.get(action);\n        if (tempPermission && tempPermission.expires > Date.now()) {\n            return tempPermission.granted;\n        }\n\n        // Verificar permissão permanente\n        const hasPermission = this.permissions.get(action) || false;\n        \n        // Log da verificação (apenas para debug)\n        if (!hasPermission) {\n            console.debug(`AI Assistant | Permissão negada para: ${action}`);\n        }\n        \n        return hasPermission;\n    }\n\n    async grantPermission(action, granted = true, options = {}) {\n        if (!this.checkPermission('modifyPermissions') && !options.force) {\n            throw new Error('Permissão insuficiente para modificar permissões');\n        }\n\n        const oldValue = this.permissions.get(action);\n        this.permissions.set(action, granted);\n        \n        // Salvar se não for temporário\n        if (!options.temporary) {\n            await this.savePermissions();\n        }\n        \n        console.log(`AI Assistant | Permissão ${granted ? 'concedida' : 'revogada'}: ${action}`);\n        \n        // Log da mudança\n        this.logPermissionChange(action, oldValue, granted, options);\n        \n        return true;\n    }\n\n    async revokePermission(action, options = {}) {\n        return await this.grantPermission(action, false, options);\n    }\n\n    grantTemporaryPermission(action, duration = 300000, granted = true) { // 5 minutos padrão\n        const expires = Date.now() + duration;\n        \n        this.temporaryPermissions.set(action, {\n            granted: granted,\n            expires: expires,\n            grantedAt: Date.now(),\n            grantedBy: 'system' // Em FoundryVTT real seria game.user.id\n        });\n        \n        console.log(`AI Assistant | Permissão temporária ${granted ? 'concedida' : 'revogada'}: ${action} (expira em ${duration/1000}s)`);\n        \n        // Agendar limpeza\n        setTimeout(() => {\n            this.temporaryPermissions.delete(action);\n            console.log(`AI Assistant | Permissão temporária expirada: ${action}`);\n        }, duration);\n        \n        return true;\n    }\n\n    async requestPermission(action, reason = '', options = {}) {\n        // Se já tem permissão, retornar true\n        if (this.checkPermission(action)) {\n            return { granted: true, message: 'Permissão já concedida' };\n        }\n\n        // Log da solicitação\n        console.log(`AI Assistant | Solicitação de permissão: ${action} - Motivo: ${reason}`);\n        \n        // Se for auto-aprovação para permissões básicas\n        if (options.autoApprove && this.isBasicPermission(action)) {\n            this.grantTemporaryPermission(action, options.duration || 300000);\n            return { granted: true, temporary: true, message: 'Permissão temporária auto-aprovada' };\n        }\n        \n        return { granted: false, pending: true, message: 'Solicitação enviada aos GMs' };\n    }\n\n    isBasicPermission(action) {\n        const basicPermissions = [\n            'rollDice', 'sendMessage', 'queryActors', 'queryItems', \n            'queryScenes', 'viewDocuments'\n        ];\n        return basicPermissions.includes(action);\n    }\n\n    notifyPermissionChange(levelName, levelDisplayName) {\n        console.log(`AI Assistant | Nível de permissão da IA alterado para: ${levelDisplayName}`);\n    }\n\n    logPermissionChange(action, oldValue, newValue, options) {\n        const logEntry = {\n            timestamp: Date.now(),\n            action: action,\n            oldValue: oldValue,\n            newValue: newValue,\n            changedBy: 'system', // Em FoundryVTT real seria game.user.id\n            temporary: options.temporary || false,\n            reason: options.reason || ''\n        };\n        \n        // Adicionar ao histórico local\n        this.permissionHistory.push(logEntry);\n    }\n\n    startTemporaryPermissionCleanup() {\n        // Limpar permissões temporárias expiradas a cada minuto\n        setInterval(() => {\n            const now = Date.now();\n            const expired = [];\n            \n            for (const [action, permission] of this.temporaryPermissions.entries()) {\n                if (permission.expires <= now) {\n                    expired.push(action);\n                }\n            }\n            \n            for (const action of expired) {\n                this.temporaryPermissions.delete(action);\n                console.log(`AI Assistant | Permissão temporária expirada: ${action}`);\n            }\n        }, 60000);\n    }\n\n    // Métodos de conveniência para verificações específicas\n    canCreateActors() {\n        return this.checkPermission('createActor');\n    }\n\n    canDeleteActors() {\n        return this.checkPermission('deleteActor');\n    }\n\n    canModifyScenes() {\n        return this.checkPermission('createScene') || this.checkPermission('updateScene');\n    }\n\n    canExecuteMacros() {\n        return this.checkPermission('executeMacro');\n    }\n\n    canManageUsers() {\n        return this.checkPermission('manageUsers');\n    }\n\n    // Métodos de informação\n    getCurrentPermissionLevel() {\n        return this.getStoredPermissionLevel() || 'BASIC';\n    }\n\n    getAvailablePermissionLevels() {\n        return Array.from(this.permissionLevels.entries()).map(([key, level]) => ({\n            key: key,\n            name: level.name,\n            description: level.description,\n            level: level.level\n        }));\n    }\n\n    getActivePermissions() {\n        const active = [];\n        const now = Date.now();\n        \n        // Permissões permanentes\n        for (const [action, granted] of this.permissions.entries()) {\n            if (granted) {\n                active.push({\n                    action: action,\n                    type: 'permanent',\n                    granted: granted\n                });\n            }\n        }\n        \n        // Permissões temporárias\n        for (const [action, permission] of this.temporaryPermissions.entries()) {\n            if (permission.expires > now) {\n                active.push({\n                    action: action,\n                    type: 'temporary',\n                    granted: permission.granted,\n                    expires: permission.expires,\n                    remaining: permission.expires - now\n                });\n            }\n        }\n        \n        return active;\n    }\n\n    getPermissionHistory(limit = 50) {\n        return this.permissionHistory.slice(-limit);\n    }\n\n    getStats() {\n        return {\n            initialized: this.initialized,\n            currentLevel: this.getCurrentPermissionLevel(),\n            totalPermissions: this.permissions.size,\n            activePermissions: this.getActivePermissions().length,\n            temporaryPermissions: this.temporaryPermissions.size,\n            historyEntries: this.permissionHistory.length\n        };\n    }\n\n    // Método para reset completo (apenas para emergências)\n    async resetToDefault() {\n        console.warn('AI Assistant | Resetando permissões para padrão');\n        \n        this.permissions.clear();\n        this.temporaryPermissions.clear();\n        this.permissionHistory = [];\n        \n        await this.setDefaultPermissions();\n        \n        console.log('AI Assistant | Permissões da IA foram resetadas para o padrão');\n    }\n\n    // Validação de segurança\n    validatePermissionRequest(action, context = {}) {\n        // Lista de ações que requerem validação extra\n        const dangerousActions = [\n            'deleteAnyDocument', 'executeArbitraryCode', 'modifySettings',\n            'manageUsers', 'accessFileSystem', 'networkAccess'\n        ];\n        \n        if (dangerousActions.includes(action)) {\n            console.warn(`AI Assistant | Ação perigosa solicitada: ${action}`);\n            return {\n                valid: false,\n                reason: 'Ação requer aprovação manual de GM',\n                requiresGMApproval: true\n            };\n        }\n        \n        return { valid: true };\n    }\n}\n","/**\n * Interface de chat para IA\n * Responsável por processar comandos, gerenciar conversas e integrar com provedores de IA\n */\n\nexport class ChatInterface {\n    constructor(permissionManager, apiHandler, aiUserManager) {\n        this.permissionManager = permissionManager;\n        this.apiHandler = apiHandler;\n        this.aiUserManager = aiUserManager;\n        this.initialized = false;\n        this.commandPrefix = '/ai';\n        this.commands = new Map();\n        this.conversationHistory = [];\n        this.activeConversations = new Map();\n        this.aiProviders = new Map();\n        this.currentProvider = null;\n    }\n\n    async initialize() {\n        console.log('AI Assistant | Inicializando ChatInterface...');\n        \n        try {\n            // Registrar comandos disponíveis\n            this.registerCommands();\n            \n            // Configurar listeners de chat\n            this.setupChatListeners();\n            \n            // Carregar provedores de IA\n            await this.loadAIProviders();\n            \n            // Configurar provedor padrão\n            await this.setDefaultProvider();\n            \n            this.initialized = true;\n            console.log('AI Assistant | ChatInterface inicializado com sucesso');\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro na inicialização do ChatInterface:', error);\n            throw error;\n        }\n    }\n\n    registerCommands() {\n        // Comandos básicos\n        this.commands.set('help', {\n            description: 'Mostra comandos disponíveis',\n            usage: '/ai help [comando]',\n            permission: 'sendMessage',\n            handler: this.handleHelpCommand.bind(this)\n        });\n\n        this.commands.set('status', {\n            description: 'Mostra status do sistema',\n            usage: '/ai status',\n            permission: 'sendMessage',\n            handler: this.handleStatusCommand.bind(this)\n        });\n\n        // Comandos de dados\n        this.commands.set('roll', {\n            description: 'Rola dados',\n            usage: '/ai roll <fórmula> [motivo]',\n            permission: 'rollDice',\n            handler: this.handleRollCommand.bind(this)\n        });\n\n        // Comandos de criação\n        this.commands.set('create', {\n            description: 'Cria elementos do jogo',\n            usage: '/ai create <tipo> <dados>',\n            permission: 'createActor',\n            handler: this.handleCreateCommand.bind(this)\n        });\n\n        // Comandos de busca\n        this.commands.set('search', {\n            description: 'Busca elementos do jogo',\n            usage: '/ai search <tipo> [filtros]',\n            permission: 'queryActors',\n            handler: this.handleSearchCommand.bind(this)\n        });\n\n        // Comandos de macro\n        this.commands.set('macro', {\n            description: 'Executa macro',\n            usage: '/ai macro <nome> [argumentos]',\n            permission: 'executeMacro',\n            handler: this.handleMacroCommand.bind(this)\n        });\n\n        // Comandos de cena\n        this.commands.set('scene', {\n            description: 'Gerencia cenas',\n            usage: '/ai scene <ação> [parâmetros]',\n            permission: 'createScene',\n            handler: this.handleSceneCommand.bind(this)\n        });\n\n        // Comandos de configuração\n        this.commands.set('config', {\n            description: 'Configura o assistente',\n            usage: '/ai config <opção> <valor>',\n            permission: 'modifySettings',\n            handler: this.handleConfigCommand.bind(this)\n        });\n\n        // Comando de conversa livre\n        this.commands.set('chat', {\n            description: 'Conversa livre com IA',\n            usage: '/ai chat <mensagem>',\n            permission: 'sendMessage',\n            handler: this.handleChatCommand.bind(this)\n        });\n    }\n\n    setupChatListeners() {\n        // Simular hook do FoundryVTT - em implementação real seria:\n        // Hooks.on('createChatMessage', this.onChatMessage.bind(this));\n        \n        // Para demonstração, vamos simular o sistema de hooks\n        this.simulateFoundryHooks();\n    }\n\n    simulateFoundryHooks() {\n        // Simular sistema de mensagens do FoundryVTT\n        console.log('AI Assistant | Hooks de chat configurados (simulação)');\n    }\n\n    async onChatMessage(message, options, userId) {\n        try {\n            const content = message.content;\n            \n            // Verificar se é comando para IA\n            if (content.startsWith(this.commandPrefix)) {\n                await this.processCommand(content, message);\n                return;\n            }\n            \n            // Verificar se é menção à IA\n            if (this.isMentionedInMessage(content)) {\n                await this.processAIMention(content, message);\n                return;\n            }\n            \n            // Adicionar à história de conversação se relevante\n            if (this.isRelevantMessage(message)) {\n                this.addToConversationHistory(message);\n            }\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao processar mensagem de chat:', error);\n            await this.sendErrorMessage(error.message);\n        }\n    }\n\n    async processCommand(content, originalMessage) {\n        const parts = content.slice(this.commandPrefix.length).trim().split(' ');\n        const commandName = parts[0];\n        const args = parts.slice(1);\n\n        console.log(`AI Assistant | Processando comando: ${commandName}`, args);\n\n        const command = this.commands.get(commandName);\n        if (!command) {\n            await this.sendMessage(`❌ Comando \"${commandName}\" não reconhecido. Use \\`/ai help\\` para ver comandos disponíveis.`);\n            return;\n        }\n\n        // Verificar permissões\n        if (!this.permissionManager.checkPermission(command.permission)) {\n            await this.sendMessage(`🔒 Permissão insuficiente para executar \"${commandName}\". Permissão necessária: ${command.permission}`);\n            return;\n        }\n\n        try {\n            await command.handler(args, originalMessage);\n        } catch (error) {\n            console.error(`AI Assistant | Erro no comando ${commandName}:`, error);\n            await this.sendMessage(`❌ Erro ao executar comando: ${error.message}`);\n        }\n    }\n\n    async processAIMention(content, originalMessage) {\n        console.log('AI Assistant | Processando menção à IA:', content);\n        \n        // Extrair a mensagem sem a menção\n        const cleanContent = content.replace(/@AI|@ai/gi, '').trim();\n        \n        if (cleanContent.length === 0) {\n            await this.sendMessage('👋 Olá! Como posso ajudar? Use `/ai help` para ver os comandos disponíveis.');\n            return;\n        }\n\n        // Processar como conversa livre\n        await this.handleFreeConversation(cleanContent, originalMessage);\n    }\n\n    isMentionedInMessage(content) {\n        return /@AI|@ai/i.test(content);\n    }\n\n    isRelevantMessage(message) {\n        // Determinar se a mensagem é relevante para o contexto da IA\n        return message.type === 'ic' || message.type === 'ooc';\n    }\n\n    addToConversationHistory(message) {\n        this.conversationHistory.push({\n            timestamp: Date.now(),\n            user: message.user?.name || 'Unknown',\n            content: message.content,\n            type: message.type\n        });\n\n        // Manter apenas as últimas 100 mensagens\n        if (this.conversationHistory.length > 100) {\n            this.conversationHistory.shift();\n        }\n    }\n\n    // ========== HANDLERS DE COMANDOS ==========\n\n    async handleHelpCommand(args, originalMessage) {\n        if (args.length > 0) {\n            // Ajuda específica para um comando\n            const commandName = args[0];\n            const command = this.commands.get(commandName);\n            \n            if (command) {\n                const helpText = `\n                    <div class=\"ai-help-specific\">\n                        <h3>📖 Ajuda: ${commandName}</h3>\n                        <p><strong>Descrição:</strong> ${command.description}</p>\n                        <p><strong>Uso:</strong> <code>${command.usage}</code></p>\n                        <p><strong>Permissão necessária:</strong> ${command.permission}</p>\n                    </div>\n                `;\n                await this.sendMessage(helpText);\n            } else {\n                await this.sendMessage(`❌ Comando \"${commandName}\" não encontrado.`);\n            }\n        } else {\n            // Ajuda geral\n            const commandList = Array.from(this.commands.entries())\n                .filter(([name, cmd]) => this.permissionManager.checkPermission(cmd.permission))\n                .map(([name, cmd]) => `<li><strong>${name}</strong> - ${cmd.description}</li>`)\n                .join('');\n\n            const helpText = `\n                <div class=\"ai-help-general\">\n                    <h3>🤖 AI Assistant - Comandos Disponíveis</h3>\n                    <ul>${commandList}</ul>\n                    <p><em>Use <code>/ai help &lt;comando&gt;</code> para ajuda específica.</em></p>\n                    <p><em>Você também pode me mencionar com @AI para conversar livremente!</em></p>\n                </div>\n            `;\n            \n            await this.sendMessage(helpText);\n        }\n    }\n\n    async handleStatusCommand(args, originalMessage) {\n        const aiUserStats = await this.aiUserManager.getAIUserStats();\n        const permissionStats = this.permissionManager.getStats();\n        const apiStats = this.apiHandler.getStats();\n        \n        const statusText = `\n            <div class=\"ai-status\">\n                <h3>🔍 Status do AI Assistant</h3>\n                <div class=\"status-section\">\n                    <h4>👤 Usuário IA</h4>\n                    <p>Nome: ${aiUserStats?.name || 'N/A'}</p>\n                    <p>Status: ${aiUserStats?.sessionActive ? '🟢 Ativo' : '🔴 Inativo'}</p>\n                    <p>Última atividade: ${aiUserStats?.lastActivity ? new Date(aiUserStats.lastActivity).toLocaleString() : 'N/A'}</p>\n                </div>\n                <div class=\"status-section\">\n                    <h4>🔐 Permissões</h4>\n                    <p>Nível atual: ${permissionStats.currentLevel}</p>\n                    <p>Permissões ativas: ${permissionStats.activePermissions}</p>\n                    <p>Permissões temporárias: ${permissionStats.temporaryPermissions}</p>\n                </div>\n                <div class=\"status-section\">\n                    <h4>⚙️ API Handler</h4>\n                    <p>Status: ${apiStats.initialized ? '🟢 Inicializado' : '🔴 Não inicializado'}</p>\n                    <p>Fila de operações: ${apiStats.queueLength}</p>\n                    <p>Processando: ${apiStats.isProcessingQueue ? 'Sim' : 'Não'}</p>\n                </div>\n                <div class=\"status-section\">\n                    <h4>🎲 Coleções do Mundo</h4>\n                    <p>Atores: ${apiStats.collections?.actors || 0}</p>\n                    <p>Itens: ${apiStats.collections?.items || 0}</p>\n                    <p>Cenas: ${apiStats.collections?.scenes || 0}</p>\n                    <p>Jornais: ${apiStats.collections?.journal || 0}</p>\n                </div>\n            </div>\n        `;\n        \n        await this.sendMessage(statusText);\n    }\n\n    async handleRollCommand(args, originalMessage) {\n        if (args.length === 0) {\n            await this.sendMessage('❌ Uso: `/ai roll <fórmula> [motivo]`\\nExemplo: `/ai roll 1d20+5 Teste de Percepção`');\n            return;\n        }\n\n        const formula = args[0];\n        const flavor = args.slice(1).join(' ') || `Rolagem solicitada pela IA`;\n\n        const result = await this.apiHandler.rollDice(formula, {\n            toChat: true,\n            flavor: flavor\n        });\n\n        if (result.success) {\n            await this.sendMessage(`🎲 **${formula}** = **${result.total}**${flavor ? ` (${flavor})` : ''}`);\n        } else {\n            await this.sendMessage(`❌ Erro na rolagem: ${result.error}`);\n        }\n    }\n\n    async handleCreateCommand(args, originalMessage) {\n        if (args.length < 2) {\n            await this.sendMessage('❌ Uso: `/ai create <tipo> <dados>`\\nTipos: actor, item, scene, journal, macro');\n            return;\n        }\n\n        const type = args[0].toLowerCase();\n        const dataString = args.slice(1).join(' ');\n\n        try {\n            let data;\n            try {\n                data = JSON.parse(dataString);\n            } catch {\n                // Se não for JSON, tratar como nome simples\n                data = { name: dataString };\n            }\n\n            let result;\n            switch (type) {\n                case 'actor':\n                    result = await this.apiHandler.createActor(data);\n                    break;\n                case 'item':\n                    result = await this.apiHandler.createItem(data);\n                    break;\n                case 'scene':\n                    result = await this.apiHandler.createScene(data);\n                    break;\n                case 'journal':\n                    result = await this.apiHandler.createJournalEntry(data);\n                    break;\n                case 'macro':\n                    result = await this.apiHandler.createMacro(data);\n                    break;\n                default:\n                    await this.sendMessage(`❌ Tipo \"${type}\" não suportado. Tipos válidos: actor, item, scene, journal, macro`);\n                    return;\n            }\n\n            if (result.success) {\n                await this.sendMessage(`✅ ${result.message}`);\n            } else {\n                await this.sendMessage(`❌ ${result.message}`);\n            }\n\n        } catch (error) {\n            await this.sendMessage(`❌ Erro ao criar ${type}: ${error.message}`);\n        }\n    }\n\n    async handleSearchCommand(args, originalMessage) {\n        if (args.length === 0) {\n            await this.sendMessage('❌ Uso: `/ai search <tipo> [filtros]`\\nTipos: actors, items, scenes, journal');\n            return;\n        }\n\n        const type = args[0].toLowerCase();\n        const searchTerm = args.slice(1).join(' ');\n\n        try {\n            let result;\n            const filters = searchTerm ? { name: searchTerm } : {};\n\n            switch (type) {\n                case 'actors':\n                    result = await this.apiHandler.queryActors(filters, { limit: 10 });\n                    break;\n                case 'items':\n                    // Implementar busca de itens\n                    result = { success: false, message: 'Busca de itens não implementada ainda' };\n                    break;\n                case 'scenes':\n                    // Implementar busca de cenas\n                    result = { success: false, message: 'Busca de cenas não implementada ainda' };\n                    break;\n                default:\n                    await this.sendMessage(`❌ Tipo \"${type}\" não suportado para busca.`);\n                    return;\n            }\n\n            if (result.success) {\n                if (result.actors && result.actors.length > 0) {\n                    const actorList = result.actors\n                        .map(actor => `• **${actor.name}** (${actor.type}) - Nível ${actor.level || 'N/A'}`)\n                        .join('\\n');\n                    \n                    await this.sendMessage(`🔍 **Atores encontrados:**\\n${actorList}`);\n                } else {\n                    await this.sendMessage('🔍 Nenhum resultado encontrado.');\n                }\n            } else {\n                await this.sendMessage(`❌ ${result.message}`);\n            }\n\n        } catch (error) {\n            await this.sendMessage(`❌ Erro na busca: ${error.message}`);\n        }\n    }\n\n    async handleMacroCommand(args, originalMessage) {\n        if (args.length === 0) {\n            await this.sendMessage('❌ Uso: `/ai macro <nome> [argumentos]`');\n            return;\n        }\n\n        const macroName = args[0];\n        const macroArgs = args.slice(1);\n\n        // Simular busca de macro por nome\n        // Em FoundryVTT real seria: game.macros.find(m => m.name === macroName)\n        const mockMacroId = 'mock-macro-id';\n\n        const result = await this.apiHandler.executeMacro(mockMacroId, macroArgs);\n\n        if (result.success) {\n            await this.sendMessage(`⚙️ Macro \"${macroName}\" executado com sucesso.`);\n        } else {\n            await this.sendMessage(`❌ ${result.message}`);\n        }\n    }\n\n    async handleSceneCommand(args, originalMessage) {\n        if (args.length === 0) {\n            await this.sendMessage('❌ Uso: `/ai scene <ação> [parâmetros]`\\nAções: activate, create, list');\n            return;\n        }\n\n        const action = args[0].toLowerCase();\n        const params = args.slice(1);\n\n        try {\n            switch (action) {\n                case 'activate':\n                    if (params.length === 0) {\n                        await this.sendMessage('❌ Uso: `/ai scene activate <nome_ou_id>`');\n                        return;\n                    }\n                    // Simular ativação de cena\n                    await this.sendMessage(`🎬 Tentando ativar cena: ${params[0]}`);\n                    break;\n\n                case 'create':\n                    if (params.length === 0) {\n                        await this.sendMessage('❌ Uso: `/ai scene create <nome>`');\n                        return;\n                    }\n                    const sceneData = { name: params.join(' ') };\n                    const result = await this.apiHandler.createScene(sceneData);\n                    \n                    if (result.success) {\n                        await this.sendMessage(`✅ ${result.message}`);\n                    } else {\n                        await this.sendMessage(`❌ ${result.message}`);\n                    }\n                    break;\n\n                case 'list':\n                    // Simular listagem de cenas\n                    await this.sendMessage('🎬 **Cenas disponíveis:**\\n• Taverna do Javali Dourado\\n• Floresta Sombria\\n• Masmorra Antiga');\n                    break;\n\n                default:\n                    await this.sendMessage(`❌ Ação \"${action}\" não reconhecida. Ações válidas: activate, create, list`);\n            }\n\n        } catch (error) {\n            await this.sendMessage(`❌ Erro no comando de cena: ${error.message}`);\n        }\n    }\n\n    async handleConfigCommand(args, originalMessage) {\n        if (args.length < 2) {\n            await this.sendMessage('❌ Uso: `/ai config <opção> <valor>`\\nOpções: provider, permission-level');\n            return;\n        }\n\n        const option = args[0].toLowerCase();\n        const value = args.slice(1).join(' ');\n\n        try {\n            switch (option) {\n                case 'provider':\n                    await this.setAIProvider(value);\n                    await this.sendMessage(`⚙️ Provedor de IA alterado para: ${value}`);\n                    break;\n\n                case 'permission-level':\n                    await this.permissionManager.setPermissionLevel(value.toUpperCase());\n                    await this.sendMessage(`🔐 Nível de permissão alterado para: ${value}`);\n                    break;\n\n                default:\n                    await this.sendMessage(`❌ Opção \"${option}\" não reconhecida.`);\n            }\n\n        } catch (error) {\n            await this.sendMessage(`❌ Erro na configuração: ${error.message}`);\n        }\n    }\n\n    async handleChatCommand(args, originalMessage) {\n        const message = args.join(' ');\n        \n        if (!message) {\n            await this.sendMessage('❌ Uso: `/ai chat <mensagem>`');\n            return;\n        }\n\n        await this.handleFreeConversation(message, originalMessage);\n    }\n\n    async handleFreeConversation(message, originalMessage) {\n        if (!this.currentProvider) {\n            await this.sendMessage('❌ Nenhum provedor de IA configurado. Use `/ai config provider <nome>` para configurar.');\n            return;\n        }\n\n        try {\n            // Preparar contexto da conversa\n            const context = this.buildConversationContext(originalMessage);\n            \n            // Enviar para provedor de IA\n            const response = await this.currentProvider.processMessage(message, context);\n            \n            // Enviar resposta\n            await this.sendMessage(`🤖 ${response}`);\n            \n            // Adicionar à história\n            this.addToConversationHistory({\n                user: 'AI Assistant',\n                content: response,\n                type: 'ai-response',\n                timestamp: Date.now()\n            });\n\n        } catch (error) {\n            console.error('AI Assistant | Erro na conversa livre:', error);\n            await this.sendMessage('❌ Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.');\n        }\n    }\n\n    buildConversationContext(originalMessage) {\n        return {\n            user: originalMessage?.user?.name || 'Unknown',\n            recentHistory: this.conversationHistory.slice(-10),\n            worldContext: this.getWorldContext(),\n            timestamp: Date.now()\n        };\n    }\n\n    getWorldContext() {\n        // Simular contexto do mundo\n        return {\n            activeScene: 'Taverna do Javali Dourado',\n            playerCount: 4,\n            systemName: 'D&D 5e'\n        };\n    }\n\n    // ========== PROVEDORES DE IA ==========\n\n    async loadAIProviders() {\n        // Simular carregamento de provedores\n        console.log('AI Assistant | Carregando provedores de IA...');\n        \n        // Em implementação real, carregaria os provedores dos arquivos\n        this.aiProviders.set('mock', {\n            name: 'Mock Provider',\n            processMessage: async (message, context) => {\n                return `Você disse: \"${message}\". Esta é uma resposta simulada.`;\n            }\n        });\n    }\n\n    async setDefaultProvider() {\n        // Configurar provedor padrão\n        this.currentProvider = this.aiProviders.get('mock');\n        console.log('AI Assistant | Provedor padrão configurado: Mock Provider');\n    }\n\n    async setAIProvider(providerName) {\n        const provider = this.aiProviders.get(providerName);\n        if (!provider) {\n            throw new Error(`Provedor \"${providerName}\" não encontrado`);\n        }\n        \n        this.currentProvider = provider;\n        console.log(`AI Assistant | Provedor alterado para: ${provider.name}`);\n    }\n\n    // ========== UTILITÁRIOS ==========\n\n    async sendMessage(content, options = {}) {\n        const messageData = {\n            content: content,\n            type: options.type || 'other',\n            speaker: {\n                alias: options.alias || 'AI Assistant'\n            },\n            whisper: options.whisper || null\n        };\n\n        // Simular criação de mensagem do FoundryVTT\n        console.log('AI Assistant | Enviando mensagem:', content);\n        \n        // Em FoundryVTT real seria: await ChatMessage.create(messageData);\n        return messageData;\n    }\n\n    async sendErrorMessage(error) {\n        await this.sendMessage(`❌ **Erro:** ${error}`, { type: 'error' });\n    }\n\n    async sendWhisper(content, targetUserId) {\n        await this.sendMessage(content, { whisper: [targetUserId] });\n    }\n\n    getStats() {\n        return {\n            initialized: this.initialized,\n            commandsRegistered: this.commands.size,\n            conversationHistoryLength: this.conversationHistory.length,\n            activeConversations: this.activeConversations.size,\n            availableProviders: this.aiProviders.size,\n            currentProvider: this.currentProvider?.name || null\n        };\n    }\n\n    // Método para processar mensagem diretamente (para testes)\n    async processDirectMessage(content, options = {}) {\n        const mockMessage = {\n            content: content,\n            user: { name: options.userName || 'Test User' },\n            type: options.type || 'ic'\n        };\n\n        await this.onChatMessage(mockMessage, {}, 'test-user-id');\n    }\n}\n","/**\n * Provedor Manus para AI Assistant\n * Integração com a API do Manus\n */\n\nexport class ManusProvider {\n    constructor(config = {}) {\n        this.name = 'Manus';\n        this.apiKey = config.apiKey || process.env.MANUS_API_KEY;\n        this.baseUrl = config.baseUrl || 'https://api.manus.im';\n        this.model = config.model || 'gpt-4.1-mini';\n        this.maxTokens = config.maxTokens || 2000;\n        this.temperature = config.temperature || 0.7;\n        this.initialized = false;\n        this.rateLimiter = new Map();\n        this.requestHistory = [];\n    }\n\n    async initialize() {\n        console.log('Manus Provider | Inicializando...');\n        \n        try {\n            // Verificar se a API key está configurada\n            if (!this.apiKey) {\n                throw new Error('API Key do Manus não configurada');\n            }\n\n            // Testar conectividade\n            await this.testConnection();\n            \n            this.initialized = true;\n            console.log('Manus Provider | Inicializado com sucesso');\n            \n        } catch (error) {\n            console.error('Manus Provider | Erro na inicialização:', error);\n            throw error;\n        }\n    }\n\n    async testConnection() {\n        try {\n            const response = await fetch(`${this.baseUrl}/v1/models`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erro na conexão: ${response.status} ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            console.log('Manus Provider | Conexão testada com sucesso');\n            return data;\n            \n        } catch (error) {\n            console.error('Manus Provider | Erro no teste de conexão:', error);\n            throw new Error(`Falha na conexão com Manus: ${error.message}`);\n        }\n    }\n\n    async processMessage(message, context = {}) {\n        if (!this.initialized) {\n            throw new Error('Provedor Manus não inicializado');\n        }\n\n        // Verificar rate limiting\n        if (!this.checkRateLimit()) {\n            throw new Error('Rate limit excedido. Tente novamente em alguns segundos.');\n        }\n\n        try {\n            // Construir prompt com contexto\n            const prompt = this.buildPrompt(message, context);\n            \n            // Fazer requisição para API\n            const response = await this.makeAPIRequest(prompt);\n            \n            // Processar resposta\n            const processedResponse = this.processResponse(response);\n            \n            // Adicionar ao histórico\n            this.addToHistory(message, processedResponse, context);\n            \n            return processedResponse;\n            \n        } catch (error) {\n            console.error('Manus Provider | Erro ao processar mensagem:', error);\n            throw new Error(`Erro do Manus: ${error.message}`);\n        }\n    }\n\n    buildPrompt(message, context) {\n        const systemPrompt = this.getSystemPrompt(context);\n        const conversationHistory = this.formatConversationHistory(context.recentHistory || []);\n        const worldContext = this.formatWorldContext(context.worldContext || {});\n\n        return {\n            model: this.model,\n            messages: [\n                {\n                    role: 'system',\n                    content: systemPrompt\n                },\n                ...conversationHistory,\n                {\n                    role: 'user',\n                    content: `${worldContext}\\n\\nUsuário: ${message}`\n                }\n            ],\n            max_tokens: this.maxTokens,\n            temperature: this.temperature,\n            stream: false\n        };\n    }\n\n    getSystemPrompt(context) {\n        return `Você é um AI Assistant integrado ao FoundryVTT, um sistema de RPG virtual. Suas responsabilidades incluem:\n\n1. **Assistência em Jogos de RPG**: Ajudar com regras, criação de personagens, narrativa e mecânicas de jogo.\n\n2. **Gerenciamento de Conteúdo**: Criar e modificar atores, itens, cenas, jornais e outros elementos do jogo quando solicitado.\n\n3. **Rolagem de Dados**: Interpretar e executar rolagens de dados usando a notação padrão (ex: 1d20+5).\n\n4. **Narrativa e Interpretação**: Ajudar com descrições, diálogos de NPCs e desenvolvimento de história.\n\n5. **Consultas de Regras**: Responder perguntas sobre sistemas de RPG, especialmente D&D 5e.\n\n**Diretrizes de Comportamento:**\n- Seja útil, criativo e envolvente\n- Mantenha o tom apropriado para o contexto do jogo\n- Quando criar conteúdo, forneça detalhes suficientes mas concisos\n- Se não tiver certeza sobre uma regra, admita e sugira onde encontrar a informação\n- Respeite o tom e estilo da campanha em andamento\n\n**Contexto Atual:**\n- Sistema: ${context.worldContext?.systemName || 'D&D 5e'}\n- Cena Ativa: ${context.worldContext?.activeScene || 'Não especificada'}\n- Jogadores: ${context.worldContext?.playerCount || 'Não especificado'}\n\nResponda de forma natural e útil, como se fosse um assistente experiente de RPG.`;\n    }\n\n    formatConversationHistory(history) {\n        return history.slice(-10).map(msg => ({\n            role: msg.user === 'AI Assistant' ? 'assistant' : 'user',\n            content: `${msg.user}: ${msg.content}`\n        }));\n    }\n\n    formatWorldContext(worldContext) {\n        if (!worldContext || Object.keys(worldContext).length === 0) {\n            return '';\n        }\n\n        return `**Contexto do Mundo:**\n- Cena Ativa: ${worldContext.activeScene || 'N/A'}\n- Sistema: ${worldContext.systemName || 'N/A'}\n- Jogadores Conectados: ${worldContext.playerCount || 'N/A'}`;\n    }\n\n    async makeAPIRequest(prompt) {\n        const startTime = Date.now();\n        \n        try {\n            const response = await fetch(`${this.baseUrl}/v1/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(prompt)\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(`API Error ${response.status}: ${errorData.error?.message || response.statusText}`);\n            }\n\n            const data = await response.json();\n            const duration = Date.now() - startTime;\n            \n            console.log(`Manus Provider | Requisição concluída em ${duration}ms`);\n            \n            return data;\n            \n        } catch (error) {\n            const duration = Date.now() - startTime;\n            console.error(`Manus Provider | Erro na requisição (${duration}ms):`, error);\n            throw error;\n        }\n    }\n\n    processResponse(apiResponse) {\n        try {\n            if (!apiResponse.choices || apiResponse.choices.length === 0) {\n                throw new Error('Resposta da API não contém choices');\n            }\n\n            const choice = apiResponse.choices[0];\n            if (!choice.message || !choice.message.content) {\n                throw new Error('Resposta da API não contém conteúdo');\n            }\n\n            let content = choice.message.content.trim();\n            \n            // Processar comandos especiais na resposta\n            content = this.processSpecialCommands(content);\n            \n            // Limitar tamanho da resposta\n            if (content.length > 2000) {\n                content = content.substring(0, 1997) + '...';\n            }\n\n            return content;\n            \n        } catch (error) {\n            console.error('Manus Provider | Erro ao processar resposta:', error);\n            throw new Error(`Erro ao processar resposta: ${error.message}`);\n        }\n    }\n\n    processSpecialCommands(content) {\n        // Processar comandos especiais que a IA pode incluir na resposta\n        // Por exemplo: [ROLL:1d20+5] ou [CREATE_ACTOR:Orc Warrior]\n        \n        // Processar rolagens inline\n        content = content.replace(/\\[ROLL:([^\\]]+)\\]/g, (match, formula) => {\n            // Em implementação real, executaria a rolagem\n            return `🎲 ${formula}`;\n        });\n\n        // Processar criação de elementos inline\n        content = content.replace(/\\[CREATE_(\\w+):([^\\]]+)\\]/g, (match, type, name) => {\n            // Em implementação real, criaria o elemento\n            return `✨ Criando ${type.toLowerCase()}: ${name}`;\n        });\n\n        return content;\n    }\n\n    addToHistory(message, response, context) {\n        this.requestHistory.push({\n            timestamp: Date.now(),\n            user: context.user || 'Unknown',\n            message: message,\n            response: response,\n            model: this.model,\n            tokens: response.length // Aproximação simples\n        });\n\n        // Manter apenas os últimos 100 registros\n        if (this.requestHistory.length > 100) {\n            this.requestHistory.shift();\n        }\n    }\n\n    checkRateLimit() {\n        const now = Date.now();\n        const windowMs = 60000; // 1 minuto\n        const maxRequests = 30; // 30 requests por minuto\n\n        // Limpar entradas antigas\n        const cutoff = now - windowMs;\n        const recentRequests = Array.from(this.rateLimiter.values()).filter(time => time > cutoff);\n        \n        // Atualizar rate limiter\n        this.rateLimiter.clear();\n        recentRequests.forEach((time, index) => {\n            this.rateLimiter.set(index, time);\n        });\n\n        // Verificar limite\n        if (recentRequests.length >= maxRequests) {\n            return false;\n        }\n\n        // Adicionar requisição atual\n        this.rateLimiter.set(this.rateLimiter.size, now);\n        return true;\n    }\n\n    // Métodos específicos para FoundryVTT\n\n    async generateNPC(type, options = {}) {\n        const prompt = `Crie um NPC do tipo \"${type}\" para D&D 5e. ${options.description ? `Descrição adicional: ${options.description}` : ''}\n\nForneça:\n1. Nome\n2. Raça e classe (se aplicável)\n3. Breve descrição física\n4. Personalidade (2-3 traços)\n5. Motivação principal\n6. Estatísticas básicas (se necessário)\n\nFormato: JSON estruturado para fácil importação.`;\n\n        return await this.processMessage(prompt, { \n            worldContext: { systemName: 'D&D 5e' },\n            specialRequest: 'npc_generation'\n        });\n    }\n\n    async explainRule(rule, system = 'D&D 5e') {\n        const prompt = `Explique a regra \"${rule}\" do sistema ${system}. Seja claro e conciso, incluindo exemplos práticos se relevante.`;\n\n        return await this.processMessage(prompt, {\n            worldContext: { systemName: system },\n            specialRequest: 'rule_explanation'\n        });\n    }\n\n    async generateDescription(type, subject, context = '') {\n        const prompt = `Gere uma descrição ${type} para: ${subject}. ${context ? `Contexto: ${context}` : ''}\n\nA descrição deve ser:\n- Envolvente e imersiva\n- Apropriada para RPG\n- Entre 2-4 frases\n- Rica em detalhes sensoriais`;\n\n        return await this.processMessage(prompt, {\n            specialRequest: 'description_generation'\n        });\n    }\n\n    // Métodos de configuração\n\n    updateConfig(newConfig) {\n        if (newConfig.apiKey) this.apiKey = newConfig.apiKey;\n        if (newConfig.baseUrl) this.baseUrl = newConfig.baseUrl;\n        if (newConfig.model) this.model = newConfig.model;\n        if (newConfig.maxTokens) this.maxTokens = newConfig.maxTokens;\n        if (newConfig.temperature) this.temperature = newConfig.temperature;\n\n        console.log('Manus Provider | Configuração atualizada');\n    }\n\n    getConfig() {\n        return {\n            name: this.name,\n            model: this.model,\n            maxTokens: this.maxTokens,\n            temperature: this.temperature,\n            initialized: this.initialized,\n            hasApiKey: !!this.apiKey\n        };\n    }\n\n    getStats() {\n        const recentRequests = this.requestHistory.filter(req => \n            Date.now() - req.timestamp < 3600000 // Última hora\n        );\n\n        return {\n            name: this.name,\n            initialized: this.initialized,\n            totalRequests: this.requestHistory.length,\n            recentRequests: recentRequests.length,\n            averageResponseTime: this.calculateAverageResponseTime(),\n            rateLimitStatus: {\n                current: this.rateLimiter.size,\n                max: 30,\n                windowMs: 60000\n            }\n        };\n    }\n\n    calculateAverageResponseTime() {\n        if (this.requestHistory.length === 0) return 0;\n        \n        const recentRequests = this.requestHistory.slice(-10);\n        const totalTime = recentRequests.reduce((sum, req) => sum + (req.responseTime || 1000), 0);\n        return Math.round(totalTime / recentRequests.length);\n    }\n\n    // Método para cleanup\n    cleanup() {\n        this.rateLimiter.clear();\n        this.requestHistory = [];\n        this.initialized = false;\n        console.log('Manus Provider | Cleanup realizado');\n    }\n}\n","/**\n * Provedor OpenAI para AI Assistant\n * Integração com a API da OpenAI\n */\n\nexport class OpenAIProvider {\n    constructor(config = {}) {\n        this.name = 'OpenAI';\n        this.apiKey = config.apiKey || process.env.OPENAI_API_KEY;\n        this.baseUrl = config.baseUrl || 'https://api.openai.com';\n        this.model = config.model || 'gpt-4';\n        this.maxTokens = config.maxTokens || 2000;\n        this.temperature = config.temperature || 0.7;\n        this.initialized = false;\n        this.rateLimiter = new Map();\n        this.requestHistory = [];\n        this.tokenUsage = { total: 0, prompt: 0, completion: 0 };\n    }\n\n    async initialize() {\n        console.log('OpenAI Provider | Inicializando...');\n        \n        try {\n            // Verificar se a API key está configurada\n            if (!this.apiKey) {\n                throw new Error('API Key da OpenAI não configurada');\n            }\n\n            // Testar conectividade\n            await this.testConnection();\n            \n            this.initialized = true;\n            console.log('OpenAI Provider | Inicializado com sucesso');\n            \n        } catch (error) {\n            console.error('OpenAI Provider | Erro na inicialização:', error);\n            throw error;\n        }\n    }\n\n    async testConnection() {\n        try {\n            const response = await fetch(`${this.baseUrl}/v1/models`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erro na conexão: ${response.status} ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            console.log('OpenAI Provider | Conexão testada com sucesso');\n            return data;\n            \n        } catch (error) {\n            console.error('OpenAI Provider | Erro no teste de conexão:', error);\n            throw new Error(`Falha na conexão com OpenAI: ${error.message}`);\n        }\n    }\n\n    async processMessage(message, context = {}) {\n        if (!this.initialized) {\n            throw new Error('Provedor OpenAI não inicializado');\n        }\n\n        // Verificar rate limiting\n        if (!this.checkRateLimit()) {\n            throw new Error('Rate limit excedido. Tente novamente em alguns segundos.');\n        }\n\n        try {\n            // Construir prompt com contexto\n            const prompt = this.buildPrompt(message, context);\n            \n            // Fazer requisição para API\n            const response = await this.makeAPIRequest(prompt);\n            \n            // Processar resposta\n            const processedResponse = this.processResponse(response);\n            \n            // Atualizar estatísticas de tokens\n            this.updateTokenUsage(response.usage);\n            \n            // Adicionar ao histórico\n            this.addToHistory(message, processedResponse, context, response.usage);\n            \n            return processedResponse;\n            \n        } catch (error) {\n            console.error('OpenAI Provider | Erro ao processar mensagem:', error);\n            throw new Error(`Erro da OpenAI: ${error.message}`);\n        }\n    }\n\n    buildPrompt(message, context) {\n        const systemPrompt = this.getSystemPrompt(context);\n        const conversationHistory = this.formatConversationHistory(context.recentHistory || []);\n        const worldContext = this.formatWorldContext(context.worldContext || {});\n\n        return {\n            model: this.model,\n            messages: [\n                {\n                    role: 'system',\n                    content: systemPrompt\n                },\n                ...conversationHistory,\n                {\n                    role: 'user',\n                    content: `${worldContext}\\n\\nUsuário: ${message}`\n                }\n            ],\n            max_tokens: this.maxTokens,\n            temperature: this.temperature,\n            presence_penalty: 0.1,\n            frequency_penalty: 0.1\n        };\n    }\n\n    getSystemPrompt(context) {\n        return `Você é um AI Assistant especializado em RPG integrado ao FoundryVTT. Suas funções incluem:\n\n**Capacidades Principais:**\n1. **Assistência em RPG**: Ajudar com regras, mecânicas, criação de personagens e narrativa\n2. **Gerenciamento de Jogo**: Criar e modificar elementos do jogo (atores, itens, cenas, etc.)\n3. **Interpretação de Dados**: Executar e interpretar rolagens de dados\n4. **Narrativa Criativa**: Gerar descrições, diálogos de NPCs e elementos de história\n5. **Consulta de Regras**: Responder sobre sistemas de RPG, especialmente D&D 5e\n\n**Diretrizes de Comportamento:**\n- Seja preciso e útil nas respostas sobre regras\n- Mantenha um tom envolvente e apropriado para RPG\n- Quando criar conteúdo, seja criativo mas equilibrado\n- Se incerto sobre uma regra, seja honesto e sugira fontes\n- Adapte-se ao tom e estilo da campanha\n\n**Comandos Especiais:**\n- Use [ROLL:fórmula] para sugerir rolagens\n- Use [CREATE:tipo:nome] para sugerir criação de elementos\n- Use [SEARCH:tipo:termo] para sugerir buscas\n\n**Contexto Atual:**\n- Sistema: ${context.worldContext?.systemName || 'D&D 5e'}\n- Cena: ${context.worldContext?.activeScene || 'Não especificada'}\n- Jogadores: ${context.worldContext?.playerCount || 'Não especificado'}\n\nResponda como um mestre experiente e assistente útil.`;\n    }\n\n    formatConversationHistory(history) {\n        return history.slice(-8).map(msg => ({\n            role: msg.user === 'AI Assistant' ? 'assistant' : 'user',\n            content: msg.content.length > 500 ? msg.content.substring(0, 497) + '...' : msg.content\n        }));\n    }\n\n    formatWorldContext(worldContext) {\n        if (!worldContext || Object.keys(worldContext).length === 0) {\n            return '';\n        }\n\n        return `**Contexto do Mundo:**\n- Cena Ativa: ${worldContext.activeScene || 'N/A'}\n- Sistema: ${worldContext.systemName || 'N/A'}\n- Jogadores: ${worldContext.playerCount || 'N/A'}`;\n    }\n\n    async makeAPIRequest(prompt) {\n        const startTime = Date.now();\n        \n        try {\n            const response = await fetch(`${this.baseUrl}/v1/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(prompt)\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                \n                // Tratar erros específicos da OpenAI\n                if (response.status === 429) {\n                    throw new Error('Rate limit da OpenAI excedido. Tente novamente em alguns segundos.');\n                } else if (response.status === 401) {\n                    throw new Error('API Key da OpenAI inválida ou expirada.');\n                } else if (response.status === 400) {\n                    throw new Error(`Requisição inválida: ${errorData.error?.message || 'Parâmetros incorretos'}`);\n                }\n                \n                throw new Error(`API Error ${response.status}: ${errorData.error?.message || response.statusText}`);\n            }\n\n            const data = await response.json();\n            const duration = Date.now() - startTime;\n            \n            console.log(`OpenAI Provider | Requisição concluída em ${duration}ms`);\n            \n            return data;\n            \n        } catch (error) {\n            const duration = Date.now() - startTime;\n            console.error(`OpenAI Provider | Erro na requisição (${duration}ms):`, error);\n            throw error;\n        }\n    }\n\n    processResponse(apiResponse) {\n        try {\n            if (!apiResponse.choices || apiResponse.choices.length === 0) {\n                throw new Error('Resposta da API não contém choices');\n            }\n\n            const choice = apiResponse.choices[0];\n            if (!choice.message || !choice.message.content) {\n                throw new Error('Resposta da API não contém conteúdo');\n            }\n\n            let content = choice.message.content.trim();\n            \n            // Processar comandos especiais na resposta\n            content = this.processSpecialCommands(content);\n            \n            // Verificar se a resposta foi truncada\n            if (choice.finish_reason === 'length') {\n                content += '\\n\\n*[Resposta truncada devido ao limite de tokens]*';\n            }\n            \n            // Limitar tamanho da resposta para chat\n            if (content.length > 2000) {\n                content = content.substring(0, 1997) + '...';\n            }\n\n            return content;\n            \n        } catch (error) {\n            console.error('OpenAI Provider | Erro ao processar resposta:', error);\n            throw new Error(`Erro ao processar resposta: ${error.message}`);\n        }\n    }\n\n    processSpecialCommands(content) {\n        // Processar comandos especiais que a IA pode incluir na resposta\n        \n        // Processar rolagens inline\n        content = content.replace(/\\[ROLL:([^\\]]+)\\]/g, (match, formula) => {\n            return `🎲 *Sugestão de rolagem: ${formula}*`;\n        });\n\n        // Processar criação de elementos inline\n        content = content.replace(/\\[CREATE:(\\w+):([^\\]]+)\\]/g, (match, type, name) => {\n            return `✨ *Sugestão: Criar ${type.toLowerCase()} \"${name}\"*`;\n        });\n\n        // Processar buscas inline\n        content = content.replace(/\\[SEARCH:(\\w+):([^\\]]+)\\]/g, (match, type, term) => {\n            return `🔍 *Sugestão: Buscar ${type} por \"${term}\"*`;\n        });\n\n        return content;\n    }\n\n    updateTokenUsage(usage) {\n        if (usage) {\n            this.tokenUsage.total += usage.total_tokens || 0;\n            this.tokenUsage.prompt += usage.prompt_tokens || 0;\n            this.tokenUsage.completion += usage.completion_tokens || 0;\n        }\n    }\n\n    addToHistory(message, response, context, usage) {\n        this.requestHistory.push({\n            timestamp: Date.now(),\n            user: context.user || 'Unknown',\n            message: message,\n            response: response,\n            model: this.model,\n            usage: usage,\n            responseTime: Date.now() - (context.startTime || Date.now())\n        });\n\n        // Manter apenas os últimos 100 registros\n        if (this.requestHistory.length > 100) {\n            this.requestHistory.shift();\n        }\n    }\n\n    checkRateLimit() {\n        const now = Date.now();\n        const windowMs = 60000; // 1 minuto\n        const maxRequests = 20; // 20 requests por minuto (conservador)\n\n        // Limpar entradas antigas\n        const cutoff = now - windowMs;\n        const recentRequests = Array.from(this.rateLimiter.values()).filter(time => time > cutoff);\n        \n        // Atualizar rate limiter\n        this.rateLimiter.clear();\n        recentRequests.forEach((time, index) => {\n            this.rateLimiter.set(index, time);\n        });\n\n        // Verificar limite\n        if (recentRequests.length >= maxRequests) {\n            return false;\n        }\n\n        // Adicionar requisição atual\n        this.rateLimiter.set(this.rateLimiter.size, now);\n        return true;\n    }\n\n    // Métodos específicos para FoundryVTT\n\n    async generateNPC(type, options = {}) {\n        const prompt = `Crie um NPC detalhado do tipo \"${type}\" para D&D 5e.\n\n${options.description ? `Descrição adicional: ${options.description}` : ''}\n${options.level ? `Nível/CR sugerido: ${options.level}` : ''}\n${options.role ? `Papel na história: ${options.role}` : ''}\n\nForneça:\n1. **Nome** e título (se aplicável)\n2. **Raça e classe** (ou tipo de criatura)\n3. **Descrição física** (2-3 frases)\n4. **Personalidade** (3-4 traços distintos)\n5. **Motivação principal** e objetivos\n6. **Background** (breve história)\n7. **Estatísticas básicas** (CA, HP, atributos principais)\n8. **Habilidades especiais** ou equipamentos notáveis\n\nFormato: Estruturado e pronto para uso no jogo.`;\n\n        return await this.processMessage(prompt, { \n            worldContext: { systemName: 'D&D 5e' },\n            specialRequest: 'npc_generation'\n        });\n    }\n\n    async explainRule(rule, system = 'D&D 5e') {\n        const prompt = `Explique detalhadamente a regra \"${rule}\" do sistema ${system}.\n\nInclua:\n1. **Definição** clara da regra\n2. **Como funciona** na prática\n3. **Exemplos** de uso em jogo\n4. **Interações** com outras regras (se relevante)\n5. **Dicas** para mestres e jogadores\n\nSeja preciso mas acessível.`;\n\n        return await this.processMessage(prompt, {\n            worldContext: { systemName: system },\n            specialRequest: 'rule_explanation'\n        });\n    }\n\n    async generateDescription(type, subject, context = '') {\n        const prompt = `Gere uma descrição ${type} envolvente para: \"${subject}\"\n\n${context ? `Contexto adicional: ${context}` : ''}\n\nA descrição deve ser:\n- **Imersiva** e rica em detalhes sensoriais\n- **Apropriada** para RPG de fantasia\n- **Concisa** mas evocativa (3-5 frases)\n- **Útil** para mestres narrarem\n\nFoque em criar atmosfera e ajudar a visualizar a cena.`;\n\n        return await this.processMessage(prompt, {\n            specialRequest: 'description_generation'\n        });\n    }\n\n    async generateEncounter(difficulty, environment, partyLevel = 5) {\n        const prompt = `Crie um encontro de dificuldade \"${difficulty}\" para um grupo de nível ${partyLevel} em ambiente: ${environment}\n\nInclua:\n1. **Descrição da cena** e atmosfera\n2. **Inimigos** (tipos, quantidades, táticas)\n3. **Terreno** e elementos ambientais\n4. **Objetivos** possíveis além de combate\n5. **Recompensas** apropriadas\n6. **Variações** para diferentes abordagens\n\nTorne o encontro memorável e estratégico.`;\n\n        return await this.processMessage(prompt, {\n            worldContext: { systemName: 'D&D 5e' },\n            specialRequest: 'encounter_generation'\n        });\n    }\n\n    async generateLoot(challenge, type = 'mixed') {\n        const prompt = `Gere um tesouro apropriado para desafio de nível ${challenge}, tipo \"${type}\".\n\nInclua:\n1. **Moedas** (quantidade apropriada)\n2. **Itens mundanos** valiosos\n3. **Itens mágicos** (se apropriado)\n4. **Itens únicos** ou com história\n5. **Valor total** estimado\n\nEquilibre utilidade e valor, considerando o nível do grupo.`;\n\n        return await this.processMessage(prompt, {\n            worldContext: { systemName: 'D&D 5e' },\n            specialRequest: 'loot_generation'\n        });\n    }\n\n    // Métodos de configuração\n\n    updateConfig(newConfig) {\n        if (newConfig.apiKey) this.apiKey = newConfig.apiKey;\n        if (newConfig.baseUrl) this.baseUrl = newConfig.baseUrl;\n        if (newConfig.model) this.model = newConfig.model;\n        if (newConfig.maxTokens) this.maxTokens = newConfig.maxTokens;\n        if (newConfig.temperature) this.temperature = newConfig.temperature;\n\n        console.log('OpenAI Provider | Configuração atualizada');\n    }\n\n    getConfig() {\n        return {\n            name: this.name,\n            model: this.model,\n            maxTokens: this.maxTokens,\n            temperature: this.temperature,\n            initialized: this.initialized,\n            hasApiKey: !!this.apiKey,\n            tokenUsage: { ...this.tokenUsage }\n        };\n    }\n\n    getStats() {\n        const recentRequests = this.requestHistory.filter(req => \n            Date.now() - req.timestamp < 3600000 // Última hora\n        );\n\n        const avgResponseTime = this.calculateAverageResponseTime();\n        const avgTokensPerRequest = this.requestHistory.length > 0 \n            ? Math.round(this.tokenUsage.total / this.requestHistory.length)\n            : 0;\n\n        return {\n            name: this.name,\n            initialized: this.initialized,\n            totalRequests: this.requestHistory.length,\n            recentRequests: recentRequests.length,\n            averageResponseTime: avgResponseTime,\n            tokenUsage: { ...this.tokenUsage },\n            averageTokensPerRequest: avgTokensPerRequest,\n            rateLimitStatus: {\n                current: this.rateLimiter.size,\n                max: 20,\n                windowMs: 60000\n            },\n            estimatedCost: this.calculateEstimatedCost()\n        };\n    }\n\n    calculateAverageResponseTime() {\n        if (this.requestHistory.length === 0) return 0;\n        \n        const recentRequests = this.requestHistory.slice(-10);\n        const totalTime = recentRequests.reduce((sum, req) => sum + (req.responseTime || 1000), 0);\n        return Math.round(totalTime / recentRequests.length);\n    }\n\n    calculateEstimatedCost() {\n        // Estimativa baseada nos preços da OpenAI (valores aproximados)\n        const costs = {\n            'gpt-4': { prompt: 0.03, completion: 0.06 }, // por 1K tokens\n            'gpt-4-turbo': { prompt: 0.01, completion: 0.03 },\n            'gpt-3.5-turbo': { prompt: 0.001, completion: 0.002 }\n        };\n\n        const modelCost = costs[this.model] || costs['gpt-4'];\n        const promptCost = (this.tokenUsage.prompt / 1000) * modelCost.prompt;\n        const completionCost = (this.tokenUsage.completion / 1000) * modelCost.completion;\n\n        return {\n            total: promptCost + completionCost,\n            prompt: promptCost,\n            completion: completionCost,\n            currency: 'USD'\n        };\n    }\n\n    // Método para cleanup\n    cleanup() {\n        this.rateLimiter.clear();\n        this.requestHistory = [];\n        this.tokenUsage = { total: 0, prompt: 0, completion: 0 };\n        this.initialized = false;\n        console.log('OpenAI Provider | Cleanup realizado');\n    }\n}\n","/**\n * Interface de configuração para o AI Assistant\n * Fornece uma UI amigável para configurar o módulo\n */\n\nexport class ConfigInterface extends FormApplication {\n    constructor(aiAssistant, options = {}) {\n        super({}, options);\n        this.aiAssistant = aiAssistant;\n    }\n\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            id: 'ai-assistant-config',\n            title: 'AI Assistant - Configurações',\n            template: 'modules/foundryvtt-ai-assistant/templates/config-form.hbs',\n            width: 600,\n            height: 'auto',\n            closeOnSubmit: true,\n            submitOnChange: false,\n            submitOnClose: false,\n            resizable: true,\n            classes: ['ai-assistant-config-form']\n        });\n    }\n\n    getData() {\n        const config = this.aiAssistant.config;\n        \n        return {\n            // Configurações gerais\n            enabled: config.enabled,\n            debugMode: config.debugMode,\n            commandPrefix: config.commandPrefix,\n            autoCreateAIUser: config.autoCreateAIUser,\n            defaultPermissionLevel: config.defaultPermissionLevel,\n            rateLimitEnabled: config.rateLimitEnabled,\n            maxRequestsPerMinute: config.maxRequestsPerMinute,\n            showStatusInChat: config.showStatusInChat,\n            compactMode: config.compactMode,\n            conversationHistoryLimit: config.conversationHistoryLimit,\n\n            // Provedores disponíveis\n            providers: this.getProviderOptions(),\n            \n            // Configurações de provedores\n            providerConfigs: this.getProviderConfigs(),\n            \n            // Níveis de permissão\n            permissionLevels: this.getPermissionLevels()\n        };\n    }\n\n    getProviderOptions() {\n        const currentProvider = this.aiAssistant.config.defaultProvider;\n        \n        return [\n            {\n                id: 'manus',\n                name: 'Manus',\n                selected: currentProvider === 'manus'\n            },\n            {\n                id: 'openai',\n                name: 'OpenAI',\n                selected: currentProvider === 'openai'\n            }\n        ];\n    }\n\n    getProviderConfigs() {\n        const configs = {};\n        \n        // Configuração Manus\n        configs.manus = {\n            name: 'Manus',\n            enabled: this.aiAssistant.config.providers.manus.enabled,\n            apiKey: this.aiAssistant.config.providers.manus.apiKey,\n            maxTokens: this.aiAssistant.config.providers.manus.maxTokens,\n            temperature: this.aiAssistant.config.providers.manus.temperature,\n            models: [\n                {\n                    id: 'gpt-4.1-mini',\n                    name: 'GPT-4.1 Mini',\n                    selected: this.aiAssistant.config.providers.manus.model === 'gpt-4.1-mini'\n                },\n                {\n                    id: 'gpt-4.1-nano',\n                    name: 'GPT-4.1 Nano',\n                    selected: this.aiAssistant.config.providers.manus.model === 'gpt-4.1-nano'\n                },\n                {\n                    id: 'gemini-2.5-flash',\n                    name: 'Gemini 2.5 Flash',\n                    selected: this.aiAssistant.config.providers.manus.model === 'gemini-2.5-flash'\n                }\n            ]\n        };\n\n        // Configuração OpenAI\n        configs.openai = {\n            name: 'OpenAI',\n            enabled: this.aiAssistant.config.providers.openai.enabled,\n            apiKey: this.aiAssistant.config.providers.openai.apiKey,\n            maxTokens: this.aiAssistant.config.providers.openai.maxTokens,\n            temperature: this.aiAssistant.config.providers.openai.temperature,\n            models: [\n                {\n                    id: 'gpt-4',\n                    name: 'GPT-4',\n                    selected: this.aiAssistant.config.providers.openai.model === 'gpt-4'\n                },\n                {\n                    id: 'gpt-4-turbo',\n                    name: 'GPT-4 Turbo',\n                    selected: this.aiAssistant.config.providers.openai.model === 'gpt-4-turbo'\n                },\n                {\n                    id: 'gpt-3.5-turbo',\n                    name: 'GPT-3.5 Turbo',\n                    selected: this.aiAssistant.config.providers.openai.model === 'gpt-3.5-turbo'\n                }\n            ]\n        };\n\n        return configs;\n    }\n\n    getPermissionLevels() {\n        const currentLevel = this.aiAssistant.config.defaultPermissionLevel;\n        \n        return [\n            {\n                id: 'NONE',\n                name: 'Nenhuma',\n                selected: currentLevel === 'NONE'\n            },\n            {\n                id: 'BASIC',\n                name: 'Básica',\n                selected: currentLevel === 'BASIC'\n            },\n            {\n                id: 'INTERMEDIATE',\n                name: 'Intermediária',\n                selected: currentLevel === 'INTERMEDIATE'\n            },\n            {\n                id: 'ADVANCED',\n                name: 'Avançada',\n                selected: currentLevel === 'ADVANCED'\n            },\n            {\n                id: 'FULL',\n                name: 'Completa',\n                selected: currentLevel === 'FULL'\n            }\n        ];\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n\n        // Botão de teste de conexão para provedores\n        html.find('.test-connection').click(this._onTestConnection.bind(this));\n        \n        // Botão de reset para configurações padrão\n        html.find('.reset-config').click(this._onResetConfig.bind(this));\n        \n        // Validação em tempo real de API keys\n        html.find('input[name*=\"apiKey\"]').on('input', this._onApiKeyInput.bind(this));\n    }\n\n    async _onTestConnection(event) {\n        event.preventDefault();\n        \n        const button = event.currentTarget;\n        const provider = button.dataset.provider;\n        const originalText = button.textContent;\n        \n        button.textContent = 'Testando...';\n        button.disabled = true;\n        \n        try {\n            // Obter configurações atuais do formulário\n            const formData = new FormData(this.form);\n            const apiKey = formData.get(`providers.${provider}.apiKey`);\n            const model = formData.get(`providers.${provider}.model`);\n            \n            if (!apiKey) {\n                throw new Error('API Key é obrigatória');\n            }\n            \n            // Testar conexão com o provedor\n            const providerInstance = this.aiAssistant.providers.get(provider);\n            if (providerInstance && providerInstance.testConnection) {\n                await providerInstance.testConnection({ apiKey, model });\n                ui.notifications.info(`Conexão com ${provider} testada com sucesso!`);\n            } else {\n                throw new Error('Provedor não suporta teste de conexão');\n            }\n            \n        } catch (error) {\n            ui.notifications.error(`Erro ao testar conexão: ${error.message}`);\n        } finally {\n            button.textContent = originalText;\n            button.disabled = false;\n        }\n    }\n\n    async _onResetConfig(event) {\n        event.preventDefault();\n        \n        const confirmed = await Dialog.confirm({\n            title: 'Resetar Configurações',\n            content: '<p>Tem certeza que deseja resetar todas as configurações para os valores padrão?</p>',\n            yes: () => true,\n            no: () => false\n        });\n        \n        if (confirmed) {\n            await this.aiAssistant.resetModule();\n            this.render(true);\n            ui.notifications.info('Configurações resetadas para os valores padrão');\n        }\n    }\n\n    _onApiKeyInput(event) {\n        const input = event.currentTarget;\n        const value = input.value.trim();\n        \n        // Validação básica de API key\n        if (value.length > 0 && value.length < 10) {\n            input.style.borderColor = '#ff6b6b';\n            input.title = 'API Key parece muito curta';\n        } else if (value.length >= 10) {\n            input.style.borderColor = '#51cf66';\n            input.title = 'API Key válida';\n        } else {\n            input.style.borderColor = '';\n            input.title = '';\n        }\n    }\n\n    async _updateObject(event, formData) {\n        try {\n            // Processar dados do formulário\n            const config = foundry.utils.expandObject(formData);\n            \n            // Atualizar configuração do AI Assistant\n            this.aiAssistant.config = foundry.utils.mergeObject(this.aiAssistant.config, config);\n            \n            // Salvar configurações\n            await this.aiAssistant.saveConfiguration();\n            \n            // Reinicializar provedores se necessário\n            if (config.providers) {\n                await this.aiAssistant.initializeProviders();\n            }\n            \n            // Atualizar provedor padrão se mudou\n            if (config.defaultProvider && config.defaultProvider !== this.aiAssistant.config.defaultProvider) {\n                await this.aiAssistant.setProvider(config.defaultProvider);\n            }\n            \n            ui.notifications.info('Configurações salvas com sucesso!');\n            \n        } catch (error) {\n            console.error('Erro ao salvar configurações:', error);\n            ui.notifications.error(`Erro ao salvar configurações: ${error.message}`);\n        }\n    }\n\n    // Método estático para abrir a interface\n    static async show(aiAssistant) {\n        const configInterface = new ConfigInterface(aiAssistant);\n        return configInterface.render(true);\n    }\n}\n\n// Registrar comando de chat para abrir configurações\nexport function registerConfigCommand(aiAssistant) {\n    if (typeof Hooks !== 'undefined') {\n        Hooks.on('chatMessage', (chatLog, message, chatData) => {\n            if (message === '/ai-config' && game.user.isGM) {\n                ConfigInterface.show(aiAssistant);\n                return false; // Prevenir que a mensagem apareça no chat\n            }\n        });\n    }\n}\n","/**\n * FoundryVTT AI Assistant - Arquivo Principal\n * Integra todos os componentes do módulo\n */\n\nimport { AIUserManager } from './ai-user-manager.js';\nimport { APIHandler } from './api-handler.js';\nimport { PermissionManager } from './permissions.js';\nimport { ChatInterface } from './chat-interface.js';\nimport { ManusProvider } from './providers/manus.js';\nimport { OpenAIProvider } from './providers/openai.js';\nimport { ConfigInterface, registerConfigCommand } from './config-interface.js';\n\nclass AIAssistant {\n    constructor() {\n        this.initialized = false;\n        this.components = {};\n        this.providers = new Map();\n        this.currentProvider = null;\n        this.config = {};\n        this.startTime = Date.now();\n    }\n\n    async initialize() {\n        console.log('AI Assistant | Iniciando módulo...');\n        \n        try {\n            // Carregar configurações\n            await this.loadConfiguration();\n            \n            // Inicializar componentes principais\n            await this.initializeComponents();\n            \n            // Configurar provedores de IA\n            await this.initializeProviders();\n            \n            // Configurar hooks do FoundryVTT\n            this.setupFoundryHooks();\n            \n            // Registrar configurações do módulo\n            this.registerModuleSettings();\n            \n            // Configurar API pública\n            this.setupPublicAPI();\n            \n            // Registrar comando de configuração\n            registerConfigCommand(this);\n            \n            this.initialized = true;\n            const initTime = Date.now() - this.startTime;\n            \n            console.log(`AI Assistant | Módulo inicializado com sucesso em ${initTime}ms`);\n            \n            // Notificar usuários\n            this.notifyInitialization();\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro na inicialização:', error);\n            ui.notifications.error(`Erro ao inicializar AI Assistant: ${error.message}`);\n            throw error;\n        }\n    }\n\n    async loadConfiguration() {\n        console.log('AI Assistant | Carregando configurações...');\n        \n        // Configurações padrão\n        this.config = {\n            // Configurações gerais\n            enabled: true,\n            debugMode: false,\n            autoCreateAIUser: true,\n            defaultPermissionLevel: 'BASIC',\n            \n            // Configurações de chat\n            commandPrefix: '/ai',\n            respondToMentions: true,\n            conversationHistoryLimit: 100,\n            \n            // Configurações de provedores\n            defaultProvider: 'manus',\n            providers: {\n                manus: {\n                    enabled: true,\n                    apiKey: '',\n                    model: 'gpt-4.1-mini',\n                    maxTokens: 2000,\n                    temperature: 0.7\n                },\n                openai: {\n                    enabled: false,\n                    apiKey: '',\n                    model: 'gpt-4',\n                    maxTokens: 2000,\n                    temperature: 0.7\n                }\n            },\n            \n            // Configurações de segurança\n            rateLimitEnabled: true,\n            maxRequestsPerMinute: 30,\n            requireGMApprovalForDangerous: true,\n            \n            // Configurações de UI\n            showStatusInChat: true,\n            showPermissionRequests: true,\n            compactMode: false\n        };\n\n        // Carregar configurações salvas (se existirem)\n        try {\n            // Simular carregamento de configurações (FoundryVTT real usaria game.settings)\n            const savedConfig = this.getStoredConfig() || {};\n            this.config = { ...this.config, ...savedConfig };\n        } catch (error) {\n            console.warn('AI Assistant | Erro ao carregar configurações salvas, usando padrão:', error);\n        }\n    }\n\n    getStoredConfig() {\n        // Usar game.settings para persistência real no FoundryVTT\n        try {\n            if (typeof game !== 'undefined' && game.settings) {\n                return game.settings.get('foundryvtt-ai-assistant', 'config') || {};\n            } else {\n                // Fallback para desenvolvimento/testes\n                return JSON.parse(localStorage.getItem('ai-assistant-config') || '{}');\n            }\n        } catch {\n            return {};\n        }\n    }\n\n    async initializeComponents() {\n        console.log('AI Assistant | Inicializando componentes...');\n        \n        // Inicializar gerenciador de permissões\n        this.components.permissionManager = new PermissionManager();\n        await this.components.permissionManager.initialize();\n        \n        // Inicializar gerenciador de usuário IA\n        this.components.aiUserManager = new AIUserManager(this.components.permissionManager);\n        await this.components.aiUserManager.initialize();\n        \n        // Inicializar handler de API\n        this.components.apiHandler = new APIHandler(\n            this.components.permissionManager,\n            this.components.aiUserManager\n        );\n        await this.components.apiHandler.initialize();\n        \n        // Inicializar interface de chat\n        this.components.chatInterface = new ChatInterface(\n            this.components.permissionManager,\n            this.components.apiHandler,\n            this.components.aiUserManager\n        );\n        await this.components.chatInterface.initialize();\n        \n        console.log('AI Assistant | Componentes inicializados com sucesso');\n    }\n\n    async initializeProviders() {\n        console.log('AI Assistant | Inicializando provedores de IA...');\n        \n        // Inicializar provedor Manus\n        if (this.config.providers.manus.enabled) {\n            try {\n                const manusProvider = new ManusProvider(this.config.providers.manus);\n                await manusProvider.initialize();\n                this.providers.set('manus', manusProvider);\n                console.log('AI Assistant | Provedor Manus inicializado');\n            } catch (error) {\n                console.warn('AI Assistant | Erro ao inicializar provedor Manus:', error);\n            }\n        }\n        \n        // Inicializar provedor OpenAI\n        if (this.config.providers.openai.enabled) {\n            try {\n                const openaiProvider = new OpenAIProvider(this.config.providers.openai);\n                await openaiProvider.initialize();\n                this.providers.set('openai', openaiProvider);\n                console.log('AI Assistant | Provedor OpenAI inicializado');\n            } catch (error) {\n                console.warn('AI Assistant | Erro ao inicializar provedor OpenAI:', error);\n            }\n        }\n        \n        // Configurar provedor padrão\n        await this.setDefaultProvider();\n    }\n\n    async setDefaultProvider() {\n        const defaultProviderName = this.config.defaultProvider;\n        const provider = this.providers.get(defaultProviderName);\n        \n        if (provider) {\n            this.currentProvider = provider;\n            console.log(`AI Assistant | Provedor padrão configurado: ${provider.name}`);\n        } else {\n            // Usar o primeiro provedor disponível\n            const firstProvider = this.providers.values().next().value;\n            if (firstProvider) {\n                this.currentProvider = firstProvider;\n                console.log(`AI Assistant | Usando primeiro provedor disponível: ${firstProvider.name}`);\n            } else {\n                console.warn('AI Assistant | Nenhum provedor de IA disponível');\n            }\n        }\n        \n        // Configurar provedor na interface de chat\n        if (this.currentProvider && this.components.chatInterface) {\n            await this.components.chatInterface.setAIProvider(this.currentProvider.name.toLowerCase());\n        }\n    }\n\n    setupFoundryHooks() {\n        console.log('AI Assistant | Configurando hooks do FoundryVTT...');\n        \n        if (typeof Hooks !== 'undefined') {\n            // Hook para quando o chat é renderizado\n            Hooks.on('renderChatLog', (app, html, data) => {\n                if (this.components.chatInterface) {\n                    this.components.chatInterface.onChatLogRender(app, html, data);\n                }\n            });\n\n            // Hook para mensagens de chat\n            Hooks.on('createChatMessage', (message, options, userId) => {\n                if (this.components.chatInterface) {\n                    this.components.chatInterface.onChatMessage(message, options, userId);\n                }\n            });\n\n            // Hook para quando um ator é atualizado\n            Hooks.on('updateActor', (actor, data, options, userId) => {\n                if (this.components.apiHandler) {\n                    this.components.apiHandler.onActorUpdate(actor, data, options, userId);\n                }\n            });\n\n            // Hook para quando configurações são alteradas\n            Hooks.on('closeSettingsConfig', () => {\n                this.loadConfiguration();\n            });\n\n            console.log('AI Assistant | Hooks do FoundryVTT configurados');\n        } else {\n            // Fallback para desenvolvimento/testes\n            console.log('AI Assistant | Hooks configurados (modo desenvolvimento)');\n        }\n    }\n\n    registerModuleSettings() {\n        console.log('AI Assistant | Registrando configurações do módulo...');\n        \n        if (typeof game !== 'undefined' && game.settings) {\n            // Configuração principal do módulo\n            game.settings.register('foundryvtt-ai-assistant', 'config', {\n                name: 'AI Assistant Configuration',\n                hint: 'Configurações internas do módulo AI Assistant',\n                scope: 'world',\n                config: false,\n                type: Object,\n                default: {}\n            });\n\n            // Configurações visíveis para o usuário\n            game.settings.register('foundryvtt-ai-assistant', 'enabled', {\n                name: 'AI Assistant Habilitado',\n                hint: 'Habilita ou desabilita o módulo AI Assistant',\n                scope: 'world',\n                config: true,\n                type: Boolean,\n                default: true,\n                onChange: value => {\n                    this.config.enabled = value;\n                    if (!value && this.components.chatInterface) {\n                        this.components.chatInterface.disable();\n                    }\n                }\n            });\n\n            game.settings.register('foundryvtt-ai-assistant', 'defaultProvider', {\n                name: 'Provedor de IA Padrão',\n                hint: 'Selecione o provedor de IA padrão',\n                scope: 'world',\n                config: true,\n                type: String,\n                choices: {\n                    'manus': 'Manus',\n                    'openai': 'OpenAI'\n                },\n                default: 'manus',\n                onChange: value => {\n                    this.setProvider(value);\n                }\n            });\n\n            game.settings.register('foundryvtt-ai-assistant', 'debugMode', {\n                name: 'Modo Debug',\n                hint: 'Habilita logs detalhados para depuração',\n                scope: 'world',\n                config: true,\n                type: Boolean,\n                default: false,\n                onChange: value => {\n                    this.config.debugMode = value;\n                }\n            });\n\n            console.log('AI Assistant | Configurações do FoundryVTT registradas');\n        } else {\n            // Fallback para desenvolvimento/testes\n            console.log('AI Assistant | Configurações registradas (modo desenvolvimento)');\n        }\n    }\n\n    setupPublicAPI() {\n        console.log('AI Assistant | Configurando API pública...');\n        \n        // Expor API pública do módulo\n        const api = {\n            // Métodos principais\n            isInitialized: () => this.initialized,\n            getStats: () => this.getStats(),\n            getConfig: () => ({ ...this.config }),\n            \n            // Gerenciamento de provedores\n            getProviders: () => Array.from(this.providers.keys()),\n            getCurrentProvider: () => this.currentProvider?.name || null,\n            setProvider: (name) => this.setProvider(name),\n            \n            // Permissões\n            checkPermission: (action) => this.components.permissionManager?.checkPermission(action) || false,\n            grantPermission: (action, granted) => this.components.permissionManager?.grantPermission(action, granted),\n            setPermissionLevel: (level) => this.components.permissionManager?.setPermissionLevel(level),\n            \n            // Chat e comandos\n            sendMessage: (content, options) => this.components.chatInterface?.sendMessage(content, options),\n            processCommand: (command) => this.components.chatInterface?.processDirectMessage(command),\n            \n            // Usuário IA\n            getAIUser: () => this.components.aiUserManager?.getAIUser(),\n            getAIUserStats: () => this.components.aiUserManager?.getAIUserStats(),\n            \n            // Utilitários\n            approvePermission: (action) => this.approvePermission(action),\n            denyPermission: (action) => this.denyPermission(action),\n            resetModule: () => this.resetModule(),\n            \n            // Interface de configuração\n            openConfig: () => ConfigInterface.show(this)\n        };\n\n        // Expor API globalmente\n        window.aiAssistantAPI = api;\n        \n        console.log('AI Assistant | API pública configurada');\n    }\n\n    // ========== MÉTODOS PÚBLICOS ==========\n\n    async setProvider(providerName) {\n        const provider = this.providers.get(providerName);\n        if (!provider) {\n            throw new Error(`Provedor \"${providerName}\" não encontrado`);\n        }\n        \n        this.currentProvider = provider;\n        this.config.defaultProvider = providerName;\n        \n        // Atualizar interface de chat\n        if (this.components.chatInterface) {\n            await this.components.chatInterface.setAIProvider(providerName);\n        }\n        \n        // Salvar configuração\n        await this.saveConfiguration();\n        \n        console.log(`AI Assistant | Provedor alterado para: ${provider.name}`);\n    }\n\n    async approvePermission(action) {\n        if (this.components.permissionManager) {\n            await this.components.permissionManager.grantPermission(action, true, { force: true });\n            console.log(`AI Assistant | Permissão \"${action}\" aprovada para a IA`);\n        }\n    }\n\n    async denyPermission(action) {\n        if (this.components.permissionManager) {\n            await this.components.permissionManager.grantPermission(action, false, { force: true });\n            console.log(`AI Assistant | Permissão \"${action}\" negada para a IA`);\n        }\n    }\n\n    async resetModule() {\n        console.warn('AI Assistant | Resetando módulo...');\n        \n        try {\n            // Reset de componentes\n            if (this.components.permissionManager) {\n                await this.components.permissionManager.resetToDefault();\n            }\n            \n            // Limpar provedores\n            for (const provider of this.providers.values()) {\n                if (provider.cleanup) {\n                    provider.cleanup();\n                }\n            }\n            \n            // Recarregar configurações\n            await this.loadConfiguration();\n            \n            console.log('AI Assistant | Módulo resetado com sucesso');\n            \n        } catch (error) {\n            console.error('AI Assistant | Erro ao resetar módulo:', error);\n        }\n    }\n\n    async saveConfiguration() {\n        try {\n            if (typeof game !== 'undefined' && game.settings) {\n                await game.settings.set('foundryvtt-ai-assistant', 'config', this.config);\n                console.log('AI Assistant | Configuração salva no FoundryVTT');\n            } else {\n                // Fallback para desenvolvimento/testes\n                localStorage.setItem('ai-assistant-config', JSON.stringify(this.config));\n                console.log('AI Assistant | Configuração salva (modo desenvolvimento)');\n            }\n        } catch (error) {\n            console.error('AI Assistant | Erro ao salvar configuração:', error);\n        }\n    }\n\n    getStats() {\n        const stats = {\n            initialized: this.initialized,\n            enabled: this.config.enabled,\n            uptime: Date.now() - this.startTime,\n            currentProvider: this.currentProvider?.name || null,\n            availableProviders: Array.from(this.providers.keys()),\n            components: {}\n        };\n\n        // Estatísticas dos componentes\n        if (this.components.permissionManager) {\n            stats.components.permissions = this.components.permissionManager.getStats();\n        }\n        \n        if (this.components.aiUserManager) {\n            stats.components.aiUser = this.components.aiUserManager.getAIUserStats();\n        }\n        \n        if (this.components.apiHandler) {\n            stats.components.apiHandler = this.components.apiHandler.getStats();\n        }\n        \n        if (this.components.chatInterface) {\n            stats.components.chatInterface = this.components.chatInterface.getStats();\n        }\n\n        // Estatísticas dos provedores\n        stats.providers = {};\n        for (const [name, provider] of this.providers.entries()) {\n            if (provider.getStats) {\n                stats.providers[name] = provider.getStats();\n            }\n        }\n\n        return stats;\n    }\n\n    notifyInitialization() {\n        const providerCount = this.providers.size;\n        const message = `AI Assistant inicializado com ${providerCount} provedor(es) de IA`;\n        \n        console.log(`AI Assistant | ${message}`);\n    }\n\n    // Método para demonstração - processar comando diretamente\n    async processTestCommand(command) {\n        if (this.components.chatInterface) {\n            await this.components.chatInterface.processDirectMessage(command);\n        }\n    }\n\n    // Método para demonstração - obter status completo\n    getFullStatus() {\n        return {\n            module: {\n                initialized: this.initialized,\n                uptime: Date.now() - this.startTime,\n                config: this.config\n            },\n            components: {\n                permissionManager: this.components.permissionManager?.getStats(),\n                aiUserManager: this.components.aiUserManager?.getAIUserStats(),\n                apiHandler: this.components.apiHandler?.getStats(),\n                chatInterface: this.components.chatInterface?.getStats()\n            },\n            providers: Object.fromEntries(\n                Array.from(this.providers.entries()).map(([name, provider]) => [\n                    name, \n                    provider.getStats ? provider.getStats() : { name: provider.name }\n                ])\n            )\n        };\n    }\n}\n\n// ========== INICIALIZAÇÃO DO MÓDULO ==========\n\n// Instância global do módulo\nlet aiAssistant = null;\n\n// Função de inicialização\nasync function initializeAIAssistant() {\n    console.log('AI Assistant | Iniciando inicialização...');\n    \n    try {\n        aiAssistant = new AIAssistant();\n        await aiAssistant.initialize();\n        \n        // Expor instância globalmente\n        window.aiAssistant = aiAssistant;\n        \n        return aiAssistant;\n        \n    } catch (error) {\n        console.error('AI Assistant | Falha na inicialização:', error);\n        throw error;\n    }\n}\n\n// Inicialização usando hooks reais do FoundryVTT\nif (typeof Hooks !== 'undefined') {\n    // Hook de inicialização do FoundryVTT\n    Hooks.once('init', initializeAIAssistant);\n    \n    // Hook quando o jogo está pronto\n    Hooks.once('ready', () => {\n        if (aiAssistant && aiAssistant.initialized) {\n            console.log('AI Assistant | Módulo pronto para uso!');\n            \n            // Notificar usuários se habilitado\n            if (aiAssistant.config.enabled && game.user.isGM) {\n                ui.notifications.info('AI Assistant carregado com sucesso!');\n            }\n        }\n    });\n} else {\n    // Fallback para desenvolvimento/testes\n    initializeAIAssistant().then(() => {\n        console.log('AI Assistant | Módulo pronto para uso (modo desenvolvimento)!');\n        \n        // Demonstrar funcionalidades\n        console.log('AI Assistant | Estatísticas:', aiAssistant.getStats());\n        console.log('AI Assistant | API disponível em window.aiAssistantAPI');\n        console.log('AI Assistant | Instância disponível em window.aiAssistant');\n        \n    }).catch(error => {\n        console.error('AI Assistant | Erro na inicialização:', error);\n    });\n}\n\n// Exportar para uso em outros módulos\nexport { AIAssistant, initializeAIAssistant };\n"],"names":["AIUserManager","constructor","this","aiUser","aiUserId","sessionData","Map","lastActivity","sessionTimeout","initialize","console","log","findExistingAIUser","name","id","validateAIUser","createAIUser","setupSessionMonitoring","updateActivity","error","game","users","find","u","getFlag","validateUserData","user","undefined","get","warn","options","defaultOptions","avatar","color","role","CONST","USER_ROLES","PLAYER","userData","foundry","utils","mergeObject","Date","now","User","create","setFlag","setupInitialPermissions","notifyUserCreation","Error","message","permissions","ACTOR_CREATE","DRAWING_CREATE","ITEM_CREATE","JOURNAL_CREATE","MACRO_SCRIPT","MESSAGE_WHISPER","NOTE_CREATE","SETTINGS_MODIFY","SHOW_CURSOR","SHOW_RULER","TEMPLATE_CREATE","TOKEN_CREATE","TOKEN_CONFIGURE","WALL_DOORS","currentUser","updateAIUserPermissions","updatedPermissions","logPermissionChange","changeLog","push","timestamp","changes","changedBy","length","splice","deleteAIUser","confirm","userName","cleanupUserData","delete","clear","ui","notifications","info","messages","filter","m","collections","actors","items","scenes","journal","macros","collection","document","contents","ownership","update","setInterval","checkSessionTimeout","refreshSession","messageData","content","type","CHAT_MESSAGE_TYPES","OTHER","speaker","alias","ChatMessage","getAIUser","getAIUserId","isInitialized","getSessionData","key","setSessionData","value","set","clearSessionData","getAIUserStats","createdAt","sessionActive","permissionHistory","version","APIHandler","permissionManager","logger","initialized","operationQueue","isProcessingQueue","validateFoundryAPIs","setupDefaultTemplates","startQueueProcessor","requiredAPIs","api","getProperty","window","templates","actor","character","system","abilities","str","dex","con","int","wis","cha","attributes","hp","max","ac","details","level","xp","npc","cr","item","weapon","weaponType","damage","parts","properties","finesse","light","spell","school","components","verbal","somatic","material","async","processOperationQueue","operation","shift","executeOperation","result","execute","callback","queueOperation","Promise","resolve","reject","createActor","data","startTime","checkPermission","validateActorData","inplace","checkDuplicates","a","allowDuplicates","Actor","duration","actorId","success","updateActor","updates","updatedFields","Object","keys","deleteActor","hasPlayerOwner","force","actorName","queryActors","filters","nameRegex","RegExp","test","limit","slice","results","map","img","count","isUpdate","includes","createItem","validateItemData","createEmbeddedDocuments","Item","itemId","updateItem","createScene","validateSceneData","scene","Scene","sceneId","activateScene","activate","createJournalEntry","validateJournalData","JournalEntry","journalId","createMacro","validateMacroData","macro","Macro","macroId","executeMacro","args","command","rollDice","formula","roll","Roll","evaluate","toChat","toMessage","flavor","total","getStats","queueLength","size","tables","playlists","PermissionManager","permissionLevels","temporaryPermissions","definePermissionLevels","loadPermissions","setDefaultPermissions","startTemporaryPermissionCleanup","description","sendMessage","sendWhisper","queryItems","queryScenes","queryJournal","queryMacros","queryTables","queryPlaylists","queryCompendium","viewDocuments","deleteItem","createJournal","updateJournal","deleteJournal","updateMacro","importFromCompendium","updateScene","deleteScene","createRollTable","updateRollTable","deleteRollTable","rollTable","createPlaylist","updatePlaylist","deletePlaylist","playAudio","createToken","updateToken","deleteToken","manageCombat","manageUsers","modifySettings","manageModules","deleteAnyDocument","executeArbitraryCode","modifyPermissions","accessFileSystem","networkAccess","savedPermissions","getStoredPermissions","savedLevel","getStoredPermissionLevel","setPermissionLevel","permission","entries","JSON","parse","localStorage","getItem","savePermissions","permissionsObj","fromEntries","setItem","stringify","levelName","notifyPermissionChange","action","tempPermission","expires","granted","hasPermission","debug","grantPermission","oldValue","temporary","revokePermission","grantTemporaryPermission","grantedAt","grantedBy","setTimeout","requestPermission","reason","autoApprove","isBasicPermission","pending","levelDisplayName","newValue","logEntry","expired","canCreateActors","canDeleteActors","canModifyScenes","canExecuteMacros","canManageUsers","getCurrentPermissionLevel","getAvailablePermissionLevels","Array","from","getActivePermissions","active","remaining","getPermissionHistory","currentLevel","totalPermissions","activePermissions","historyEntries","resetToDefault","validatePermissionRequest","context","valid","requiresGMApproval","ChatInterface","apiHandler","aiUserManager","commandPrefix","commands","conversationHistory","activeConversations","aiProviders","currentProvider","registerCommands","setupChatListeners","loadAIProviders","setDefaultProvider","usage","handler","handleHelpCommand","bind","handleStatusCommand","handleRollCommand","handleCreateCommand","handleSearchCommand","handleMacroCommand","handleSceneCommand","handleConfigCommand","handleChatCommand","simulateFoundryHooks","onChatMessage","userId","startsWith","processCommand","isMentionedInMessage","processAIMention","isRelevantMessage","addToConversationHistory","sendErrorMessage","originalMessage","trim","split","commandName","cleanContent","replace","handleFreeConversation","helpText","cmd","join","aiUserStats","permissionStats","apiStats","statusText","toLocaleString","toLowerCase","dataString","searchTerm","actorList","macroName","macroArgs","params","sceneData","option","setAIProvider","toUpperCase","buildConversationContext","response","processMessage","recentHistory","worldContext","getWorldContext","activeScene","playerCount","systemName","providerName","provider","whisper","targetUserId","commandsRegistered","conversationHistoryLength","availableProviders","processDirectMessage","mockMessage","ManusProvider","config","apiKey","process","env","MANUS_API_KEY","baseUrl","model","maxTokens","temperature","rateLimiter","requestHistory","testConnection","fetch","method","headers","ok","status","json","checkRateLimit","prompt","buildPrompt","makeAPIRequest","processedResponse","processResponse","addToHistory","systemPrompt","getSystemPrompt","formatConversationHistory","formatWorldContext","max_tokens","stream","history","msg","body","errorData","catch","apiResponse","choices","choice","processSpecialCommands","substring","match","tokens","cutoff","recentRequests","values","time","forEach","index","generateNPC","specialRequest","explainRule","rule","generateDescription","subject","updateConfig","newConfig","getConfig","hasApiKey","req","totalRequests","averageResponseTime","calculateAverageResponseTime","rateLimitStatus","current","windowMs","totalTime","reduce","sum","responseTime","Math","round","cleanup","OpenAIProvider","OPENAI_API_KEY","tokenUsage","completion","updateTokenUsage","presence_penalty","frequency_penalty","finish_reason","term","total_tokens","prompt_tokens","completion_tokens","generateEncounter","difficulty","environment","partyLevel","generateLoot","challenge","avgResponseTime","avgTokensPerRequest","averageTokensPerRequest","estimatedCost","calculateEstimatedCost","costs","modelCost","promptCost","completionCost","currency","ConfigInterface","FormApplication","aiAssistant","super","title","template","width","height","closeOnSubmit","submitOnChange","submitOnClose","resizable","classes","getData","enabled","debugMode","autoCreateAIUser","defaultPermissionLevel","rateLimitEnabled","maxRequestsPerMinute","showStatusInChat","compactMode","conversationHistoryLimit","providers","getProviderOptions","providerConfigs","getProviderConfigs","getPermissionLevels","defaultProvider","selected","configs","manus","models","openai","activateListeners","html","click","_onTestConnection","_onResetConfig","on","_onApiKeyInput","event","preventDefault","button","currentTarget","dataset","originalText","textContent","disabled","formData","FormData","form","providerInstance","Dialog","yes","no","resetModule","render","input","style","borderColor","_updateObject","expandObject","saveConfiguration","initializeProviders","setProvider","show","AIAssistant","loadConfiguration","initializeComponents","setupFoundryHooks","registerModuleSettings","setupPublicAPI","Hooks","chatLog","chatData","isGM","registerConfigCommand","initTime","notifyInitialization","respondToMentions","requireGMApprovalForDangerous","showPermissionRequests","savedConfig","getStoredConfig","settings","chatInterface","manusProvider","openaiProvider","defaultProviderName","firstProvider","next","app","onChatLogRender","onActorUpdate","register","hint","scope","default","Boolean","onChange","disable","String","getProviders","getCurrentProvider","approvePermission","denyPermission","openConfig","aiAssistantAPI","stats","uptime","processTestCommand","getFullStatus","module","initializeAIAssistant","once","then"],"sourceRoot":""}
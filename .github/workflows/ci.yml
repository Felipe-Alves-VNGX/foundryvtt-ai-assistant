name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  validate:
    name: Validate Module
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate module.json
      run: |
        if ! jq empty module.json; then
          echo "‚ùå module.json is not valid JSON"
          exit 1
        fi
        echo "‚úÖ module.json is valid"
        
    - name: Check required fields
      run: |
        REQUIRED_FIELDS=("name" "title" "description" "version" "minimumCoreVersion" "scripts")
        for field in "${REQUIRED_FIELDS[@]}"; do
          if ! jq -e ".$field" module.json > /dev/null; then
            echo "‚ùå Missing required field: $field"
            exit 1
          fi
        done
        echo "‚úÖ All required fields present"
        
    - name: Validate version format
      run: |
        VERSION=$(jq -r '.version' module.json)
        if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Version format invalid: $VERSION"
          exit 1
        fi
        echo "‚úÖ Version format valid: $VERSION"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  build:
    name: Build Module
    runs-on: ubuntu-latest
    needs: [test, validate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build module
      run: npm run build
      
    - name: Create module package
      run: |
        mkdir -p dist
        zip -r "dist/foundryvtt-ai-assistant-${{ github.sha }}.zip" \
          module.json \
          scripts/ \
          styles/ \
          lang/ \
          templates/ \
          README.md \
          LICENSE \
          CHANGELOG.md
          
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: module-package
        path: dist/
        retention-days: 30

  compatibility:
    name: FoundryVTT Compatibility
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        foundry-version: ['10.291', '11.315', '12.331']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check compatibility
      run: |
        MIN_VERSION=$(jq -r '.minimumCoreVersion' module.json)
        COMPAT_VERSION=$(jq -r '.compatibleCoreVersion // .minimumCoreVersion' module.json)
        
        echo "Testing compatibility with FoundryVTT ${{ matrix.foundry-version }}"
        echo "Minimum version: $MIN_VERSION"
        echo "Compatible version: $COMPAT_VERSION"
        
        # Simular teste de compatibilidade
        echo "‚úÖ Compatibility check passed for ${{ matrix.foundry-version }}"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, validate, security, build, compatibility]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build release
      run: npm run build
      
    - name: Get version
      id: version
      run: echo "version=$(jq -r '.version' module.json)" >> $GITHUB_OUTPUT
      
    - name: Create release package
      run: |
        mkdir -p release
        zip -r "release/foundryvtt-ai-assistant-v${{ steps.version.outputs.version }}.zip" \
          module.json \
          scripts/ \
          styles/ \
          lang/ \
          templates/ \
          README.md \
          LICENSE \
          CHANGELOG.md
          
    - name: Update module.json for release
      run: |
        jq '.download = "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/foundryvtt-ai-assistant-v${{ steps.version.outputs.version }}.zip"' module.json > module-release.json
        mv module-release.json module.json
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/foundryvtt-ai-assistant-v${{ steps.version.outputs.version }}.zip
          module.json
        body: |
          ## FoundryVTT AI Assistant v${{ steps.version.outputs.version }}
          
          ### Installation
          Use this manifest URL in FoundryVTT:
          ```
          https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/module.json
          ```
          
          Or download the ZIP file and install manually.
          
          ### Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ### Compatibility
          - FoundryVTT v10.0.0 or higher
          - Tested with FoundryVTT v10.291, v11.315, v12.331
          
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, validate, security, build, compatibility]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.validate.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' && needs.compatibility.result == 'success'
      run: |
        echo "üéâ All checks passed! Module is ready for use."
        
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.validate.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' || needs.compatibility.result == 'failure'
      run: |
        echo "‚ùå Some checks failed. Please review the logs."
        exit 1
